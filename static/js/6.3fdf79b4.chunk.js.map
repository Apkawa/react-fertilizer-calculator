{"version":3,"sources":["components/ui/IconButton.tsx","components/ui/ReduxForm/normalizers.ts","components/ui/RebassWidgets/index.ts","components/ui/ReduxForm/Input.tsx","hooks/ReduxForm.ts","components/ui/ReduxForm/Checkbox.tsx","components/ui/Modal/ModalContainer.tsx","components/ui/Modal/Modal.tsx","components/Calculator/ImportExport/format/hpg.ts","utils/csv.ts","components/Calculator/FertilizerSelect/SelectedListItem.tsx","components/Calculator/ImportExport/format/base.ts","utils/downloads.ts","components/Calculator/FertilizerManager/AddItemElementForm.tsx","components/Calculator/FertilizerManager/AddEditCompositionList.tsx","components/Calculator/FertilizerManager/AddEditNPKString.tsx","components/Calculator/FertilizerManager/AddEdit.tsx","components/Calculator/FertilizerManager/Item.tsx","components/Calculator/ImportExport/ImportFertilizers.tsx","components/Calculator/ImportExport/ExportFertilizers.tsx","components/Calculator/FertilizerManager/List.tsx","components/Calculator/FertilizerManager/index.ts"],"names":["IconButton","forwardRef","props","buttonRef","IconComponent","component","size","children","extraProps","useState","containerSize","setSize","theme","useTheme","useEffect","current","offsetWidth","marginRight","type","ref","color","colors","background","style","number","value","parseInt","decimal","parseFloat","Input","styled","RebassInput","WrappedInput","input","label","lang","placeholder","name","useFormName","useContext","ReduxFormContext","form","useFormValues","formName","dispatch","useDispatch","useSelector","state","getFormValues","change","WrappedCheckbox","checked","Checkbox","StyledOverlay","Flex","window","pageYOffset","ModalContainer","modalRoot","el","document","querySelector","createElement","setAttribute","body","appendChild","useModalRoot","ReactDOM","createPortal","Helmet","backgroundColor","height","Modal","opened","button","container","closed","setClose","onClose","modalActions","open","close","renderCbProps","modal","justifyContent","fontSize","title","Icon","Cross","onClick","FERTILIZERS","HPGFormat","parsed","fertilizers","f","els","entries","normalizeFertilizer","id","composition","formula","percent","elements","filter","e","map","npk","elementsToNPK","Object","fromEntries","fInfo","solution_density","solution_concentration","pump_number","match","undefined","push","microNPK","MICRO_ELEMENT_NAMES","chkComplex","buildNPKFertilizer","string","pairs","split","l","k","v","tryParseFloat","solution_volume","V","this","buildFertilizers","FERTILIZER_ELEMENT_NAMES","includes","meta","version","created","calculator","calculationForm","recipe","tAml","normalizeConcentration","dilution_enabled","dilution_volume","dilution_concentration","accuracy","chK2SO4","chMgNO3","mixerOptions","url","addrMixer","result","recipes","profile","trim","pair","length","replace","p","parseProfileStringToObject","s","join","NO3","NH4","BaseFormat","ext","csvParse","parse","csvExport","stringify","Element","delta","displayName","isOxide","NPKOxides","hasOwnProperty","bg","flex","mx","px","minWidth","maxWidth","flexDirection","alignItems","SelectedListItem","item","onRemove","weight","normalizedFertilizer","width","key","margin","textAlign","volume","liquid_weight","padding","alignSelf","saveData","a","data","fileName","blob","Blob","URL","createObjectURL","href","download","click","revokeObjectURL","AddItemElementForm","disabled","min","max","autoComplete","normalize","AddEditCompositionList","fields","i","step","remove","stringifyProfile","n","AddEditNPKString","composition_enable","onChange","setValue","isEditing","setEditing","target","Number","isFinite","npkEl","compositionToElements","_e","_p","parseProfileString","console","log","onFocus","onBlur","getInitialValues","formData","solution_density_enable","formToFertilizer","formValues","AddEdit","reduxForm","FERTILIZER_EDIT_FORM_NAME","enableReinitialize","Form","MACRO_ELEMENT_NAMES","FieldArray","sx","whiteSpace","required","Item","fertilizer","marginBottom","Edit","initialValues","fertilizerPush","onSave","Trash","fertilizerRemove","COLUMNS","ImportFertilizers","createRef","newSize","offsetHeight","handleOnChange","files","file","reader","FileReader","onload","csv","columns","isNaN","P","splice","loadCSV","readAsText","position","Import","accept","event","top","left","opacity","ExportFertilizers","rows","cols","csvData","header","Export","List","Plus","onAdd","list","setList","newList","fertilizerSet","paddingBottom","flexWrap","marginLeft","Restart","fertilizerReset","FertilizerManager"],"mappings":"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","file":"static/js/6.3fdf79b4.chunk.js","sourcesContent":["import React, {forwardRef, MouseEventHandler, PropsWithChildren, useEffect, useState} from \"react\";\nimport {Button, ButtonProps} from \"rebass\";\nimport {EmotionIcon} from '@emotion-icons/emotion-icon'\n\nimport {useTheme} from \"emotion-theming\";\nimport {Theme} from \"@/themes/types\";\n\n\ninterface IconButtonProps extends\n  PropsWithChildren<Omit<ButtonProps, keyof React.HTMLProps<HTMLButtonElement>>> {\n  component: EmotionIcon,\n  disabled?: boolean,\n  onClick?: MouseEventHandler<HTMLButtonElement>,\n  size?: number | string,\n  title?: string\n}\n\nexport const IconButton = forwardRef<HTMLButtonElement, IconButtonProps>(\n  (props, buttonRef) => {\n    const {\n      component: IconComponent,\n      size = \"1.5em\",\n      children,\n      ...extraProps\n    } = props\n    const [containerSize, setSize] = useState<number | string>(size || 0)\n    const theme = useTheme<Theme>()\n\n    useEffect(() => {\n      if (!size && buttonRef && 'current' in buttonRef) {\n        setSize(buttonRef.current?.offsetWidth || 0)\n      }\n    }, [buttonRef, setSize, size])\n    let marginRight = 0;\n    if (children) {\n      marginRight = 2;\n    }\n    return (\n      <Button type=\"button\" {...extraProps} ref={buttonRef}>\n        <IconComponent\n          color={theme.colors?.background}\n          size={containerSize}\n          style={{marginRight}}\n        />\n        {children}\n      </Button>\n    )\n  })\n","\n\nexport function number(value: any) {\n  return value && parseInt(value)\n}\n\nexport function decimal(value: any) {\n  return value && parseFloat(value)\n}\n","import {Input as RebassInput, InputProps as RebassInputProps} from \"@rebass/forms\";\nimport styled from \"styled-components\";\n\n\nexport type InputProps = RebassInputProps\n\nexport const Input = styled(RebassInput)`\n  ::-webkit-inner-spin-button, ::-webkit-outer-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n    width: 0;\n    height: 0;\n  }\n  -moz-appearance: textfield;\n`\n\n\n\n","import React from \"react\";\nimport {Field as ReduxField} from \"redux-form\";\n\nimport {Input as RebassInput, InputProps as RebassInputProps} from \"../RebassWidgets\";\nimport {ReduxFormComponentType, WrapperInputType} from \"./types\";\n\ninterface InputProps extends RebassInputProps {\n  label?: string\n}\n\nexport const StyledInput = RebassInput\n\nexport const WrappedInput: WrapperInputType<InputProps> = ({input, label, type = \"text\", ...props}: any) =>\n  <RebassInput  {...props}\n                {...input}\n                type={type}\n                lang=\"en-US\"\n                placeholder={props.placeholder || label}\n  />\n\n\n// TODO вывести тип\nexport const Input: ReduxFormComponentType<InputProps> = (\n  {\n    name,\n    ...props\n  }) => {\n\n  return (\n    <ReduxField\n      component={WrappedInput}\n      name={name}\n      {...props as any}\n    />\n  )\n}\n","import {useContext} from 'react'\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {change, FormContext, getFormValues, ReduxFormContext} from \"redux-form\";\n\nexport function useReduxForm(): FormContext {\n  return useContext(ReduxFormContext)\n}\n\nexport function useFormName(): string {\n  return useReduxForm().form\n}\n\nexport function useFormValues<FormValues=object>(formName: string): [FormValues, (name: string, value: any) => void] {\n  const dispatch = useDispatch()\n  const values = useSelector(state => getFormValues(formName)(state)) as FormValues\n\n  const setValue = (name: string, value: any) => {\n    dispatch(change(formName, name, value))\n  }\n  return [\n    values,\n    setValue\n    ]\n}\n","import React from \"react\";\n\nimport {Checkbox as RebassCheckbox, CheckboxProps as RebassCheckboxProps, Label} from \"@rebass/forms\";\nimport {Field as ReduxField} from \"redux-form\";\nimport {ReduxFormComponentType, WrapperInputType} from \"./types\";\n\ninterface CheckboxProps extends RebassCheckboxProps {\n  label: string\n}\n\nconst WrappedCheckbox: WrapperInputType<CheckboxProps> = ({input, label, ...props}: any) =>\n  <Label>\n    <RebassCheckbox\n      {...props} {...input}\n      checked={input.value}\n    />\n    {label}\n  </Label>\n\n// TODO вывести тип\nexport const Checkbox: ReduxFormComponentType<CheckboxProps> = ({name, ...props}) => {\n  return (\n    <ReduxField\n      component={WrappedCheckbox}\n      name={name}\n      {...props as any}\n    />\n  )\n}\n\n","import React, {ReactNode} from \"react\";\nimport ReactDOM from 'react-dom'\nimport {Card, Flex} from \"rebass\";\nimport styled from '@emotion/styled'\nimport {Helmet} from \"react-helmet\";\n\n\ninterface ModalContainerProps {\n  children: ReactNode,\n}\n\nconst useModalRoot = () => {\n  let el = document.querySelector('#modal-root')\n  if (!el) {\n    el = document.createElement('div')\n    el.setAttribute('id', 'modal-root')\n    document.body.appendChild(el)\n  }\n  return el\n}\n\nconst StyledOverlay = styled(Flex)`\n  overflow-y: auto;\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  top: ${() => `${window.pageYOffset}px`};\n  left: 0;\n  justify-content: center;\n  align-items: center;\n  background-color: rgba(255, 255, 255, 0.5);\n  z-index: 999;\n  \n  // Mobile\n  @media screen and (max-height: 500px), screen and (max-width: 500px) {\n    align-items: initial;\n  }\n`\n\nexport function ModalContainer(props: ModalContainerProps) {\n  const {\n    children,\n  } = props\n  const modalRoot = useModalRoot()\n  return ReactDOM.createPortal(\n    <>\n      <Helmet>\n        <style type='text/css'>\n          {`\n          body {\n            overflow: hidden;\n          }\n        `}\n        </style>\n      </Helmet>\n      <StyledOverlay>\n        <Card backgroundColor='#fff' height=\"max-content\">\n          {children}\n        </Card>\n      </StyledOverlay>\n    </>\n    , modalRoot)\n}\n","import React, {ReactNode, useEffect, useState} from \"react\";\nimport {ModalContainer} from \"@/components/ui/Modal/ModalContainer\";\nimport {Box, Flex, Heading} from \"rebass\";\nimport {Icon} from \"@/components/ui/Icon\";\nimport {Cross} from \"@styled-icons/entypo/Cross\";\n\nexport interface ModalActions {\n  open: () => void,\n  close: () => void,\n}\n\ntype RenderCb = (props: {modal: ModalActions}) => ReactNode\n\ninterface ModalProps {\n  opened?: boolean,\n  onClose?: () => void,\n  button?: RenderCb,\n  title?: string,\n  container: RenderCb,\n}\n\nexport function Modal(props: ModalProps) {\n  const {\n    opened = false,\n    button,\n    container,\n  } = props\n\n  const [closed, setClose] = useState(!opened)\n\n  useEffect(() => {\n    setClose(!opened)\n  }, [opened])\n\n  useEffect(() => {\n    if (closed && props.onClose) {\n      props.onClose()\n    }\n  }, [closed, props])\n\n  const modalActions: ModalActions = {\n    open: () => setClose(false),\n    close: () => setClose(true),\n  }\n  const renderCbProps = {modal: modalActions}\n\n  return (\n    <>\n      {button && button(renderCbProps)}\n      {closed ? null : <ModalContainer>\n        <Flex justifyContent='space-between'>\n          <Heading fontSize={2}>{props.title}</Heading>\n          <Icon component={Cross} onClick={modalActions.close}/>\n        </Flex>\n        <Box>\n          {container(renderCbProps)}\n        </Box>\n      </ModalContainer>\n      }\n    </>\n  )\n}\n","import {BaseFormat} from \"./base\";\nimport {ExportStateType} from \"./types\";\nimport {NPKElements} from \"../../../../calculator/types\";\nimport {FERTILIZER_ELEMENT_NAMES, MICRO_ELEMENT_NAMES} from '../../../../calculator/constants';\nimport {buildNPKFertilizer, elementsToNPK, normalizeFertilizer} from \"../../../../calculator/fertilizer\";\nimport {entries, tryParseFloat} from \"../../../../utils\";\nimport {FertilizerInfo} from \"../../types\";\nimport {normalizeConcentration} from \"../../../../calculator/dilution\";\n\nconst FERTILIZERS = [\n  \"CaNO3\", \"KNO3\", \"NH4NO3\", \"MgSO4\", \"KH2PO4\", \"K2SO4\", \"MgNO3\", \"CaCl2\",\n]\n\nexport class HPGFormat extends BaseFormat {\n  static ext = \".hpg\"\n\n  export(state: ExportStateType): string {\n    return \"\";\n  }\n\n  buildFertilizers(parsed: any): FertilizerInfo[] {\n    let fertilizers = []\n    for (let f of FERTILIZERS) {\n      let els = entries(normalizeFertilizer(\n        {id: \"\", composition: [{formula: f, percent: 100}]}, true\n      ).elements).filter(e => e[1]).map(e => e[0])\n\n      let npk = elementsToNPK(Object.fromEntries(els.map(e => [e, parsed[`${f}_${e}`] || 0])))\n      const fInfo: FertilizerInfo = {\n        id: f,\n        npk,\n        solution_density: parsed[`gml${f}`] * 1000,\n        solution_concentration: parsed[`gl${f}`],\n      }\n      let pump_number = parseFloat(parsed[`m${f}`].match(/\\d+/)) || undefined\n      if (pump_number) {\n        fInfo.pump_number = pump_number\n      }\n      fertilizers.push(fInfo)\n    }\n    // Micro\n    let microNPK = Object.fromEntries(MICRO_ELEMENT_NAMES.map(e => [e, parsed[`d${e}`]]))\n    if (parsed.chkComplex === \"TRUE\") {\n      const fInfo: FertilizerInfo = buildNPKFertilizer('Микро', microNPK)\n      fInfo.solution_density = parsed['gmlCmplx']\n      fInfo.solution_concentration = parsed['glCmplx']\n      let pump_number = parseFloat(parsed[`mCmplx`].match(/\\d+/))\n      if (pump_number) {\n        fInfo.pump_number = pump_number\n      }\n      fertilizers.push(fInfo)\n    } else {\n      for (let e of MICRO_ELEMENT_NAMES) {\n        if (!microNPK[e]) {\n          continue\n        }\n        const fInfo: FertilizerInfo = buildNPKFertilizer(e, {[e]: microNPK[e] || 0})\n        fInfo.solution_density = parsed[`gl${e}`]\n        fInfo.solution_concentration = parsed[`gl${e}`]\n        let pump_number = parseFloat(parsed[`m${e}`].match(/\\d+/)) || undefined\n        if (pump_number) {\n          fInfo.pump_number = pump_number\n        }\n        fertilizers.push(fInfo)\n      }\n    }\n    return fertilizers\n  }\n\n  import(string: string): ExportStateType {\n    let pairs = string.split('\\n').map(l => l.split('=')).map(([k, v]) => [k, tryParseFloat(v)])\n    let parsed = Object.fromEntries(pairs)\n    const solution_volume = parseFloat(parsed.V || 1)\n    const fertilizers = this.buildFertilizers(parsed)\n    let npk = Object.fromEntries(\n      pairs.filter(e => FERTILIZER_ELEMENT_NAMES.includes(e[0] as FERTILIZER_ELEMENT_NAMES))\n    ) as NPKElements\n    for (let e of MICRO_ELEMENT_NAMES) {\n      let v = npk[e]\n      if (v) {\n        npk[e] = v / 1000\n      }\n    }\n    let state: ExportStateType = {\n      meta: {\n        version: parsed.version || \"\",\n        created: \"\",\n        ref: \"\",\n      },\n      calculator: {\n        calculationForm: {\n          recipe: npk,\n          solution_volume: parsed.tAml / 1000,\n          solution_concentration: normalizeConcentration((solution_volume * 1000) / parsed.tAml),\n          dilution_enabled: true,\n          dilution_volume: solution_volume,\n          dilution_concentration: normalizeConcentration(1),\n          accuracy: 0.01,\n          fertilizers: fertilizers.filter(f => {\n            if (f.id === 'K2SO4') {\n              return parsed.chK2SO4 === 'TRUE'\n            }\n            if (f.id === 'MgNO3') {\n              return parsed.chMgNO3 === 'TRUE'\n            }\n            return true\n          }),\n          mixerOptions: {\n            url: parsed.addrMixer\n          },\n        },\n        result: null,\n        fertilizers,\n        recipes: [],\n      }\n    }\n\n    return state;\n  }\n\n  static parseProfileStringToObject(profile: string): { [key: string]: number } {\n    const elements: { [key: string]: number } = {}\n\n    for (let e of profile.split(' ')) {\n      e = e.trim()\n      if (e) {\n        let pair = e.split('=')\n        if (pair.length === 2) {\n          elements[pair[0].trim()] = parseFloat(pair[1].replace(\",\", '.'))\n        }\n      }\n    }\n    return elements\n  }\n\n  static parseProfileString(profile: string): NPKElements {\n    const elements: NPKElements = {}\n\n    const p = HPGFormat.parseProfileStringToObject(profile)\n    for (const [k, v] of Object.entries(p)) {\n      if (FERTILIZER_ELEMENT_NAMES.includes(k as FERTILIZER_ELEMENT_NAMES)) {\n        elements[k as FERTILIZER_ELEMENT_NAMES] = v\n      }\n    }\n    return elements\n  }\n\n  static stringifyProfile(npk: NPKElements): string {\n    let s = FERTILIZER_ELEMENT_NAMES.map(\n      e => typeof npk[e] != \"undefined\" && `${e}=${npk[e]}`)\n      .filter(e => e).join(' ')\n    return `N=${(npk.NO3 || 0) + (npk.NH4 || 0)} ${s}`\n  }\n}\n","import parse from \"csv-parse/lib/sync\"\nimport stringify from \"csv-stringify/lib/sync\"\n\nexport const csvParse = parse\nexport const csvExport = stringify\n\n\n","import React, {FunctionComponent} from \"react\";\nimport {Box, Card, Flex, Text} from \"rebass\";\nimport {Cross} from \"@styled-icons/entypo/Cross\"\nimport {FertilizerType} from \"./types\";\nimport {normalizeFertilizer} from \"@/calculator/fertilizer\";\nimport {FERTILIZER_ELEMENT_NAMES, NPKOxides} from \"@/calculator/constants\";\nimport {IconButton} from \"@/components/ui/IconButton\";\nimport {FertilizerWeights} from \"@/calculator\";\nimport {Elements} from \"@/calculator/types\";\n\ninterface ElementProps {\n  name: keyof Elements,\n  isOxide?: boolean,\n  value: number,\n  delta?: number,\n}\n\nexport const Element: FunctionComponent<ElementProps> = (props) => {\n  const {name,\n    value,\n    delta,\n    isOxide\n  } = props\n  let displayName: string = name;\n  if (isOxide && NPKOxides.hasOwnProperty(name)) {\n    displayName = NPKOxides[name] as string\n  }\n  return (\n    <Box bg={name} flex={1} mx=\"2px\" px={1} color={'black'} minWidth=\"2.1em\" maxWidth=\"4em\" fontSize={1}>\n      <Flex flexDirection='column' alignItems={'center'}>\n        <Box>{displayName}</Box>\n        <Box>{value}</Box>\n        {typeof delta !== \"undefined\" ? <Box>{delta}</Box> : null}\n      </Flex>\n    </Box>\n  )\n}\n\ninterface SelectedListItemProps {\n  item: FertilizerType,\n  onRemove: () => void,\n  weight?: FertilizerWeights,\n}\n\n\nexport const SelectedListItem: FunctionComponent<SelectedListItemProps> = ({item, onRemove, weight}) => {\n  const normalizedFertilizer = normalizeFertilizer(item, false)\n  return (\n    <Card width={'auto'}>\n      <Flex justifyContent={'space-between'} alignItems=\"center\">\n        <Box flex={1}>\n          <Text flex={1}>\n            {item.id}\n          </Text>\n          <Flex>\n            {\n              FERTILIZER_ELEMENT_NAMES.map((name) => {\n                  let v = normalizedFertilizer.elements[name]\n                  if (!v) {\n                    return null\n                  }\n                  return <Element\n                    name={name}\n                    key={name}\n                    value={v}\n                    isOxide\n                  />\n                }\n              )\n            }\n          </Flex>\n        </Box>\n        <Flex>\n          <Flex alignItems=\"center\" justifyContent=\"center\" margin={1}>\n            {weight ? (\n              <Text textAlign=\"center\" minWidth=\"3em\">\n                {weight.weight}г\n                {weight.volume ? (\n                  <>\n                    <br/>\n                    <span\n                      title=\"Объем или вес раствора\">{weight.volume && `${weight.volume} мл${weight.liquid_weight? `, ${weight.liquid_weight}г`:''}`}</span>\n                  </>\n                ) : null}\n              </Text>\n            ) : null}\n          </Flex>\n          <IconButton\n            padding={1}\n            alignSelf=\"center\"\n            component={Cross}\n            onClick={() => onRemove()}\n          />\n        </Flex>\n      </Flex>\n    </Card>\n  )\n}\n","import {ExportStateType} from \"./types\";\n\nexport abstract class BaseFormat {\n  static ext: string\n  abstract export(state: ExportStateType): string\n  abstract import(string: string): ExportStateType\n\n\n}\n","export const saveData = (function () {\n  const a = document.createElement(\"a\");\n  document.body.appendChild(a);\n  a.setAttribute('style', \"display: none\")\n  return function (data: string, fileName: string) {\n    const blob = new Blob([data], {type: \"octet/stream\"})\n    const url = window.URL.createObjectURL(blob)\n    a.href = url;\n    a.download = fileName;\n    a.click();\n    window.URL.revokeObjectURL(url);\n  };\n})();\n\nexport {}\n","import React, {FunctionComponent} from \"react\";\nimport {Flex} from \"rebass\";\nimport {Input} from \"@/components/ui/ReduxForm/Input\";\nimport {decimal} from \"@/components/ui/ReduxForm/normalizers\";\nimport {Elements} from \"@/calculator/types\";\nimport {NPKOxides} from \"@/calculator/constants\";\n\ninterface RecipeElementFormProps {\n  name: keyof Elements,\n  disabled?: boolean\n}\n\n\nexport const AddItemElementForm: FunctionComponent<RecipeElementFormProps> = (props) => {\n  const {name, disabled} = props\n  let displayName: string = name;\n  if (NPKOxides.hasOwnProperty(name)) {\n    displayName = NPKOxides[name] as string\n  }\n  return (\n    <Flex flexDirection=\"column\" justifyContent=\"center\" alignItems=\"center\" width='4rem'>\n      <label style={{textAlign: 'center'}}>\n        {displayName}\n      </label>\n      <Input\n        name={'npk.' + name}\n        type=\"number\"\n        min=\"0\"\n        max=\"100\"\n        autoComplete=\"off\"\n        width=\"3rem\"\n        style={{\n          textAlign: \"center\"\n        }}\n        normalize={decimal}\n        disabled={disabled}\n      />\n    </Flex>\n  )\n}\n","import React from \"react\";\nimport {ReduxFieldArrayType} from \"@/components/ui/ReduxForm/types\";\nimport {Card, Flex} from \"rebass\";\nimport {FertilizerComposition} from \"@/calculator/types\";\nimport {Input} from \"@/components/ui/ReduxForm/Input\";\nimport {decimal} from \"@/components/ui/ReduxForm/normalizers\";\n\ninterface AddEditCompositionListProps {\n}\n\ntype AddEditCompositionListType = ReduxFieldArrayType<AddEditCompositionListProps, FertilizerComposition>\nexport const AddEditCompositionList: AddEditCompositionListType = (props) => {\n  const {fields} = props\n  return (\n    <Card width=\"100%\">\n      <Flex>\n        <button type=\"button\"  onClick={() => fields.push({formula: '', percent: 98})}>+</button>\n      </Flex>\n      <Flex flexDirection=\"column\">\n        {fields.map((f, i) => (\n          <Flex key={i} width=\"100%\">\n            <Input name={`${f}.formula`} flex={2} placeholder={\"NH4NO3\"}/>\n            <Input\n              name={`${f}.percent`}\n              type=\"number\"\n              step=\"0.1\"\n              min=\"0\"\n              max=\"100\"\n              placeholder={\"98\"}\n              normalize={decimal}\n              flex={1}\n            />\n            <button type=\"button\" onClick={() => fields.remove(i)}>-</button>\n          </Flex>\n        ))}\n      </Flex>\n    </Card>\n  )\n}\n","import React, {ChangeEvent, FunctionComponent, useEffect, useState} from \"react\";\nimport {Flex} from \"rebass\";\nimport {Elements, NPKElements} from \"@/calculator/types\";\nimport {Input} from \"@rebass/forms\";\nimport {FERTILIZER_ELEMENT_NAMES, NPKOxides} from \"@/calculator/constants\";\nimport {HPGFormat} from \"@/components/Calculator/ImportExport/format/hpg\";\nimport {compositionToElements, elementsToNPK} from \"@/calculator/fertilizer\";\nimport {entries} from \"@/utils\";\nimport {useFormName, useFormValues} from \"@/hooks/ReduxForm\";\nimport {AddEditFormType} from \"@/components/Calculator/FertilizerManager/types\";\n\ninterface AddEditNPKStringProps {\n  npk?: NPKElements,\n  onChange?: (elements: NPKElements) => void\n}\n\nfunction parseProfileString(profile: string): NPKElements {\n  const elements: Partial<Elements> = {}\n  const p = HPGFormat.parseProfileStringToObject(profile)\n  for (const [k, v] of Object.entries(p)) {\n    if (!Number.isFinite(v)) {\n      continue\n    }\n\n    if (FERTILIZER_ELEMENT_NAMES.includes(k as FERTILIZER_ELEMENT_NAMES)) {\n      elements[k as FERTILIZER_ELEMENT_NAMES] = v\n    } else {\n        // Может быть это какой то оксид. Может даже целое уравнение.\n        const npkEl = compositionToElements(\n          // Представим это как химическую формулу\n          [{percent: v, formula: k}])\n        for (const [_e, _p] of entries(npkEl)) {\n          if (_p) {\n            elements[_e] = (elements[_e] || 0) + _p\n          }\n        }\n    }\n  }\n  // Конвертируем в оксидную форму\n  return elementsToNPK(elements)\n}\n\nfunction stringifyProfile(npk: NPKElements): string {\n  let s = FERTILIZER_ELEMENT_NAMES.map(\n    e => {\n      if (npk[e]) {\n        let n = e as string;\n        // Т.к. оперируем оксидами, то оксиды выводим как оксиды\n        if (NPKOxides.hasOwnProperty(e)) {\n          n = NPKOxides[e] as string\n        }\n        return `${n}=${npk[e]}`\n      }\n      return undefined\n    })\n    .filter(e => e).join(' ')\n  return `${s}`\n}\n\n\nexport const AddEditNPKString: FunctionComponent<AddEditNPKStringProps> = (props) => {\n  const {composition_enable} = useFormValues<AddEditFormType>(useFormName())[0]\n  const {\n    npk,\n    onChange,\n  } = props\n  // TODO разобрать useReducer вместо useState\n  const [value, setValue] = useState<string|undefined>(\n    npk && stringifyProfile(npk))\n  const [isEditing, setEditing] = useState(false)\n\n  useEffect(() => {\n    if (!isEditing) {\n      setValue(props.npk && stringifyProfile(props.npk))\n    }\n  }, [isEditing, props.npk]);\n\n  const onChangeInput = (e: ChangeEvent<HTMLInputElement>) => {\n    setValue(e.target.value)\n    const elements = parseProfileString(e.target.value)\n    console.log(elements)\n    onChange && onChange(elements)\n  }\n  return (\n    <Flex flexDirection=\"column\" justifyContent=\"center\" alignItems=\"center\" width={\"100%\"} padding={2}>\n      <label style={{textAlign: 'center'}}>\n\n      </label>\n      <Input\n        disabled={composition_enable}\n        placeholder={'Быстрое редактирование в формате \"NO3=10 P2O5=12 K=5\"'}\n        value={value}\n        type=\"string\"\n        autoComplete=\"off\"\n        style={{\n          textAlign: \"center\"\n        }}\n        onChange={onChangeInput}\n        onFocus={() => setEditing(true)}\n        onBlur={() => {\n          setEditing(false)\n          setValue(props.npk && stringifyProfile(props.npk))}\n        }\n      />\n    </Flex>\n  )\n}\n","import React from \"react\";\nimport {Box, Flex, Text} from \"rebass\";\n\nimport {change, FieldArray, Form, reduxForm} from 'redux-form'\nimport {ReduxFormType} from \"@/components/ui/ReduxForm/types\";\nimport {Input} from \"@/components/ui/ReduxForm/Input\";\nimport {normalizeFertilizer} from \"@/calculator/fertilizer\";\nimport {MACRO_ELEMENT_NAMES, MICRO_ELEMENT_NAMES} from \"@/calculator/constants\";\n\nimport {AddItemElementForm} from \"./AddItemElementForm\";\n\nimport {FERTILIZER_EDIT_FORM_NAME} from \"./constants\";\nimport {AddEditFormType} from \"./types\";\nimport {Checkbox} from \"@/components/ui/ReduxForm/Checkbox\";\nimport {AddEditCompositionList} from \"@/components/Calculator/FertilizerManager/AddEditCompositionList\";\nimport {useFormName, useFormValues} from \"@/hooks/ReduxForm\";\nimport {decimal, number} from \"@/components/ui/ReduxForm/normalizers\";\nimport {Label} from \"@rebass/forms\";\nimport {FertilizerInfo} from \"@/components/Calculator/types\";\nimport {AddEditNPKString} from \"@/components/Calculator/FertilizerManager/AddEditNPKString\";\nimport {useDispatch} from \"react-redux\";\n\ninterface AddEditProps {\n  fertilizer?: FertilizerInfo,\n}\n\nexport const getElements = (f: FertilizerInfo) => {\n  return normalizeFertilizer(f, false).elements\n}\n\nexport function getInitialValues(f: FertilizerInfo): AddEditFormType {\n  let formData: AddEditFormType = {...f}\n\n  if (f.composition) {\n    formData.npk = normalizeFertilizer(f, false).elements\n    formData.composition_enable = true\n  }\n  if (f.solution_concentration) {\n    formData.solution_concentration = f.solution_concentration\n    formData.solution_density = f.solution_density || 1000\n    formData.solution_density_enable = true\n  }\n  return formData\n}\n\nexport function formToFertilizer(formValues: AddEditFormType): FertilizerInfo {\n  const {\n    composition_enable, composition, npk,\n    solution_density_enable, solution_density, solution_concentration,\n    ..._f\n  } = formValues\n  const f: FertilizerInfo = _f\n  if (composition_enable) {\n    f.composition = composition\n  } else {\n    f.npk = npk\n  }\n  if (solution_density_enable) {\n    f.solution_density = solution_density\n    f.solution_concentration = solution_concentration\n  }\n  return f\n}\n\nconst AddEditForm: ReduxFormType<AddEditProps, AddEditFormType> = (props) => {\n  const formName = useFormName();\n  const formValues = useFormValues<AddEditFormType>(formName)[0]\n  const dispatch = useDispatch()\n\n  return (\n    <Form>\n      <Flex flexDirection='column'>\n        <Input name=\"id\" title=\"Name\" label=\"Name\"/>\n        <Box>\n          Макроэлементы\n        </Box>\n        <Flex>\n          {MACRO_ELEMENT_NAMES.map(el => (\n            <AddItemElementForm\n              name={el}\n              disabled={formValues.composition_enable}\n            />\n          ))}\n        </Flex>\n        <Box>\n          Микроэлементы\n        </Box>\n        <Flex>\n          {MICRO_ELEMENT_NAMES.map(el => (\n            <AddItemElementForm\n              name={el}\n              disabled={formValues.composition_enable}\n            />\n          ))}\n        </Flex>\n        <Flex>\n          <AddEditNPKString\n            npk={formValues.npk}\n            onChange={(npk) => {\n              dispatch(change(formName, 'npk', npk))\n            }}/>\n        </Flex>\n\n        <Flex>\n          <Checkbox name=\"composition_enable\" label=\"Формула\"/>\n        </Flex>\n        {formValues.composition_enable ?\n          <Flex>\n            <FieldArray<{}>\n              name=\"composition\"\n              component={AddEditCompositionList}\n            />\n          </Flex> : null\n        }\n        <Flex alignItems='center'>\n          <Box width=\"auto\" marginRight={2}>\n            <Checkbox\n              name=\"solution_density_enable\" label=\"Раствор\"\n            />\n          </Box>\n          {formValues.solution_density_enable ?\n            <Flex flexDirection=\"column\">\n              <Flex alignItems=\"flex-end\">\n                <Label flexDirection=\"column\">\n                  Концентрация\n                  <Input\n                    name=\"solution_concentration\"\n                    type=\"number\"\n                    step=\"0.1\"\n                    min=\"0\"\n                    max=\"3000\"\n                    normalize={decimal}\n                    width='5em'\n                    marginRight={2}\n                  />\n                  <Text sx={{whiteSpace: 'nowrap'}}>г/л</Text>\n                </Label>\n              </Flex>\n              <Flex alignItems=\"flex-end\">\n                <Label flexDirection=\"column\">\n                  Плотность\n                  <Input\n                    name=\"solution_density\"\n                    type=\"number\"\n                    step=\"1\"\n                    min=\"800\"\n                    max=\"3000\"\n                    normalize={number}\n                    width='5em'\n                    marginRight={2}\n                  />\n                </Label>\n                <Text sx={{whiteSpace: 'nowrap'}}>г/л</Text>\n              </Flex>\n            </Flex>\n            : null}\n        </Flex>\n        <Flex>\n          <Label flexDirection=\"column\">\n            Миксер, номер помпы\n            <Input\n              name=\"pump_number\"\n              type=\"number\"\n              step=\"1\"\n              min=\"1\"\n              max=\"16\"\n              required={false}\n              normalize={number}\n              maxWidth={'3em'}\n            />\n          </Label>\n        </Flex>\n      </Flex>\n    </Form>\n  )\n}\n\n\nexport const AddEdit = reduxForm<AddEditFormType>({\n  form: FERTILIZER_EDIT_FORM_NAME,\n  enableReinitialize: true\n})(AddEditForm)\n","import React from \"react\";\nimport {Box, Button, Card, Flex, Text} from \"rebass\";\n\nimport {normalizeFertilizer} from \"@/calculator/fertilizer\";\nimport {FERTILIZER_ELEMENT_NAMES} from \"@/calculator/constants\";\n\nimport {IconButton} from \"@/components/ui/IconButton\";\nimport {Edit} from \"@styled-icons/fa-regular/Edit\"\nimport {Trash} from \"@styled-icons/fa-solid/Trash\";\n\nimport {Element} from \"../FertilizerSelect/SelectedListItem\";\nimport {AddEdit, formToFertilizer, getInitialValues} from './AddEdit';\nimport {Modal, ModalActions} from \"@/components/ui/Modal/Modal\";\nimport {useFormValues} from \"@/hooks/ReduxForm\";\nimport {FERTILIZER_EDIT_FORM_NAME} from \"@/components/Calculator/FertilizerManager/constants\";\nimport {useDispatch} from \"react-redux\";\nimport {fertilizerPush, fertilizerRemove} from \"@/components/Calculator/actions\";\nimport {AddEditFormType} from \"@/components/Calculator/FertilizerManager/types\";\nimport {FertilizerInfo} from \"@/components/Calculator/types\";\n\ninterface ItemProps {\n  fertilizer: FertilizerInfo\n}\n\nexport function Item(props: ItemProps) {\n  const {fertilizer} = props\n  const normalizedFertilizer = normalizeFertilizer(fertilizer, false)\n  const [formValues] = useFormValues<AddEditFormType>(FERTILIZER_EDIT_FORM_NAME)\n  const dispatch = useDispatch()\n  const onRemove = () => {\n    dispatch(fertilizerRemove(fertilizer))\n  }\n  const onSave = (modal: ModalActions) => {\n    dispatch(fertilizerPush(formToFertilizer(formValues)))\n    modal.close()\n  }\n  return (\n    <>\n      <Card width={'auto'} marginBottom={2}>\n        <Flex justifyContent={'space-between'} alignItems=\"center\">\n          <Box flex={1}>\n            <Text flex={1}>\n              {fertilizer.id} &nbsp;\n              {fertilizer.solution_concentration && `[жидкий ${fertilizer.solution_concentration} г/л]`} &nbsp;\n              <span title={\"Номер помпы в миксере\"}>{fertilizer.pump_number && `p${fertilizer.pump_number}`}</span> &nbsp;\n            </Text>\n            <Flex>\n              {\n                FERTILIZER_ELEMENT_NAMES.map((name) => {\n                    let v = normalizedFertilizer.elements[name]\n                    if (!v) {\n                      return null\n                    }\n                    return <Element\n                      name={name}\n                      key={name}\n                      value={v}\n                      isOxide\n                    />\n                  }\n                )\n              }\n            </Flex>\n          </Box>\n          <Flex>\n            <Modal\n              button={({modal}) => (\n                <IconButton\n                  padding={1}\n                  alignSelf=\"center\"\n                  component={Edit}\n                  backgroundColor={'primary'}\n                  onClick={modal.open}\n                />\n              )}\n              container={({modal}) => (\n                <>\n                <AddEdit\n                  initialValues={getInitialValues(fertilizer)}\n                />\n                  <Flex justifyContent=\"flex-end\">\n                    <Button type=\"button\" onClick={() => onSave(modal)}>Save</Button>\n                  </Flex>\n                </>\n              )}\n            />\n            <IconButton\n              padding={1}\n              alignSelf=\"center\"\n              component={Trash}\n              backgroundColor={'danger'}\n              onClick={onRemove}\n            />\n          </Flex>\n        </Flex>\n      </Card>\n    </>\n  )\n}\n","import React, {ChangeEvent, createRef, useEffect, useState} from \"react\";\nimport {Import} from \"@styled-icons/boxicons-regular/Import\"\nimport {IconButton} from \"@/components/ui/IconButton\";\nimport {csvParse} from \"@/utils/csv\";\nimport {FERTILIZER_ELEMENT_NAMES} from \"@/calculator/constants\";\nimport {buildNPKFertilizer} from \"@/calculator/fertilizer\";\nimport {useDispatch} from \"react-redux\";\nimport {fertilizerPush} from \"@/components/Calculator/actions\";\n\ninterface ImportFertilizersProps {\n}\n\nconst COLUMNS = ['id', ...FERTILIZER_ELEMENT_NAMES]\n\nexport function ImportFertilizers(props: ImportFertilizersProps) {\n  const buttonRef = createRef<HTMLButtonElement>()\n  const dispatch = useDispatch()\n  const [size, setSize] = useState({width: 0, height: 0})\n  useEffect(() => {\n    const newSize = {\n      width: buttonRef.current?.offsetWidth || 0,\n      height: buttonRef.current?.offsetHeight || 0,\n    }\n    if (size.width !== newSize.width) {\n      setSize(newSize)\n    }\n  }, [buttonRef, size.width])\n\n  const loadCSV = (csv: string) => {\n    const p = csvParse(csv, {columns: COLUMNS})\n    if (isNaN(parseInt(p[0].P))) {\n      p.splice(0, 1)\n    }\n    for (let {id, ...npk} of p) {\n      const f = buildNPKFertilizer(id, npk)\n      dispatch(fertilizerPush(f))\n    }\n  }\n\n  const handleOnChange = (e: ChangeEvent<HTMLInputElement>) => {\n    console.log(e.target.value, e.target.files?.[0])\n    const file = e.target.files?.[0]\n    if (!file) {\n      return file\n    }\n    let reader = new FileReader();\n    reader.onload = () => {\n      console.log(reader.result)\n      loadCSV(reader.result as string)\n\n    }\n    reader.readAsText(file)\n\n  }\n  return (\n    <>\n      <IconButton\n        sx={{\n          position: \"relative\"\n        }}\n        ref={buttonRef}\n        component={Import}\n      >\n        <input type=\"file\"\n               accept=\"text/csv, .csv\"\n               onChange={event => handleOnChange(event)}\n               style={{\n                 top: 0,\n                 left: 0,\n                 position: \"absolute\",\n                 opacity: 0,\n                 ...size,\n               }}\n        />\n      </IconButton>\n    </>\n  )\n}\n","import React from \"react\";\nimport {Export} from \"@styled-icons/boxicons-regular/Export\"\nimport {IconButton} from \"@/components/ui/IconButton\";\nimport {useSelector} from \"react-redux\";\nimport {CalculatorState} from \"@/components/Calculator/types\";\nimport {normalizeFertilizer} from \"@/calculator/fertilizer\";\nimport {FERTILIZER_ELEMENT_NAMES} from \"@/calculator/constants\";\nimport {csvExport} from \"@/utils/csv\";\nimport {saveData} from \"@/utils/downloads\";\n\ninterface ExportFertilizersProps {\n}\n\nexport function ExportFertilizers(props: ExportFertilizersProps) {\n  const {\n    fertilizers,\n  } = useSelector<any>(state => state.calculator) as CalculatorState\n  const doExport = () => {\n    const npkFertilizer = fertilizers.map(f => normalizeFertilizer(f, false))\n    const rows = npkFertilizer.map(f => {\n      const cols = FERTILIZER_ELEMENT_NAMES.map(n => f.elements[n])\n      return [f.id, ...cols]\n    })\n    const csvData = csvExport(rows, {columns: ['Удобрение', ...FERTILIZER_ELEMENT_NAMES], header: true})\n    saveData(csvData, \"Удобрения.csv\")\n  }\n  return (\n    <>\n      <IconButton onClick={doExport} component={Export}/>\n    </>\n  )\n}\n","import React from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {CalculatorState} from \"@/components/Calculator/types\";\nimport {Box, Button, Card, Flex, Heading} from \"rebass\";\nimport {ReactSortable} from \"react-sortablejs\";\n\nimport {Item} from \"./Item\";\nimport {fertilizerPush, fertilizerReset, fertilizerSet} from \"@/components/Calculator/actions\";\nimport {Modal, ModalActions} from \"@/components/ui/Modal/Modal\";\nimport {IconButton} from \"@/components/ui/IconButton\";\nimport {Plus} from \"@styled-icons/boxicons-regular/Plus\";\nimport {AddEdit, formToFertilizer, getInitialValues} from \"@/components/Calculator/FertilizerManager/AddEdit\";\nimport {useFormValues} from \"@/hooks/ReduxForm\";\nimport {AddEditFormType} from \"@/components/Calculator/FertilizerManager/types\";\nimport {FERTILIZER_EDIT_FORM_NAME} from \"@/components/Calculator/FertilizerManager/constants\";\nimport {ImportFertilizers} from \"@/components/Calculator/ImportExport/ImportFertilizers\";\nimport {ExportFertilizers} from \"@/components/Calculator/ImportExport/ExportFertilizers\";\nimport {Restart} from \"@styled-icons/remix-line/Restart\";\n\ninterface ListProps {\n}\n\nexport function List(props: ListProps) {\n  const {\n    fertilizers,\n  } = useSelector<any>(state => state.calculator) as CalculatorState\n  const [formValues] = useFormValues<AddEditFormType>(FERTILIZER_EDIT_FORM_NAME)\n  const dispatch = useDispatch()\n\n  function onAdd(modal: ModalActions) {\n    dispatch(fertilizerPush(formToFertilizer(formValues)))\n    modal.close()\n  }\n\n  return (\n    <Flex flexDirection='column'>\n      <Flex>\n        <Modal\n          button={({modal}) => (\n            <IconButton\n              padding={1}\n              alignSelf=\"center\"\n              component={Plus}\n              backgroundColor={'primary'}\n              onClick={modal.open}\n            />\n          )}\n          container={({modal}) => (\n            <>\n              <AddEdit\n                initialValues={getInitialValues({id: ''})}\n              />\n              <Flex justifyContent=\"flex-end\">\n                <Button type=\"button\" onClick={() => onAdd(modal)}>Save</Button>\n              </Flex>\n            </>\n          )}\n        />\n      </Flex>\n      <ReactSortable list={fertilizers} setList={newList => dispatch(fertilizerSet(newList))}>\n        {fertilizers.map(f => (\n          <Item fertilizer={f} key={f.id}/>\n        ))}\n      </ReactSortable>\n      <Card>\n        <Heading fontSize={2}>Импорт/Экспорт</Heading>\n        <Flex flexDirection=\"column\" p={3}>\n          <Flex alignItems='center'\n                paddingBottom={2}\n                justifyContent=\"space-between\"\n                flexWrap=\"wrap\"\n          >\n            <Box sx={{\n              \"&>*\": {\n                marginLeft: 1\n              }\n            }}>\n              <ImportFertilizers/>\n              <ExportFertilizers/>\n              <IconButton\n                component={Restart}\n                onClick={() => dispatch(fertilizerReset())}\n              />\n            </Box>\n          </Flex>\n        </Flex>\n      </Card>\n    </Flex>\n  )\n}\n","import {List as FertilizerManager} from './List'\n\nexport {List as FertilizerManager} from './List'\n\nexport default FertilizerManager\n"],"sourceRoot":""}