{"version":3,"sources":["components/ui/Dropdown/context.ts","components/ui/Dropdown/DropdownItem.tsx","components/ui/Dropdown/DropdownList.tsx","components/ui/Dropdown/Dropdown.tsx","components/ui/IconButton.tsx","components/Calculator/FertilizerSelect/SelectedListItem.tsx","components/Calculator/FertilizerSelect/AddItemElementForm.tsx","components/Calculator/FertilizerSelect/AddItemFertilizerEditForm.tsx","components/Calculator/FertilizerSelect/AddItem.tsx","hooks/ReduxForm.ts","components/Calculator/FertilizerSelect/SelectedList.tsx","components/Calculator/FertilizerSelect/Container.tsx","components/Calculator/FertilizerSelect/index.ts","components/ui/ReduxForm/validators.ts","components/ui/ReduxForm/Checkbox.tsx","components/Calculator/Options/IgnoreElement.tsx","components/ui/ReduxForm/Radio.tsx","components/ui/ReduxForm/normalizers.ts","components/Calculator/Options/Accuracy.tsx","components/ui/ReduxForm/Input.tsx","components/Calculator/Options/Solution.tsx","components/Calculator/Options/Dilution.tsx","components/Calculator/Options/Options.tsx","components/Calculator/Options/RecipeElementForm.tsx","components/Calculator/Options/Recipe.tsx","components/Calculator/Result/ResultFertilizerList.tsx","components/Calculator/Result/hooks.ts","calculator/dilution.ts","components/Calculator/Result/ResultDilution.tsx","components/Calculator/Result/Result.tsx","utils/csv.ts","components/Calculator/ImportExport/ImportFertilizers.tsx","utils/downloads.ts","components/Calculator/ImportExport/ExportFertilizers.tsx","components/Calculator/ImportExport/ExportRecipes.tsx","components/Calculator/ImportExport/ImportRecipes.tsx","components/ui/styled.ts","components/Calculator/index.tsx","pages/Calculator/index.tsx"],"names":["DropdownContext","React","createContext","ItemContainer","children","padding","sx","position","zIndex","backgroundColor","content","left","top","opacity","width","height","DropdownItem","props","value","index","ctx","useContext","onClick","onItemClick","renderItem","item","DropdownList","items","itemRef","useRef","useState","setHeight","useEffect","current","offsetHeight","maxHeight","overflowY","flexDirection","Array","from","map","s","i","ref","key","length","style","margin","IconDown","styled","ChevronDownSquare","theme","colors","text","Dropdown","renderValue","opened","setOpened","setItem","setValue","editing","setEditing","containerRef","handleClickOutside","event","contains","target","document","addEventListener","removeEventListener","onClickItemHandler","onChange","context","Provider","val","onKeyDown","stopPropagation","onEdit","onBlur","right","IconButton","forwardRef","buttonRef","IconComponent","component","size","extraProps","containerSize","setSize","useTheme","offsetWidth","type","color","background","Element","name","delta","bg","flex","mx","px","minWidth","maxWidth","fontSize","alignItems","round","SelectedListItem","onRemove","needWeight","normalizedFertilizer","normalizeFertilizer","justifyContent","id","FERTILIZER_ELEMENT_NAMES","v","elements","textAlign","alignSelf","Cross","AddItemElementForm","disabled","maxLength","pattern","autoComplete","toString","parseInt","getElements","f","AddItemFertilizerEditForm","fertilizer","allowEdit","setElements","el","newElements","newFertilizer","buildNPKFertilizer","onChangeHandler","AddItem","onAdd","fertilizers","useSelector","state","calculator","selected","setSelected","creating","setCreating","dispatch","useDispatch","pr","fertilizerRemove","onRemoveItemHandler","fertilizerPush","Plus","useFormValues","form","ReduxFormContext","getFormValues","change","SelectedList","fields","error","meta","result","calculatedFertilizersWeights","Object","fromEntries","base_weight","push","marginTop","remove","Container","FieldArray","validate","message","WrappedCheckbox","input","label","checked","Checkbox","IgnoreElement","Radio","normalize","number","decimal","parseFloat","ACCURACY_VARIANTS","Accuracy","a","WrappedInput","placeholder","Input","Solution","htmlFor","step","min","paddingTop","max","Dilution","dilution_enabled","REDUX_FORM_NAME","display","Options","my","marginLeft","getRecipeFieldName","RecipeElementForm","StyledBalanceCell","m","Recipe","recipes","values","NPKBalance","calculateNPKBalance","recipe","getEmptyElements","setRecipe","entries","zeroValues","recipeRemove","marginRight","Save","recipePush","Broom","n","ion_balance","EC","ResultFertilizerList","accuracy","weight","countDecimals","usePPM","solution_volume","fertilizerWeights","calculatePPM","useFertilizerSolutionGroup","fertilizersWeights","fertilizerWeightsMap","toMap","groups","nf","NO3","A","S","P","B","C","groupFertilizerBySolution","sort","filter","ResultDilution","solution_concentration","dilution_volume","dilution_concentration","fertilizerWeightGroups","ppm","dilution","sources","volume","concentration","dilution_solution","d","ppmToEC","StyledList","ul","Result","score","deltaElements","k","score_display","getScoreDisplay","g","f_weights","title","stats","count","time","csvParse","parse","csvExport","stringify","COLUMNS","ImportFertilizers","createRef","newSize","handleOnChange","e","console","log","files","file","reader","FileReader","onload","csv","p","columns","isNaN","splice","npk","loadCSV","readAsText","Import","accept","saveData","createElement","body","appendChild","setAttribute","data","fileName","blob","Blob","url","window","URL","createObjectURL","href","download","click","revokeObjectURL","ExportFertilizers","rows","cols","csvData","header","Export","ExportRecipes","ImportRecipes","mobileStyles","styles","initialValues","DEFAULT_RECIPES","Calculator","reduxForm","handleSubmit","onSubmit","calculateStart","FertilizerSelect","marginBottom","paddingBottom","flexWrap","Restart","fertilizerReset","recipeReset","to","Help"],"mappings":"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","file":"static/js/5.48af3769.chunk.js","sourcesContent":["import React, {Context} from \"react\";\nimport {RenderItemCallback} from \"./types\";\n\n// TODO  сделать генерик\nexport interface DropdownContextInterface<T=any> {\n  onItemClick?: (item: T) => void,\n  renderItem?: RenderItemCallback<T>\n}\n\nexport type DropdownContext<T> = Context<DropdownContextInterface<T>>\nexport const DropdownContext: DropdownContext<any> = React.createContext({})\n\n\n","import React, {FunctionComponent, useContext} from \"react\";\nimport {Box, Flex} from \"rebass\";\nimport {DropdownContext} from \"./context\";\n\ninterface DropdownItemProps<T> {\n  value: T,\n  index: number,\n}\n\n\nconst ItemContainer: FunctionComponent = ({\n                                            children,\n                                          }) => {\n  return <Flex\n    padding={2}\n    sx={{\n      position: \"relative\",\n      zIndex: 1,\n      '&::before': {\n        backgroundColor: 'highlight',\n        content: '\"\"',\n        position: \"absolute\",\n        left: 0,\n        top: 0,\n        opacity: 0,\n        width: '100%',\n        height: '100%',\n        zIndex: -1,\n      },\n      '&:hover::before': {\n        opacity: 0.1,\n        // boxShadow: \"inset 0 0 0 99999px rgba(0,0,0,0.1)\"\n      }\n    }}\n  >\n    {children}\n  </Flex>\n\n}\n\nexport function DropdownItem<T>(props: DropdownItemProps<T>) {\n  const {value, index} = props;\n  const ctx = useContext(DropdownContext);\n\n  const renderItem = () => {\n    if (ctx.renderItem) {\n      return <ctx.renderItem item={value} index={index} />\n    }\n    return (value + '')\n  }\n\n  const onItemClickHandler = () => {\n    if (ctx.onItemClick) {\n      ctx.onItemClick(value)\n    }\n  }\n\n  return (\n    <Box onClick={onItemClickHandler}>\n      <ItemContainer>\n        {renderItem()}\n      </ItemContainer>\n    </Box>\n  )\n}\n","import React, {useEffect, useRef, useState} from \"react\";\nimport {Box, Card, Flex} from \"rebass\";\nimport {DropdownItem} from \"./DropdownItem\";\n\ninterface DropdownListProps<T> {\n  items: T[],\n}\n\nexport function DropdownList<T>(props: DropdownListProps<T>) {\n  const items = props.items\n\n  const itemRef = useRef<HTMLDivElement>()\n  const [height, setHeight] = useState(0)\n\n  useEffect(() => {\n    setHeight(itemRef?.current?.offsetHeight || 0)\n  }, [itemRef])\n\n  return (\n    <Card\n      backgroundColor={\"background\"}\n      padding={0}\n      maxHeight={height * 5}\n      overflowY={'auto'}\n      sx={{zIndex: 3}}\n    >\n      <Flex flexDirection=\"column\">\n        {Array.from(items).map((s, i) => {\n          return (\n            <Box ref={i === 0 ? itemRef: null}>\n              <DropdownItem<T>\n                value={s}\n                index={i}\n                key={i}\n              />\n              {i < items.length - 1 ? <hr style={{margin: 0}}/> : null}\n            </Box>\n          )\n        })}\n      </Flex>\n    </Card>\n  )\n}\n","import React, {ChangeEvent, KeyboardEvent, useEffect, useRef, useState} from \"react\";\nimport {Input} from \"@rebass/forms\";\nimport {Box, Flex} from \"rebass\";\nimport styled from '@emotion/styled'\nimport {ChevronDownSquare} from '@emotion-icons/boxicons-solid/ChevronDownSquare'\nimport {DropdownList} from \"./DropdownList\";\nimport {DropdownContext, DropdownContextInterface} from \"./context\";\nimport {ItemType, RenderItemCallback, RenderValueCallback} from \"./types\";\n\nconst IconDown = styled(ChevronDownSquare)`\n  color: ${(props: any) => props.theme.colors.text};\n  height: 3rem;\n  opacity: 0.5;\n  \n  &:hover {\n    opacity: 0.7;\n  }\n`\n\nexport interface DropdownProps<T> {\n  value?: ItemType<T>,\n  items: T[],\n  renderValue?: RenderValueCallback<T>\n  renderItem?: RenderItemCallback<T>\n\n  onEdit?: (value: string) => void,\n  onChange?: (item: ItemType<T>) => void,\n  width?: number\n}\n\nexport function Dropdown<T>(props: DropdownProps<T>) {\n  const {width} = props\n  const renderValue: RenderValueCallback<T> = item => {\n    if (props.renderValue) {\n      return props.renderValue(item)\n    }\n    return (item || '') + ''\n  }\n\n  const [opened, setOpened] = useState(false)\n  const [item, setItem] = useState(props.value || null)\n  const [value, setValue] = useState(renderValue(props.value || null))\n  const [editing, setEditing] = useState(false)\n  const containerRef = useRef<HTMLDivElement>()\n\n  useEffect(() => {\n    function handleClickOutside(event: MouseEvent) {\n      if (containerRef.current\n        && !containerRef.current.contains(event.target as any)) {\n        setOpened(false)\n      }\n    }\n\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, [containerRef])\n\n  const onClickItemHandler = (item: ItemType<T>) => {\n    setItem(item)\n    setValue(renderValue(item))\n\n    props.onChange && props.onChange(item)\n    setEditing(false)\n    setOpened(false)\n  }\n  const onChangeInputHandler = (event: ChangeEvent<HTMLInputElement>) => {\n    const val = event.target.value\n    setValue(val)\n    setEditing(true)\n    setOpened(false)\n  }\n\n  const onKeyDownInputHandler = (event: KeyboardEvent<HTMLInputElement>) => {\n    event.stopPropagation()\n    if (event.key === 'Enter') {\n      props.onEdit && props.onEdit(value)\n    }\n    if (event.key === 'Escape') {\n      onClickItemHandler(item)\n    }\n  }\n\n  const onBlurInputHandler = () => {\n    if (editing) {\n      value && props.onEdit && props.onEdit(value)\n    }\n  }\n\n  const context: DropdownContextInterface<T> = {\n    onItemClick: onClickItemHandler,\n    renderItem: props.renderItem,\n  }\n\n  return (\n    <DropdownContext.Provider value={context}>\n      <Flex flexDirection=\"column\" width={width} ref={containerRef}>\n        <Flex sx={{position: 'relative'}}>\n          <Input\n            value={value}\n            onChange={onChangeInputHandler}\n            onKeyDown={onKeyDownInputHandler}\n            onBlur={onBlurInputHandler}\n          />\n          <Box\n            sx={{\n              position: \"absolute\",\n              right: 0\n            }}\n          >\n            <IconDown\n              onClick={() => setOpened(!opened)}\n            />\n          </Box>\n        </Flex>\n        <Flex sx={{position: 'relative'}}>\n          <Flex sx={{position: \"absolute\"}}\n                flexDirection=\"column\"\n                width=\"100%\"\n          >\n            {opened && <DropdownList<T> items={props.items}/>}\n          </Flex>\n        </Flex>\n      </Flex>\n    </DropdownContext.Provider>\n  )\n}\n","import React, {forwardRef, MouseEventHandler, PropsWithChildren, useEffect, useState} from \"react\";\nimport {Button, ButtonProps} from \"rebass\";\nimport {EmotionIcon} from '@emotion-icons/emotion-icon'\n\nimport {useTheme} from \"emotion-theming\";\nimport {Theme} from \"@/themes/types\";\n\n\ninterface IconButtonProps extends\n  PropsWithChildren<Omit<ButtonProps, keyof React.HTMLProps<HTMLButtonElement>>> {\n  component: EmotionIcon,\n  disabled?: boolean,\n  onClick?: MouseEventHandler<HTMLButtonElement>,\n  size?: number | string\n}\n\nexport const IconButton = forwardRef<HTMLButtonElement, IconButtonProps>(\n  (props, buttonRef) => {\n    const {\n      component: IconComponent,\n      size = \"1.5em\",\n      children,\n      ...extraProps\n    } = props\n    const [containerSize, setSize] = useState<number | string>(size || 0)\n    const theme = useTheme<Theme>()\n\n    useEffect(() => {\n      if (!size && buttonRef && 'current' in buttonRef) {\n        setSize(buttonRef.current?.offsetWidth || 0)\n      }\n    }, [buttonRef, setSize, size])\n\n    return (\n      <Button type=\"button\" {...extraProps} ref={buttonRef}>\n        <IconComponent\n          color={theme.colors?.background}\n          size={containerSize}\n        />\n        {children}\n      </Button>\n    )\n  })\n","import React, {FunctionComponent} from \"react\";\nimport {Box, Card, Flex, Text} from \"rebass\";\nimport {Cross} from \"@styled-icons/entypo/Cross\"\nimport {FertilizerType} from \"./types\";\nimport {normalizeFertilizer} from \"@/calculator/fertilizer\";\nimport {FERTILIZER_ELEMENT_NAMES} from \"@/calculator/constants\";\nimport {IconButton} from \"../../ui/IconButton\";\nimport {round} from \"@/utils\";\n\ninterface ElementProps {\n  name: string,\n  value: number,\n  delta?: number,\n}\n\nexport const Element: FunctionComponent<ElementProps> = (props) => {\n  const {name, value, delta} = props\n  return (\n    <Box bg={name} flex={1} mx=\"2px\" px={1} color={'black'} minWidth=\"2.1em\" maxWidth=\"3em\" fontSize={1}>\n      <Flex flexDirection='column' alignItems={'center'}>\n        <Box>{name}</Box>\n        <Box>{round(value, 1)}</Box>\n        {typeof delta !== \"undefined\"? <Box>{delta}</Box>: null}\n      </Flex>\n    </Box>\n  )\n}\n\ninterface SelectedListItemProps {\n  item: FertilizerType,\n  onRemove: () => void,\n  needWeight?: number,\n}\n\n\nexport const SelectedListItem: FunctionComponent<SelectedListItemProps> = ({item, onRemove, needWeight}) => {\n  const normalizedFertilizer = normalizeFertilizer(item, false)\n  return (\n    <Card width={'auto'}>\n      <Flex justifyContent={'space-between'} alignItems=\"center\">\n        <Box flex={1}>\n          <Text flex={1}>\n            {item.id}\n          </Text>\n          <Flex>\n            {\n              FERTILIZER_ELEMENT_NAMES.map((name) => {\n                  let v = normalizedFertilizer.elements[name]\n                  if (!v) {\n                    return null\n                  }\n                  return <Element\n                    name={name}\n                    key={name}\n                    value={v}\n                  />\n                }\n              )\n            }\n          </Flex>\n        </Box>\n        <Flex>\n          <Flex alignItems=\"center\" justifyContent=\"center\" margin={1}>\n            <Text textAlign=\"center\" minWidth=\"3em\">\n              {needWeight || 0}\n            </Text>\n          </Flex>\n          <IconButton\n            padding={1}\n            alignSelf=\"center\"\n            component={Cross}\n            onClick={() => onRemove()}\n          />\n        </Flex>\n      </Flex>\n    </Card>\n  )\n}\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport {Flex} from \"rebass\";\nimport {Input} from \"@rebass/forms\";\n\ninterface RecipeElementFormProps {\n  name: string,\n  value: number,\n  disabled?: boolean,\n  onChange?: (value: number) => void\n}\n\n\n\n\nexport const AddItemElementForm: FunctionComponent<RecipeElementFormProps> = (props) => {\n  const {name, disabled} = props\n  const [value, setValue] = useState(props.value)\n\n  useEffect(() => {\n    setValue(props.value)\n  }, [props.value])\n\n  const onChange = (value: string) => {\n    const v = parseInt(value)\n    setValue(v)\n  }\n\n  const onBlur = () => {\n    props.onChange && props.onChange(value)\n  }\n\n  return (\n    <Flex flexDirection=\"column\" justifyContent=\"center\" alignItems=\"center\" width='4rem'>\n      <label style={{textAlign: 'center'}}>\n        {name}\n      </label>\n      <Input\n        maxLength={2}\n        pattern=\"^\\d+$\"\n        autoComplete=\"off\"\n        width=\"3rem\"\n        value={value.toString()}\n        disabled={disabled}\n        onChange={event => onChange(event.target.value)}\n        onBlur={onBlur}\n        style={{\n          textAlign: \"center\"\n        }}\n      />\n    </Flex>\n  )\n}\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport {Flex} from \"rebass\";\nimport {FERTILIZER_ELEMENT_NAMES} from \"../../../calculator/constants\";\nimport {AddItemElementForm} from \"./AddItemElementForm\";\nimport {buildNPKFertilizer, normalizeFertilizer} from \"../../../calculator/fertilizer\";\nimport {Elements, FertilizerInfo} from \"@/calculator/types\";\n\ninterface AddItemFertilizerEditFormProps {\n  fertilizer?: FertilizerInfo,\n  allowEdit?: boolean,\n  onChange: (item: FertilizerInfo) => void\n}\n\nexport const getElements = (f: FertilizerInfo) => {\n  return normalizeFertilizer(f, false).elements\n}\n\nexport const AddItemFertilizerEditForm: FunctionComponent<AddItemFertilizerEditFormProps> = (props) => {\n  const {\n    fertilizer,\n    allowEdit=true\n  } = props\n\n  const [elements, setElements] = useState<Elements|undefined>(fertilizer && getElements(fertilizer))\n\n  const onChangeHandler = (el: FERTILIZER_ELEMENT_NAMES, val: number) => {\n    if (!elements || !fertilizer){\n      return\n    }\n    const newElements: Elements = {...elements, [el]: val}\n    const newFertilizer = buildNPKFertilizer(fertilizer.id, newElements)\n    setElements(newElements)\n    props.onChange(newFertilizer)\n  }\n\n  useEffect(() => {\n    setElements(fertilizer && getElements(fertilizer))\n  }, [fertilizer])\n\n  return (\n    <Flex>\n      <Flex>\n        {FERTILIZER_ELEMENT_NAMES.map(el => (\n          <AddItemElementForm\n            disabled={!allowEdit}\n            name={el}\n            value={elements?.[el]||0}\n            onChange={v => onChangeHandler(el, v)}\n          />\n        ))}\n      </Flex>\n    </Flex>\n  )\n}\n","import React, {FunctionComponent, useState} from \"react\";\nimport {Box, Card, Flex} from \"rebass\";\nimport {FertilizerType} from \"./types\";\nimport {buildNPKFertilizer} from \"@/calculator/fertilizer\";\nimport {Dropdown} from \"@/components/ui/Dropdown/Dropdown\";\nimport {Plus} from \"@styled-icons/boxicons-regular/Plus\"\n\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {CalculatorState} from \"../types\";\nimport {fertilizerPush, fertilizerRemove} from \"../actions\";\nimport {AddItemFertilizerEditForm, getElements} from \"./AddItemFertilizerEditForm\";\nimport {IconButton} from \"@/components/ui/IconButton\";\nimport {FertilizerInfo} from \"@/calculator/types\";\n\ninterface AddItemProps {\n  onAdd: (item: FertilizerType) => void\n}\n\n\nexport const AddItem: FunctionComponent<AddItemProps> = ({onAdd}) => {\n  const {\n    fertilizers,\n  } = useSelector<any>(state => state.calculator) as CalculatorState\n  const [selected, setSelected] = useState<FertilizerInfo | undefined>(fertilizers[0])\n  const [creating, setCreating] = useState(false)\n\n  const dispatch = useDispatch()\n\n\n  const onChangeHandler = (item: FertilizerInfo | null) => {\n    item && setSelected(item)\n    setCreating(false)\n  }\n\n  const onChangeFertilizerElements = (item: FertilizerInfo) =>{\n    setSelected(item)\n    setCreating(true)\n  }\n\n  const onEditHandler = (value: string) => {\n    const newFertilizer = buildNPKFertilizer(value, selected ? getElements(selected) : {})\n    setSelected(newFertilizer)\n  }\n  const onAddHandler = () => {\n    if (!selected) {\n      return\n    }\n    let fertilizer = buildNPKFertilizer(selected.id, getElements(selected))\n    onAdd(fertilizer)\n    if (creating) {\n      dispatch(fertilizerPush(selected))\n    }\n    setCreating(false)\n  }\n  const onRemoveItemHandler = (item: FertilizerInfo) => {\n    dispatch(fertilizerRemove(item))\n  }\n  return (\n    <Card>\n      <Flex flexDirection=\"column\">\n        <Flex justifyContent=\"space-between\">\n          <Box flex={1} pr={2}>\n            <Dropdown<FertilizerInfo>\n              value={selected}\n              items={fertilizers}\n              onChange={onChangeHandler}\n              onEdit={onEditHandler}\n              renderItem={({item}) => (\n                <Flex flex={1} justifyContent=\"space-between\">\n                  <Box>\n                    {item.id}\n                  </Box>\n                  <button onClick={event => {\n                    event.stopPropagation()\n                    onRemoveItemHandler(item)\n                  }}>-\n                  </button>\n                </Flex>\n              )}\n              renderValue={item => item?.id || \"\"}\n            />\n          </Box>\n          <IconButton\n            onClick={onAddHandler}\n            component={Plus}/>\n\n        </Flex>\n        <AddItemFertilizerEditForm\n          fertilizer={selected}\n          onChange={onChangeFertilizerElements}\n        />\n      </Flex>\n\n    </Card>\n  )\n}\n\n","import {useContext} from 'react'\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {change, getFormValues, ReduxFormContext} from \"redux-form\";\n\nexport function useReduxForm(): {form: string} {\n  return useContext(ReduxFormContext)\n}\n\n\nexport function useFormValues<FormValues=object>(): [FormValues, (name: string, value: any) => void] {\n  const { form } = useReduxForm()\n  const dispatch = useDispatch()\n  const values = useSelector(state => getFormValues(form)(state)) as FormValues\n\n  const setValue = (name: string, value: any) => {\n    dispatch(change(form, name, value))\n  }\n  return [\n    values,\n    setValue\n    ]\n}\n","import React from \"react\";\nimport {Flex} from \"rebass\";\nimport {SelectedListItem} from \"./SelectedListItem\";\nimport {AddItem} from \"./AddItem\";\nimport {ReduxFieldArrayType} from \"../../ui/ReduxForm/types\";\nimport {FertilizerType} from \"./types\";\nimport {CalculatorFormValues, CalculatorState} from \"../types\";\nimport {useFormValues} from \"../../../hooks/ReduxForm\";\nimport {useSelector} from \"react-redux\";\n\ninterface SelectedListProps {\n}\n\nexport const SelectedList: ReduxFieldArrayType<SelectedListProps, FertilizerType> = (\n  {fields, meta: {error}}) => {\n  const values = useFormValues<CalculatorFormValues>()[0]\n  const fertilizers = values.fertilizers;\n  const {\n    result,\n  } = useSelector<any>(state => state.calculator) as CalculatorState\n\n  const calculatedFertilizersWeights = Object.fromEntries((result?.fertilizers || []).map(f => [f.id, f.base_weight]))\n\n  const onAddHandler = (item: FertilizerType) => {\n    for (let f of fertilizers) {\n      if (f.id === item.id) {\n        return\n      }\n    }\n    fields.push(item)\n  }\n  return (\n    <Flex sx={{flexDirection: 'column'}} width='auto'>\n      <AddItem onAdd={onAddHandler}/>\n      <Flex sx={{\n        flexDirection: 'column',\n        '& > *': {\n          marginTop: '8px !important',\n        }\n      }}>\n        {error ? <span>{error}</span> : null}\n        {fertilizers.map((item, index) =>\n          <SelectedListItem\n            item={item}\n            key={item.id}\n            needWeight={calculatedFertilizersWeights[item.id]}\n            onRemove={() => fields.remove(index)}\n          />\n        )}\n      </Flex>\n    </Flex>\n  )\n}\n","import React from \"react\";\nimport {SelectedList} from \"./SelectedList\";\nimport {FieldArray} from \"redux-form\";\nimport {required} from \"../../ui/ReduxForm/validators\";\n\n\nexport const Container = () => {\n  return (\n    <FieldArray<{}>\n      name={\"fertilizers\"}\n      component={SelectedList}\n      validate={required(\"Выберите удобрения\")}\n    />\n  )\n}\n\n","import {Container} from \"./Container\";\n\nexport default Container\n","\ntype ValidatorCallback = {\n  (value: any): void|string\n}\n\nexport function pattern(pattern: RegExp|string, message?: string): ValidatorCallback {\n  message = message || 'Значение должно соответствовать регулярному выражению'\n  return (value) => {\n    pattern = new RegExp(pattern) as RegExp\n    if (pattern.test(value)) {\n      return message\n    }\n  }\n}\n\nexport function minLength(length: number, message?: string): ValidatorCallback {\n  message = message || `Количество элементов должно быть не менее ${length}`\n\n  return value => {\n    if (value.length < length) {\n      return message\n    }\n  }\n}\n\n\nexport function required(message?: string): ValidatorCallback {\n  message = message || `Должно быть заполнено`\n\n  return value => {\n    if (!value || !value?.length) {\n      return message\n    }\n  }\n}\n\n","import React from \"react\";\n\nimport {Checkbox as RebassCheckbox, CheckboxProps as RebassCheckboxProps, Label} from \"@rebass/forms\";\nimport {Field as ReduxField} from \"redux-form\";\nimport {ReduxFormComponentType, WrapperInputType} from \"./types\";\n\ninterface CheckboxProps extends RebassCheckboxProps {\n  label: string\n}\n\nconst WrappedCheckbox: WrapperInputType<CheckboxProps> = ({input, label, ...props}: any) =>\n  <Label>\n    <RebassCheckbox\n      {...props} {...input}\n      checked={input.value}\n    />\n    {label}\n  </Label>\n\n// TODO вывести тип\nexport const Checkbox: ReduxFormComponentType<CheckboxProps> = ({name, ...props}) => {\n  return (\n    <ReduxField\n      component={WrappedCheckbox}\n      name={name}\n      {...props as any}\n    />\n  )\n}\n\n","import React, {FunctionComponent} from \"react\";\nimport {Card, Flex, Heading} from \"rebass\";\nimport {Checkbox} from \"../../ui/ReduxForm/Checkbox\";\n\ninterface IgnoreElementProps {\n}\n\n\nexport const IgnoreElement: FunctionComponent<IgnoreElementProps> = () => {\n  return (\n    <Card>\n      <Flex flexDirection=\"column\">\n        <Heading fontSize={2}>Игнорировать</Heading>\n        <Checkbox name=\"ignore_Ca\" label=\"Кальций\" />\n        <Checkbox name=\"ignore_Mg\" label=\"Магний\" />\n        <Checkbox name=\"ignore_S\" label=\"Сера\" />\n      </Flex>\n    </Card>\n  )\n}\n","import React from \"react\";\n\nimport {Label, Radio as RebassRadio, RadioProps as RebassRadioProps} from \"@rebass/forms\";\nimport {Field as ReduxField} from \"redux-form\";\nimport {ReduxFormComponentType, WrapperInputType} from \"./types\";\n\ninterface RadioProps extends RebassRadioProps {\n  label: string,\n  value: string | number,\n}\n\nconst WrappedCheckbox: WrapperInputType<RadioProps> = ({input, label, value, ...props}: any) =>\n  <Label>\n    <RebassRadio\n      {...props}\n      {...input}\n    />\n    {label}\n  </Label>\n\n// TODO вывести тип\nexport const Radio: ReduxFormComponentType<RadioProps> = ({\n                                                            name,\n                                                            value,\n                                                            normalize= (v) => v.toString(),\n                                                            ...props\n                                                          }) => {\n  return (\n    <ReduxField\n      component={WrappedCheckbox}\n      name={name}\n      normalize={normalize}\n      // onClick={() => setChecked(!checked)}\n      // checked={checked}\n      type='radio'\n      value={normalize(value)}\n      {...props as any}\n    />\n  )\n}\n","\n\nexport function number(value: any) {\n  return value && parseInt(value)\n}\n\nexport function decimal(value: any) {\n  return value && parseFloat(value)\n}\n","import React, {FunctionComponent} from \"react\";\nimport {Card, Flex, Heading} from \"rebass\";\nimport {Radio} from \"../../ui/ReduxForm/Radio\";\nimport {decimal} from \"../../ui/ReduxForm/normalizers\";\n\nconst ACCURACY_VARIANTS = [\n  0.2,\n  0.1,\n  0.05,\n  0.01,\n]\ninterface AccuracyProps {\n}\n\nexport const Accuracy: FunctionComponent<AccuracyProps> = () => {\n    return (\n      <Card>\n          <Flex flexDirection=\"column\">\n            <Heading fontSize={2}>Точность</Heading>\n            {ACCURACY_VARIANTS.map(a =>\n                <Radio\n                  name=\"accuracy\"\n                  value={a}\n                  label={`${a} г.`}\n                  normalize={decimal}\n                />\n            )}\n          </Flex>\n      </Card>\n    )\n}\n","import React from \"react\";\nimport {Field as ReduxField} from \"redux-form\";\n\nimport {Input as RebassInput, InputProps as RebassInputProps} from \"@rebass/forms\";\nimport {ReduxFormComponentType, WrapperInputType} from \"./types\";\n\ninterface InputProps extends RebassInputProps {\n}\n\nconst WrappedInput: WrapperInputType<InputProps> = ({input, label, type = \"text\", ...props}: any) =>\n  <RebassInput  {...props}\n                {...input}\n                sx={{\n                  ...input.sx,\n                  '::-webkit-inner-spin-button': {\n                    '-webkit-appearance': 'none',\n                    margin: 0,\n                  },\n                  '::-webkit-outer-spin-button': {\n                    '-webkit-appearance': 'none',\n                    margin: 0,\n                  }\n                }}\n                type={type}\n                placeholder={label}\n  />\n\n\n// TODO вывести тип\nexport const Input: ReduxFormComponentType<InputProps> = ({name, ...props}) => {\n\n  return (\n    <ReduxField\n      component={WrappedInput}\n      name={name}\n      {...props as any}\n    />\n  )\n}\n","import React, {FunctionComponent} from \"react\";\nimport {Card, Flex, Heading} from \"rebass\";\nimport {Label} from \"@rebass/forms\";\nimport {Input} from \"../../ui/ReduxForm/Input\";\nimport {decimal, number} from \"../../ui/ReduxForm/normalizers\";\n\n\ninterface SolutionVolumeProps {\n}\n\nexport const Solution: FunctionComponent<SolutionVolumeProps> = () => {\n  return (\n    <Card>\n        <Heading fontSize={2}>Раствор</Heading>\n      <Flex flexDirection=\"column\">\n        <Flex alignItems=\"center\" justifyContent=\"space-between\">\n          <Label htmlFor=\"solution_volume\">Объем, л</Label>\n          <Input\n            name=\"solution_volume\"\n            width=\"3rem\"\n            type=\"number\"\n            step=\"1\"\n            min=\"1\"\n            pattern=\"^\\d+$\"\n            normalize={number}\n            style={{\n              textAlign: \"center\"\n            }}\n            autoComplete=\"off\"\n          />\n        </Flex>\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" paddingTop={2}>\n          <Label htmlFor=\"solution_concentration\">Концентрация, 1/100%</Label>\n          <Input\n            name=\"solution_concentration\"\n            width=\"3rem\"\n            type=\"number\"\n            step=\"0.1\"\n            min=\"0\"\n            max=\"999\"\n            normalize={decimal}\n            style={{\n              textAlign: \"center\"\n            }}\n            autoComplete=\"off\"\n          />\n        </Flex>\n      </Flex>\n    </Card>\n  )\n}\n","import React, {FunctionComponent} from \"react\";\nimport {useSelector} from \"react-redux\";\nimport {getFormValues} from \"redux-form\";\nimport {Card, Flex} from \"rebass\";\nimport {Label} from \"@rebass/forms\";\nimport {Input} from \"@/components/ui/ReduxForm/Input\";\nimport {decimal, number} from \"@/components/ui/ReduxForm/normalizers\";\nimport {Checkbox} from \"@/components/ui/ReduxForm/Checkbox\";\nimport {REDUX_FORM_NAME} from \"@/components/Calculator/constants\";\nimport {CalculatorFormValues} from \"@/components/Calculator/types\";\n\n\ninterface DilutionProps {\n}\n\nexport const Dilution: FunctionComponent<DilutionProps> = () => {\n  const {\n    dilution_enabled,\n  } = useSelector(getFormValues(REDUX_FORM_NAME)) as CalculatorFormValues\n  return (\n    <Card>\n      <Checkbox name=\"dilution_enabled\" label=\"Разбавление концетрата\"/>\n      <Flex flexDirection=\"column\" style={{display: dilution_enabled? \"flex\" : \"none\"}}>\n        <Flex alignItems=\"center\" justifyContent=\"space-between\">\n          <Label htmlFor=\"dilution_volume\">Объем, л</Label>\n          <Input\n            name=\"dilution_volume\"\n            width=\"3rem\"\n            type=\"number\"\n            step=\"1\"\n            min=\"1\"\n            pattern=\"^\\d+$\"\n            normalize={number}\n            style={{\n              textAlign: \"center\"\n            }}\n            autoComplete=\"off\"\n          />\n        </Flex>\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" paddingTop={2}>\n          <Label htmlFor=\"dilution_concentration\">Концентрация, 1/100%</Label>\n          <Input\n            name=\"dilution_concentration\"\n            width=\"3rem\"\n            type=\"number\"\n            step=\"0.1\"\n            min=\"0\"\n            max=\"999\"\n            normalize={decimal}\n            style={{\n              textAlign: \"center\"\n            }}\n            autoComplete=\"off\"\n          />\n        </Flex>\n      </Flex>\n    </Card>\n  )\n}\n","import React, {ComponentType} from \"react\";\nimport {Box, Button, Flex} from \"rebass\";\nimport {IgnoreElement} from \"./IgnoreElement\";\nimport {Accuracy} from \"./Accuracy\";\nimport {Solution} from \"./Solution\";\nimport {Dilution} from \"./Dilution\";\n\ninterface OptionsProps {\n}\n\n\nexport const Options: ComponentType<OptionsProps> = () => {\n  return (\n    <Flex flexDirection=\"column\">\n      <Box flex={1}>\n        <Button width=\"100%\" my={2} type=\"submit\">Calculate</Button>\n      </Box>\n      <Box my={2}>\n        <Solution/>\n      </Box>\n      <Box my={2}>\n        <Dilution/>\n      </Box>\n      <Flex sx={{\n        '& > *': {flex: 1}\n      }}>\n        <IgnoreElement/>\n        <Box marginLeft={2}>\n          <Accuracy/>\n        </Box>\n      </Flex>\n\n    </Flex>\n  )\n}\n\n","import React, {FunctionComponent} from \"react\";\nimport {Box, Flex} from \"rebass\";\nimport {Input} from \"@/components/ui/ReduxForm/Input\";\nimport {number} from \"@/components/ui/ReduxForm/normalizers\";\n\ninterface RecipeElementFormProps {\n  name: string,\n}\n\nexport const getRecipeFieldName = (name: string) => `recipe.${name}`\n\n\n\nexport const RecipeElementForm: FunctionComponent<RecipeElementFormProps> = (props) => {\n  const {name} = props\n  return (\n    <Flex flexDirection=\"column\"\n          justifyContent=\"center\"\n          alignItems=\"center\"\n          maxWidth='3rem'\n    >\n      <Box style={{textAlign: 'center'}}\n      >\n        {name}\n      </Box>\n      <Input\n        name={getRecipeFieldName(name)}\n        type=\"number\"\n        step=\"1\"\n        min=\"0\"\n        max=\"999\"\n        autoComplete=\"off\"\n        normalize={number}\n        maxWidth=\"3rem\"\n        style={{\n          textAlign: \"center\"\n        }}\n      />\n    </Flex>\n  )\n}\n","import React, {FunctionComponent, useState} from \"react\";\nimport {Box, Card, Flex, Heading, Text} from \"rebass\";\nimport {Broom} from '@styled-icons/fa-solid/Broom'\nimport {Save} from '@styled-icons/boxicons-regular/Save'\nimport {getRecipeFieldName, RecipeElementForm} from \"./RecipeElementForm\";\nimport {useFormValues} from \"@/hooks/ReduxForm\";\nimport {FERTILIZER_ELEMENT_NAMES} from \"@/calculator/constants\";\n\nimport {IconButton} from \"@/components/ui/IconButton\";\nimport {Dropdown} from \"@/components/ui/Dropdown/Dropdown\";\nimport {CalculatorState, Recipe as RecipeType} from \"@/components/Calculator/types\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {recipePush, recipeRemove} from \"@/components/Calculator/actions\";\nimport {Elements} from \"@/calculator/types\";\nimport {calculateNPKBalance, getEmptyElements} from \"@/calculator/helpers\";\n\n\nexport const StyledBalanceCell: FunctionComponent<{name:string, value: number}> = (props) => {\n  return (\n    <Flex flexDirection=\"column\" m={1} alignItems=\"center\">\n      <Heading fontSize={1}>{props.name}</Heading>\n      <Text>{props.value}</Text>\n    </Flex>\n  )\n}\n\ninterface RecipeProps {\n}\n\nexport const Recipe: FunctionComponent<RecipeProps> = () => {\n  const {\n    recipes = [],\n  } = useSelector<any>(state => state.calculator) as CalculatorState\n\n  const [values, setValue] = useFormValues()\n  const [selected, setSelected] = useState<RecipeType | undefined>(recipes?.[0])\n\n  const dispatch = useDispatch()\n\n  const NPKBalance = calculateNPKBalance(values.recipe || getEmptyElements())\n\n  const onChangeHandler = (item: RecipeType | null) => {\n    item && setSelected(item)\n    item && setRecipe(item.elements)\n  }\n\n  const setRecipe = (elements: Elements) => {\n    for (let [name, value] of Object.entries(elements)) {\n      setValue(getRecipeFieldName(name), value)\n    }\n  }\n  const resetRecipe = () => {\n    let zeroValues = Object.fromEntries(FERTILIZER_ELEMENT_NAMES.map(el => [el, 0])) as unknown as Elements\n\n    setRecipe(zeroValues)\n  }\n  const onEditHandler = (value: string) => {\n    let zeroValues = Object.fromEntries(FERTILIZER_ELEMENT_NAMES\n      .map(el => [el, selected?.elements[el] || 0])) as unknown as Elements\n    setSelected({name: value, elements: zeroValues})\n  }\n  const onAddHandler = () => {\n    if (!selected) {\n      return\n    }\n    const recipe = {...selected, elements: values.recipe}\n    dispatch(recipePush(recipe))\n  }\n  const onRemoveItemHandler = (item: RecipeType) => {\n    dispatch(recipeRemove(item))\n  }\n  return (\n    <Card>\n      <Flex flexDirection=\"column\">\n        <Flex\n        >\n          <Box flex={1} mx={2}>\n            <Dropdown<RecipeType>\n              value={selected}\n              items={recipes}\n              onChange={onChangeHandler}\n              onEdit={onEditHandler}\n              renderItem={({item}) => (\n                <Flex flex={1} justifyContent=\"space-between\">\n                  <Box width={3} backgroundColor={item.color || 'gray'}>\n                  </Box>\n                  <Box flex={1} mx={2}>\n                    {item.name}\n                  </Box>\n                  <button onClick={event => {\n                    event.stopPropagation()\n                    onRemoveItemHandler(item)\n                  }}>-\n                  </button>\n                </Flex>\n              )}\n              renderValue={item => item?.name || \"\"}\n            />\n          </Box>\n          <Box>\n            <IconButton\n              marginRight={1}\n              component={Save}\n              onClick={onAddHandler}\n            />\n            <IconButton\n              component={Broom}\n              onClick={resetRecipe}\n            />\n          </Box>\n        </Flex>\n        <Flex justifyContent=\"space-between\">\n          {\n            FERTILIZER_ELEMENT_NAMES.map(n => <RecipeElementForm name={n}/>)\n          }\n        </Flex>\n        <Flex justifyContent=\"space-around\">\n          <StyledBalanceCell name=\"ΔΣ I\" value={NPKBalance.ion_balance}/>\n          <StyledBalanceCell name=\"EC\" value={NPKBalance.EC}/>\n          <StyledBalanceCell name=\"%NH4\" value={NPKBalance[\"%NH4\"]}/>\n          <StyledBalanceCell name=\"N:K\" value={NPKBalance[\"N:K\"]}/>\n          <StyledBalanceCell name=\"K:Ca\" value={NPKBalance[\"K:Ca\"]}/>\n          <StyledBalanceCell name=\"Ca:Mg\" value={NPKBalance[\"Ca:Mg\"]}/>\n        </Flex>\n      </Flex>\n    </Card>\n  )\n}\n","import React from \"react\";\nimport {countDecimals, round} from \"@/utils\";\nimport {useSelector} from \"react-redux\";\nimport {getFormValues} from \"redux-form\";\nimport {REDUX_FORM_NAME} from \"@/components/Calculator/constants\";\nimport {CalculatorFormValues} from \"@/components/Calculator/types\";\nimport {FertilizerWeights} from \"@/calculator\";\n\ninterface ResultFertilizerListProps {\n    fertilizers: FertilizerWeights[],\n}\n\nexport function ResultFertilizerList(props: ResultFertilizerListProps) {\n    const {fertilizers} = props\n    const {\n      accuracy\n    } = useSelector(getFormValues(REDUX_FORM_NAME)) as CalculatorFormValues\n    return (\n        <>\n            {fertilizers.map(f => {\n                return (\n                  <li key={f.id}>\n                      {round(f.weight, countDecimals(accuracy))}г {f.id}\n                  </li>\n                )\n            })}\n        </>\n    )\n}\n","import {useSelector} from \"react-redux\";\nimport {CalculatorFormValues, CalculatorState} from \"@/components/Calculator/types\";\nimport {entries, toMap} from \"@/utils\";\nimport {groupFertilizerBySolution} from \"@/calculator/dilution\";\nimport {FertilizerWeights} from \"@/calculator\";\nimport {calculatePPM} from \"@/calculator/helpers\";\nimport {getFormValues} from \"redux-form\";\nimport {REDUX_FORM_NAME} from \"@/components/Calculator/constants\";\n\nexport function usePPM() {\n  const {\n    result,\n  } = useSelector<any>(state => state.calculator) as CalculatorState\n  const {\n    solution_volume,\n  } = useSelector(getFormValues(REDUX_FORM_NAME)) as CalculatorFormValues\n\n  const fertilizerWeights = (result?.fertilizers || []).map(f => ({...f}))\n\n  const ppm = calculatePPM(\n    fertilizerWeights,\n    solution_volume,\n  );\n\n  return ppm\n}\n\nexport function useFertilizerSolutionGroup() {\n  const {\n    fertilizers,\n    result,\n  } = useSelector<any>(state => state.calculator) as CalculatorState\n\n  const fertilizersWeights = (result?.fertilizers || []).map(f => ({...f}))\n\n  const fertilizerWeightsMap = toMap(fertilizersWeights, 'id')\n\n  const pairs = entries(groupFertilizerBySolution(fertilizers))\n    .sort(([a], [b]) => a > b ? 1 : -1)\n  const fertilizerWeightGroups: [typeof pairs[0][0], FertilizerWeights[]][] = pairs\n    .map(([g, fList]) => {\n        let ws = fList\n          .map((f) => fertilizerWeightsMap[f.id])\n          .filter(f => f)\n        return [g, ws]\n      }\n    )\n\n  return fertilizerWeightGroups\n\n}\n","import {FertilizerInfo} from \"./types\";\nimport {normalizeFertilizer} from \"./fertilizer\";\nimport {round} from \"../utils\";\n\nexport interface Solution {\n  id: string,\n  volume: number,\n  concentration: number,\n  // TODO плотность\n}\n\nexport type DilutionResult = Omit<Solution, \"concentration\">\n\nexport function dilution_solution(target: Solution, sources: Omit<Solution, \"volume\">[]): DilutionResult[] {\n  const result: DilutionResult[] = []\n  for (let s of sources) {\n    result.push({\n      id: s.id,\n      volume: round((target.volume / s.concentration) * target.concentration, 2)\n    })\n  }\n  return result\n}\n\n\ntype FertilizerGroupBySolution = { [K in \"A\" | \"B\" | \"C\"]?: FertilizerInfo[] }\n\n// Делим удобрения на несколько растворов\n// Бутылка-1 Макра-азотная\n// Селитра амиачная\n// Селитра калиевая\n// Селитра кальциевая\n//\n// Бутылка 2 Макра-серно-фосфорная\n// Сульфат аммония\n// Сульфат магния семиводный\n// Монофосфат калия\nexport function groupFertilizerBySolution(fertilizers: FertilizerInfo[]): FertilizerGroupBySolution {\n  const groups: FertilizerGroupBySolution = {}\n  for (let f of fertilizers) {\n    let nf = normalizeFertilizer(f)\n    if (nf.elements.NO3) {\n      groups.A = [...groups.A || [], f]\n      continue\n    }\n    if (nf.elements.S || nf.elements.P) {\n      groups.B = [...groups.B || [], f]\n      continue\n    }\n    groups.C = [...groups.C || [], f]\n\n  }\n  return groups\n}\n","import React from \"react\";\nimport {dilution_solution, DilutionResult} from \"@/calculator/dilution\";\nimport {useSelector} from \"react-redux\";\nimport {getFormValues} from \"redux-form\";\nimport {REDUX_FORM_NAME} from \"@/components/Calculator/constants\";\nimport {CalculatorFormValues} from \"@/components/Calculator/types\";\nimport {useFertilizerSolutionGroup, usePPM} from \"@/components/Calculator/Result/hooks\";\nimport {Flex, Heading} from \"rebass\";\nimport {ppmToEC} from \"@/calculator/helpers\";\nimport {round} from \"@/utils\";\n\ninterface DilutionResultProps {\n}\n\nexport function ResultDilution(props: DilutionResultProps) {\n  const {\n    solution_concentration,\n    dilution_enabled,\n    dilution_volume,\n    dilution_concentration,\n  } = useSelector(getFormValues(REDUX_FORM_NAME)) as CalculatorFormValues\n\n  const fertilizerWeightGroups = useFertilizerSolutionGroup()\n  let ppm = usePPM()\n\n  if (!dilution_enabled) {\n    return null\n  }\n\n  ppm = round((dilution_concentration * ppm) / solution_concentration)\n\n  let dilution: DilutionResult[] | null = null\n\n  dilution = dilution_solution({\n    id: \"Total\",\n    volume: dilution_volume,\n    concentration: dilution_concentration,\n  }, fertilizerWeightGroups.map(([g]) => (\n    {\n      id: g, concentration: solution_concentration\n    })))\n\n  return (\n    <>\n      <Flex flexDirection=\"column\" width=\"75%\">\n        <Heading fontSize={2}>Разбавление</Heading>\n          <ul>\n            {dilution.map(d => (\n              <li>Раствор {d.id} - {d.volume}л</li>\n            ))}\n            <li>\n              Долить до {dilution_volume}л\n            </li>\n            <li>\n              <b>TDS:</b> {ppm} ppm; <b>EC:</b> {ppmToEC(ppm, 1)} мСм/см\n            </li>\n          </ul>\n      </Flex>\n\n    </>\n  )\n}\n","import React, {FunctionComponent} from \"react\";\nimport {Card, Flex, Heading, Text} from \"rebass\";\nimport {useSelector} from \"react-redux\";\nimport {CalculatorFormValues, CalculatorState} from \"../types\";\nimport {getFormValues} from \"redux-form\";\nimport {REDUX_FORM_NAME} from \"../constants\";\nimport {FERTILIZER_ELEMENT_NAMES} from \"@/calculator/constants\";\nimport {Element} from \"../FertilizerSelect/SelectedListItem\";\nimport styled from \"styled-components\";\nimport {calculateNPKBalance, getEmptyElements, ppmToEC} from \"@/calculator/helpers\";\nimport {StyledBalanceCell} from \"../Options/Recipe\";\nimport {ResultFertilizerList} from \"./ResultFertilizerList\";\nimport {useFertilizerSolutionGroup, usePPM} from \"./hooks\";\nimport {ResultDilution} from \"@/components/Calculator/Result/ResultDilution\";\n\ninterface ResultProps {\n}\n\nconst StyledList = styled.ul`\n  @media screen and (min-width: 800px) {\n    width: 75%;\n  }\n`\n\nfunction getScoreDisplay(score: number): string {\n  let score_display = \"Не соответствует\";\n  if (score >= 95) score_display = \"Идеально\";\n  if (score >= 90 && score < 95) score_display = \"Отлично\";\n  if (score >= 85 && score < 90) score_display = \"Очень хорошо\";\n  if (score >= 80 && score < 85) score_display = \"Хорошо\";\n  if (score >= 70 && score < 80) score_display = \"Средне\";\n  if (score >= 60 && score < 70) score_display = \"Плохо\";\n  if (score >= 40 && score < 60) score_display = \"Ужасно\";\n  return score_display\n}\n\n\nexport const Result: FunctionComponent<ResultProps> = () => {\n  const {\n    result,\n  } = useSelector<any>(state => state.calculator) as CalculatorState\n\n  const {\n    solution_volume,\n  } = useSelector(getFormValues(REDUX_FORM_NAME)) as CalculatorFormValues\n\n  const ppm = usePPM()\n  const fertilizerWeightGroups = useFertilizerSolutionGroup()\n\n  const score = result?.score || 0\n  const elements = result?.elements || getEmptyElements()\n  const deltaElements = result?.deltaElements || getEmptyElements()\n  const NPKBalance = calculateNPKBalance(elements)\n\n  return (\n    <Card>\n      <Flex alignItems=\"center\" flexDirection=\"column\">\n        <Flex>\n          {elements && FERTILIZER_ELEMENT_NAMES.map(\n            k => <Element\n              key={k}\n              name={k}\n              value={elements[k]}\n              delta={deltaElements[k]}\n            />\n          )}\n        </Flex>\n\n        <Flex justifyContent=\"space-around\">\n          <StyledBalanceCell name=\"ΔΣ I\" value={NPKBalance.ion_balance}/>\n          <StyledBalanceCell name=\"EC\" value={NPKBalance.EC}/>\n          <StyledBalanceCell name=\"%NH4\" value={NPKBalance[\"%NH4\"]}/>\n          <StyledBalanceCell name=\"N:K\" value={NPKBalance[\"N:K\"]}/>\n          <StyledBalanceCell name=\"K:Ca\" value={NPKBalance[\"K:Ca\"]}/>\n          <StyledBalanceCell name=\"Ca:Mg\" value={NPKBalance[\"Ca:Mg\"]}/>\n        </Flex>\n        <Heading fontSize={2}>\n          Оценка: {getScoreDisplay(score)}\n        </Heading>\n\n        <Text fontSize={6}>{`${score || 0}%`}</Text>\n        <StyledList>\n          <li>{solution_volume}л воды</li>\n          {fertilizerWeightGroups.map(([g, f_weights]) =>\n            (<li>\n                <b> Раствор {g} </b>\n                <ul>\n                  <ResultFertilizerList fertilizers={f_weights}/>\n                </ul>\n              </li>\n            )\n          )}\n          <li title=\"Или минерализация, в мг/л\">\n            <b>TDS:</b> {ppm} ppm; <b>EC:</b> {ppmToEC(ppm, 1)} мСм/см\n          </li>\n        </StyledList>\n        <ResultDilution/>\n        {result?.stats &&\n        <Text>\n          Обработано вариантов: {result?.stats.count} Время: {result?.stats.time} сек\n        </Text>\n        }\n      </Flex>\n    </Card>\n  )\n}\n\n","import parse from \"csv-parse/lib/sync\"\nimport stringify from \"csv-stringify/lib/sync\"\n\nexport const csvParse = parse\nexport const csvExport = stringify\n\n\n","import React, {ChangeEvent, createRef, useEffect, useState} from \"react\";\nimport {Import} from \"@styled-icons/boxicons-regular/Import\"\nimport {IconButton} from \"@/components/ui/IconButton\";\nimport {csvParse} from \"@/utils/csv\";\nimport {FERTILIZER_ELEMENT_NAMES} from \"@/calculator/constants\";\nimport {buildNPKFertilizer} from \"@/calculator/fertilizer\";\nimport {useDispatch} from \"react-redux\";\nimport {fertilizerPush} from \"@/components/Calculator/actions\";\n\ninterface ImportFertilizersProps {\n}\n\nconst COLUMNS = ['id', ...FERTILIZER_ELEMENT_NAMES]\n\nexport function ImportFertilizers(props: ImportFertilizersProps) {\n  const buttonRef = createRef<HTMLButtonElement>()\n  const dispatch = useDispatch()\n  const [size, setSize] = useState({width: 0, height: 0})\n  useEffect(() => {\n    const newSize = {\n      width: buttonRef.current?.offsetWidth || 0,\n      height: buttonRef.current?.offsetHeight || 0,\n    }\n    if (size.width !== newSize.width) {\n      setSize(newSize)\n    }\n  }, [buttonRef, size.width])\n\n  const loadCSV = (csv: string) => {\n    const p = csvParse(csv, {columns: COLUMNS})\n    if (isNaN(parseInt(p[0].P))) {\n      p.splice(0, 1)\n    }\n    for (let {id, ...npk} of p) {\n      const f = buildNPKFertilizer(id, npk)\n      dispatch(fertilizerPush(f))\n    }\n  }\n\n  const handleOnChange = (e: ChangeEvent<HTMLInputElement>) => {\n    console.log(e.target.value, e.target.files?.[0])\n    const file = e.target.files?.[0]\n    if (!file) {\n      return file\n    }\n    let reader = new FileReader();\n    reader.onload = () => {\n      console.log(reader.result)\n      loadCSV(reader.result as string)\n\n    }\n    reader.readAsText(file)\n\n  }\n  return (\n    <>\n      <IconButton\n        sx={{\n          position: \"relative\"\n        }}\n        ref={buttonRef}\n        component={Import}\n      >\n        <input type=\"file\"\n               accept=\"text/csv, .csv\"\n               onChange={event => handleOnChange(event)}\n               style={{\n                 top: 0,\n                 left: 0,\n                 position: \"absolute\",\n                 opacity: 0,\n                 ...size,\n               }}\n        />\n      </IconButton>\n    </>\n  )\n}\n","export const saveData = (function () {\n  const a = document.createElement(\"a\");\n  document.body.appendChild(a);\n  a.setAttribute('style', \"display: none\")\n  return function (data: string, fileName: string) {\n    const blob = new Blob([data], {type: \"octet/stream\"})\n    const url = window.URL.createObjectURL(blob)\n    a.href = url;\n    a.download = fileName;\n    a.click();\n    window.URL.revokeObjectURL(url);\n  };\n})();\n\nexport {}\n","import React from \"react\";\nimport {Export} from \"@styled-icons/boxicons-regular/Export\"\nimport {IconButton} from \"@/components/ui/IconButton\";\nimport {useSelector} from \"react-redux\";\nimport {CalculatorState} from \"@/components/Calculator/types\";\nimport {normalizeFertilizer} from \"@/calculator/fertilizer\";\nimport {FERTILIZER_ELEMENT_NAMES} from \"@/calculator/constants\";\nimport {csvExport} from \"@/utils/csv\";\nimport {saveData} from \"@/utils/downloads\";\n\ninterface ExportFertilizersProps {\n}\n\nexport function ExportFertilizers(props: ExportFertilizersProps) {\n  const {\n    fertilizers,\n  } = useSelector<any>(state => state.calculator) as CalculatorState\n  const doExport = () => {\n    const npkFertilizer = fertilizers.map(f => normalizeFertilizer(f, false))\n    const rows = npkFertilizer.map(f => {\n      const cols = FERTILIZER_ELEMENT_NAMES.map(n => f.elements[n])\n      return [f.id, ...cols]\n    })\n    const csvData = csvExport(rows, {columns: ['Удобрение', ...FERTILIZER_ELEMENT_NAMES], header: true})\n    saveData(csvData, \"Удобрения.csv\")\n  }\n  return (\n    <>\n      <IconButton onClick={doExport} component={Export}/>\n    </>\n  )\n}\n","import React from \"react\";\nimport {Export} from \"@styled-icons/boxicons-regular/Export\"\nimport {IconButton} from \"@/components/ui/IconButton\";\nimport {useSelector} from \"react-redux\";\nimport {CalculatorState} from \"@/components/Calculator/types\";\nimport {FERTILIZER_ELEMENT_NAMES} from \"@/calculator/constants\";\nimport {csvExport} from \"@/utils/csv\";\nimport {saveData} from \"@/utils/downloads\";\n\ninterface ExportRecipesProps {\n}\n\nexport function ExportRecipes(props: ExportRecipesProps) {\n  const {\n    recipes,\n  } = useSelector<any>(state => state.calculator) as CalculatorState\n  const doExport = () => {\n    const rows = recipes.map(f => {\n      const cols = FERTILIZER_ELEMENT_NAMES.map(n => f.elements[n])\n      return [f.name, ...cols]\n    })\n    const csvData = csvExport(rows, {columns: ['Профиль', ...FERTILIZER_ELEMENT_NAMES], header: true})\n    saveData(csvData, \"Профили.csv\")\n  }\n  return (\n    <>\n      <IconButton onClick={doExport} component={Export}/>\n    </>\n  )\n}\n","import React, {ChangeEvent, createRef, useEffect, useState} from \"react\";\nimport {Import} from \"@styled-icons/boxicons-regular/Import\"\nimport {IconButton} from \"@/components/ui/IconButton\";\nimport {csvParse} from \"@/utils/csv\";\nimport {FERTILIZER_ELEMENT_NAMES} from \"@/calculator/constants\";\nimport {useDispatch} from \"react-redux\";\nimport {recipePush} from \"@/components/Calculator/actions\";\n\ninterface ImportRecipesProps {\n}\n\nconst COLUMNS = ['id', ...FERTILIZER_ELEMENT_NAMES]\n\nexport function ImportRecipes(props: ImportRecipesProps) {\n  const buttonRef = createRef<HTMLButtonElement>()\n  const dispatch = useDispatch()\n  const [size, setSize] = useState({width: 0, height: 0})\n  useEffect(() => {\n    const newSize = {\n      width: buttonRef.current?.offsetWidth || 0,\n      height: buttonRef.current?.offsetHeight || 0,\n    }\n    if (size.width !== newSize.width) {\n      setSize(newSize)\n    }\n  }, [buttonRef, size.width])\n\n  const loadCSV = (csv: string) => {\n    const p = csvParse(csv, {columns: COLUMNS})\n    if (isNaN(parseInt(p[0].P))) {\n      p.splice(0, 1)\n    }\n    for (let {id, ...npk} of p) {\n      dispatch(recipePush({name: id, elements: npk}))\n    }\n  }\n\n  const handleOnChange = (e: ChangeEvent<HTMLInputElement>) => {\n    console.log(e.target.value, e.target.files?.[0])\n    const file = e.target.files?.[0]\n    if (!file) {\n      return file\n    }\n    let reader = new FileReader();\n    reader.onload = () => {\n      console.log(reader.result)\n      loadCSV(reader.result as string)\n\n    }\n    reader.readAsText(file)\n\n  }\n  return (\n    <>\n      <IconButton\n        sx={{\n          position: \"relative\"\n        }}\n        ref={buttonRef}\n        component={Import}\n      >\n        <input type=\"file\"\n               accept=\"text/csv, .csv\"\n               onChange={event => handleOnChange(event)}\n               style={{\n                 top: 0,\n                 left: 0,\n                 position: \"absolute\",\n                 opacity: 0,\n                 ...size,\n               }}\n        />\n      </IconButton>\n    </>\n  )\n}\n","import {SxStyleProp} from \"rebass\";\n\nexport function mobileStyles(styles: SxStyleProp) {\n  return {\n    '@media screen and (max-width: 800px)': styles\n  }\n}\n","import React from \"react\";\nimport {Box, Card, Flex, Heading, Text} from 'rebass'\nimport {Restart} from \"@styled-icons/remix-line/Restart\"\n\nimport FertilizerSelect from './FertilizerSelect'\nimport {Options} from \"./Options/Options\";\nimport {Result} from \"./Result/Result\";\nimport {reduxForm} from \"redux-form\";\nimport {CalculatorFormValues} from \"./types\";\nimport {ReduxFormType} from \"../ui/ReduxForm/types\";\nimport {REDUX_FORM_NAME} from \"./constants\";\nimport {useDispatch} from \"react-redux\";\nimport {calculateStart, fertilizerReset, recipeReset} from \"./actions\";\nimport {ImportFertilizers} from \"@/components/Calculator/ImportExport/ImportFertilizers\";\nimport {ExportFertilizers} from \"@/components/Calculator/ImportExport/ExportFertilizers\";\nimport {IconButton} from \"@/components/ui/IconButton\";\nimport {DEFAULT_RECIPES} from \"@/components/Calculator/constants/recipes\";\nimport {ExportRecipes} from \"@/components/Calculator/ImportExport/ExportRecipes\";\nimport {ImportRecipes} from \"@/components/Calculator/ImportExport/ImportRecipes\";\nimport {Recipe} from \"@/components/Calculator/Options/Recipe\";\nimport {mobileStyles} from \"@/components/ui/styled\";\n\ninterface CalculatorProps {\n\n}\n\nconst initialValues: CalculatorFormValues = {\n  accuracy: 0.2,\n  solution_volume: 1,\n  solution_concentration: 100,\n  recipe: DEFAULT_RECIPES[0].elements,\n  fertilizers: [],\n\n  dilution_enabled: false,\n  dilution_volume: 20,\n  dilution_concentration: 1,\n}\nexport const CalculatorContainer: ReduxFormType<CalculatorProps, CalculatorFormValues> = ({handleSubmit}) => {\n  const dispatch = useDispatch()\n  return (\n    <form\n      onSubmit={handleSubmit(() => {\n        dispatch(calculateStart())\n      })}\n    >\n      <Flex sx={{\n        flexDirection: 'row',\n        ...mobileStyles({\n          flexDirection: 'column-reverse',\n        })\n      }}>\n        <Box flex={1}\n             sx={{\n               marginRight: 2,\n               ...mobileStyles({\n                 marginRight: 0\n               })\n             }}\n        >\n          <FertilizerSelect/>\n        </Box>\n        <Flex flexDirection='column' flex={1}>\n          <Box flex={1} marginBottom={2}>\n            <Recipe/>\n          </Box>\n          <Box flex={1}>\n            <Result/>\n          </Box>\n          <Box flex={1}>\n            <Options/>\n          </Box>\n          <Card>\n            <Heading fontSize={2}>Импорт/Экспорт</Heading>\n            <Flex flexDirection=\"column\" p={3}>\n              <Flex alignItems='center'\n                    paddingBottom={2}\n                    justifyContent=\"space-between\"\n                    flexWrap=\"wrap\"\n              >\n                <Text>Удобрения</Text>\n                <Box sx={{\n                  \"&>*\": {\n                    marginLeft: 1\n                  }\n                }}>\n                  <ImportFertilizers/>\n                  <ExportFertilizers/>\n                  <IconButton\n                    component={Restart}\n                    onClick={() => dispatch(fertilizerReset())}\n                  />\n                </Box>\n              </Flex>\n              <Flex alignItems='center'\n                    justifyContent=\"space-between\"\n                    flexWrap=\"wrap\"\n              >\n                <Text>Рецепты</Text>\n                <Box sx={{\n                  \"&>*\": {\n                    marginLeft: 1\n                  }\n                }}>\n                  <ImportRecipes/>\n                  <ExportRecipes/>\n                  <IconButton\n                    component={Restart}\n                    onClick={() => dispatch(recipeReset())}\n                  />\n                </Box>\n              </Flex>\n            </Flex>\n          </Card>\n        </Flex>\n      </Flex>\n    </form>\n  )\n}\n\n\nexport const Calculator = reduxForm<CalculatorFormValues>({\n  form: REDUX_FORM_NAME,\n  initialValues,\n  // enableReinitialize: true\n})(CalculatorContainer)\n","import React from \"react\";\nimport {Calculator} from \"@/components/Calculator\";\nimport {Box, Flex, Heading} from \"rebass\";\nimport {IconButton} from \"@/components/ui/IconButton\";\nimport {Help} from '@styled-icons/entypo/Help'\nimport {Link} from \"react-router-dom\";\n\n\nexport default () => {\n  return (\n    <Flex sx={\n      {\n        justifyContent: 'center'\n      }\n    }>\n      <Box width='936px'>\n        <Flex sx={{\n          justifyContent: \"space-between\",\n          '@media screen and (max-width: 1350px)': {\n            justifyContent: \"flex-start\",\n          }\n        }}>\n          <Heading>Калькулятор удобрений</Heading>\n          <Link to=\"/help\">\n            <IconButton\n              padding={1}\n              marginLeft={3}\n              size={30}\n              component={Help}\n            />\n          </Link>\n        </Flex>\n        <Calculator/>\n      </Box>\n    </Flex>\n  )\n}\n"],"sourceRoot":""}