{"version":3,"sources":["components/Calculator/constants/index.ts","serviceWorker.ts","pages/index.ts","pages/NotFound/index.tsx","themes/index.ts","components/ui/ForkMeOnGitHub.tsx","components/ColorModeToggle.tsx","Root.tsx","calculator/itertools.ts","calculator/index.ts","components/Calculator/saga.ts","saga.ts","redux-helpers/helpers.ts","components/Calculator/constants/fertilizers.ts","components/Calculator/reducers.ts","redux/rootReducers.ts","redux/index.ts","index.tsx","calculator/constants.ts","utils/index.ts","calculator/helpers.ts","calculator/molecular-parser/molecularParser.ts","calculator/chem.ts","components/Calculator/constants/recipes.ts","calculator/fertilizer.ts","components/Calculator/actions.ts"],"names":["REDUX_FORM_NAME","CALCULATE_START","CALCULATE_SUCCESS","CALCULATE_ERROR","FERTILIZERS_PUSH","FERTILIZERS_REMOVE","FERTILIZERS_RESET","RECIPE_PUSH","RECIPE_REMOVE","RECIPE_RESET","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","App","loadable","NotFound","Help","Calculator","ChemFormula","Example","presets","require","defaultTheme","polaris","colors","NO3","NH4","P","K","Ca","Mg","S","modes","dark","text","card","boxShadow","p","styles","button","color","shadows","small","large","StyledForkMeOnGithub","styled","span","ForkMeOnGitHub","target","rel","href","ColorModeToggle","useColorMode","colorMode","setColorMode","Icon","Moon","Sun","onClick","size","Root","store","theme","justifyContent","padding","flexDirection","margin","flex","exact","path","component","pages","marginTop","fontSize","__VERSION__","__COMMIT_HASH__","__COMMIT_DATE__","combination","iterable","Permutation","f","getScoreElement","needElements","currentElements","pairs","entries","map","key","value","curVal","score","Object","fromEntries","calculate_v3","fertilizers","options","result","time","Date","getTime","count","r","calculate_v2","stats","accuracy","ignore_Ca","ignore_Mg","ignore_S","solution_volume","solution_concentration","precision","countDecimals","ignoredElements","getEmptyElements","weights","v","id","weight","base_weight","xElements","calcElements","elements","filter","sort","a","b","primaryElement","skipFert","length","m","round","e","score_el","score_percent","sum","values","ignored","needElementsLength","keys","totalScore","Math","deltaElementsPairs","k","deltaElements","calculateStartSaga","calculatorSagaWatcher","calculatorFormChangeWatcher","calculatorRootSaga","select","getFormValues","formValues","put","stopSubmit","_error","calculateError","recipe","normalizeFertilizer","calculateSuccess","takeLatest","actionTypes","CHANGE","BLUR","ARRAY_PUSH","ARRAY_REMOVE","calculateStart","all","fork","rootSaga","sagas","s","assertNever","_","defaultFertilizers","composition","formula","percent","buildNPKFertilizer","initialState","process","recipes","DEFAULT_RECIPES","rootReducers","combineReducers","calculator","action","type","ActionNames","updateOrPush","payload","name","form","formReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","sagaMiddleware","createSagaMiddleware","persistedState","localStorage","getItem","JSON","parse","loadPersistedState","middlewares","enhancers","applyMiddleware","createStore","subscribe","setItem","stringify","getState","run","ReactDOM","render","StrictMode","document","getElementById","URL","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","ATOMIC_MASS","FERTILIZER_ELEMENT_NAMES","IONIC_STRENGTH","Cl","Na","reduce","number","pow","Number","EPSILON","floor","valueOf","toString","split","toMap","list","field","i","item","lookup","newList","updated","push","calculateNPKBalance","npk","anions","cations","ion_balance","EC","el","st","sign","forEach","isFinite","calculatePPM","ppmToEC","ppm","findSubgroups","finishingNestedSubgroup","subgroups","currentFormula","currentCount","level","pushSubgroup","parseInt","ch","test","decomposeFormula","elementCounts","elementRe","matcher","singleElementRe","element","hasOwnProperty","_el","_decomposePrimitiveFormula","combinedCounts","subgroup","elementCount","subgroupCounts","parseMolecule","parseNitrates","nitrates","re","n","c","matchAll","calculateMassParts","atomMasses","atom","totalMass","mass","NPKOxides","fertilizerInfo","convertMass","comp","atomCounts","massParts","subAtoms","includes","totalSubAtoms","oxide","elementMassPart","fertilizerPush","fertilizerRemove","fertilizerReset","recipePush","recipeRemove","recipeReset"],"mappings":"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","file":"static/js/main.09ea9501.chunk.js","sourcesContent":["export const REDUX_FORM_NAME = 'calculatorOptions' as const\n\n\nexport const CALCULATE_START = 'CALCULATE_START' as const;\nexport const CALCULATE_SUCCESS = 'CALCULATE_SUCCESS' as const;\nexport const CALCULATE_ERROR = 'CALCULATE_ERROR'  as const;\n\nexport const FERTILIZERS_PUSH = 'FERTILIZERS_PUSH' as const\nexport const FERTILIZERS_REMOVE = 'FERTILIZERS_REMOVE' as const\nexport const FERTILIZERS_RESET = 'FERTILIZERS_RESET' as const\n\n\nexport const RECIPE_PUSH = 'RECIPE_PUSH' as const\nexport const RECIPE_REMOVE = 'RECIPE_REMOVE' as const\nexport const RECIPE_RESET = 'RECIPE_RESET' as const\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/pwa-sw.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import loadable from '@loadable/component';\nimport NotFound from './NotFound'\n\nexport default {\n  App: loadable(() => import('./App')),\n  NotFound,\n  Help: loadable(() => import('./Help')),\n  Calculator: loadable(() => import('./Calculator')),\n  ChemFormula: loadable(() => import('./ChemFormula')),\n  Example: loadable(() => import('./Example')),\n}\n","import React from \"react\";\n\nexport default () => <h1>Not found</h1>\n","import {Theme} from \"@/themes/types\";\n\nconst presets: any = require('@theme-ui/presets')\n\nexport const defaultTheme: Theme = {\n  ...presets.polaris,\n  colors: {\n    ...presets.polaris.colors,\n    NO3: '#05AD11',\n    NH4: '#FFF',\n    P: '#DBC403',\n    K: '#E07206',\n    Ca: '#D1C7C7',\n    Mg: '#AB0AE0',\n    S: '#FFF',\n    modes: {\n      dark: {\n        ...presets.polaris.colors.modes.dark,\n        text: \"#9d9d9d\"\n      }\n    },\n  },\n  card: {\n    boxShadow: 'small',\n    p: 2,\n  },\n  styles: {\n    ...presets.polaris.styles,\n    button: {\n      color: 'background'\n    }\n  },\n  shadows: {\n    small: '0 0 4px rgba(0, 0, 0, .125)',\n    large: '0 0 24px rgba(0, 0, 0, .125)'\n  },\n}\nconsole.log(defaultTheme)\n","import React, {FunctionComponent} from \"react\";\nimport styled from \"styled-components\";\n\n\nconst StyledForkMeOnGithub = styled.span`\n&>a {\n    background: #000;\n    color: #fff;\n    text-decoration: none;\n    font-family: arial, sans-serif;\n    text-align: center;\n    font-weight: bold;\n    padding: 5px 40px;\n    font-size: 1rem;\n    line-height: 2rem;\n    position: relative;\n    transition: 0.5s;\n}\n\n&>a:hover {\n    background: #c11;\n    color: #fff;\n}\n\n&>a::before, &>a::after {\n    content: \"\";\n    width: 100%;\n    display: block;\n    position: absolute;\n    top: 1px;\n    left: 0;\n    height: 1px;\n    background: #fff;\n}\n\n&>a::after {\n    bottom: 1px;\n    top: auto;\n}\n\n@media screen and (min-width: 800px) {\n    & {\n        position: absolute;\n        display: block;\n        top: 0;\n        right: 0;\n        width: 200px;\n        overflow: hidden;\n        height: 200px;\n        z-index: 9999;\n    }\n\n    &>a {\n        // width: 200px;\n        position: absolute;\n        top: 40px;\n        right: -50px;\n        transform: rotate(45deg);\n        box-shadow: 4px 4px 10px rgba(0, 0, 0, 0.8);\n    }\n}\n`\n\ninterface ForkMeOnGitHubProps {\n}\n\nexport const ForkMeOnGitHub: FunctionComponent<ForkMeOnGitHubProps> = () => {\n  return (\n    <StyledForkMeOnGithub>\n      <a\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        href={'https://github.com/Apkawa/react-fertilizer-calculator'}\n      >Fork me on GitHub</a>\n    </StyledForkMeOnGithub>\n  )\n}\n","import React, {FunctionComponent} from \"react\";\nimport {useColorMode} from \"theme-ui\";\nimport {Moon} from \"@styled-icons/boxicons-solid/Moon\"\nimport {Sun} from \"@styled-icons/fa-solid/Sun\"\n\ninterface ColorModeProps {\n}\n\nexport const ColorModeToggle: FunctionComponent<ColorModeProps> = () => {\n    const [colorMode, setColorMode] = useColorMode()\n    const Icon = colorMode === 'default'? Moon : Sun\n    return (\n          <Icon\n            onClick={() => {\n              setColorMode(colorMode === 'default' ? 'dark' : 'default')\n            }}\n            size={42}\n            color={\"text\"}\n          />\n    )\n}\n","import React, {FunctionComponent} from 'react'\nimport {Provider} from 'react-redux'\nimport {HashRouter as Router, Route, Switch} from 'react-router-dom'\nimport {ThemeProvider} from 'theme-ui'\n\n\nimport pages from './pages'\nimport {Box, Flex, Text} from \"rebass\";\nimport {defaultTheme} from \"./themes\";\nimport {ForkMeOnGitHub} from \"./components/ui/ForkMeOnGitHub\";\nimport {ColorModeToggle} from \"./components/ColorModeToggle\";\n\n\ntype RootProps = {\n  store: any\n}\n\nconst Root: FunctionComponent<RootProps> = ({store}) => {\n\n  return (\n    <Provider store={store}>\n      <ThemeProvider theme={defaultTheme}>\n        <Flex justifyContent=\"space-between\">\n          <Box\n            padding={3}\n          >\n            <ColorModeToggle/>\n          </Box>\n          <ForkMeOnGitHub/>\n        </Flex>\n\n        <Flex flexDirection='column' margin={2}>\n          <Box flex={1}>\n            <Router>\n              <Switch>\n                <Route exact path=\"/\" component={pages.Calculator}/>\n                <Route path={\n                  [\n                    \"/formula/:formula?/:percent?\",\n                  ]} component={pages.ChemFormula}/>\n                <Route path=\"/example\" component={pages.Example}/>\n                <Route path=\"/help\" component={pages.Help}/>\n                <Route path=\"*\" component={pages.NotFound}/>\n              </Switch>\n            </Router>\n          </Box>\n          <Flex justifyContent={\"flex-end\"} marginTop=\"auto\" flex={1}>\n            <Text fontSize={1}>\n              {__VERSION__} {__COMMIT_HASH__} [{__COMMIT_DATE__}]\n            </Text>\n          </Flex>\n        </Flex>\n      </ThemeProvider>\n    </Provider>\n  )\n}\n\nexport default Root\n","import {Permutation} from \"js-combinatorics\";\n\ntype GenericIterableIterator<T> = IterableIterator<{\n  [K in keyof T]: T[K] extends Iterable<infer U> ? U : never\n}>\n\nexport function* combination<T extends Array<any>>(iterable: T): GenericIterableIterator<T> {\n  for (let p of new Permutation(iterable)) {\n    yield p as any\n  }\n}\n\n// NB: throws if any iterables passed to it are empty\n// via https://gist.github.com/cybercase/db7dde901d7070c98c48#gistcomment-3033459\nexport function* product<T extends Array<Iterable<any>>>(...iterables: T): GenericIterableIterator<T> {\n  if (iterables.length === 0) {\n    return;\n  }\n  // make a list of iterators from the iterables\n  const iterators = iterables.map(it => it[Symbol.iterator]());\n  const results = iterators.map(it => it.next());\n  if (results.some(r => r.done)) {\n    throw new Error(\"Input contains an empty iterator.\");\n  }\n\n  for (let i = 0; ;) {\n    if (results[i].done) {\n      // reset the current iterator\n      iterators[i] = iterables[i][Symbol.iterator]();\n      results[i] = iterators[i].next();\n      // advance, and exit if we've reached the end\n      if (++i >= iterators.length) {\n        return;\n      }\n    } else {\n      yield results.map(({value}) => value) as any;\n      i = 0;\n    }\n    results[i] = iterators[i].next();\n  }\n}\n\n\n","import {combination, product} from \"./itertools\";\nimport {countDecimals, entries, keys, round, sum, values} from \"../utils\";\nimport {FERTILIZER_ELEMENT_NAMES} from \"./constants\";\nimport {Elements, Fertilizer} from \"./types\";\nimport {getEmptyElements} from \"./helpers\";\n\n\nexport interface FertilizerWeights {\n  id: string,\n  // г/л\n  weight: number\n  base_weight: number,\n}\n\nexport interface CalculateResult {\n  fertilizers: FertilizerWeights[],\n  elements: Elements,\n  deltaElements: Elements,\n  score: number,\n  stats: {\n    time: number,\n    count: number,\n  },\n}\n\nexport interface CalculateOptions {\n  accuracy?: number,\n  max_iterations?: number,\n  ignore_Ca?: boolean,\n  ignore_Mg?: boolean,\n  ignore_S?: boolean,\n  solution_volume?: number,\n  solution_concentration?: number,\n}\n\nexport function sumFertilizers(fertilizers: Fertilizer[], portions: number[]): Elements {\n  const pairs = FERTILIZER_ELEMENT_NAMES.map(key =>\n    [\n      key,\n      sum(\n        portions.map(\n          (weight, index) => weight * fertilizers[index].elements[key])\n      )\n    ]\n  )\n  return Object.fromEntries(pairs)\n}\n\n\nexport function getScoreElement(needElements: Elements, currentElements: Elements): Elements {\n  let pairs = entries(needElements).map(([key, value]) => {\n    let curVal = currentElements[key]\n    let score = 100\n    if (curVal !== 0) {\n      if (curVal < value) {\n        score = value / curVal;\n      } else {\n        score = curVal / value\n      }\n    } else {\n      if (curVal === value) {\n        // В рецепте тоже ноль\n        score = 1.0\n      }\n    }\n    return [key, score]\n  })\n  return Object.fromEntries(pairs)\n}\n\n// Подбор оптимального количества путем пересортировки удобрений\nexport function calculate_v3(\n  needElements: Elements,\n  fertilizers: Fertilizer[],\n  options: CalculateOptions = {}\n): CalculateResult {\n\n  let result: CalculateResult|null = null\n  const time = new Date().getTime();\n  let count = 0;\n  for (let f of combination(fertilizers)) {\n    const r = calculate_v2(needElements, f, options)\n    if (!result) {\n      result = r\n      continue\n    }\n    if (result.score < r.score) {\n      result = r\n    }\n    count += 1\n  }\n  if (result) {\n    result.stats.count = count\n    result.stats.time = (new Date().getTime() - time) / 1000\n  }\n  return result as CalculateResult\n\n}\n\n// Алгоритм расчетов из https://github.com/siv237/HPG\nexport function calculate_v2(\n  needElements: Elements,\n  fertilizers: Fertilizer[],\n  options: CalculateOptions = {}\n): CalculateResult {\n  const {\n    accuracy = 0.1,\n    ignore_Ca = false,\n    ignore_Mg = false,\n    ignore_S = false,\n    solution_volume=1,\n    solution_concentration=1,\n  } = options || {}\n  const precision = countDecimals(accuracy)\n  let ignoredElements: Elements = getEmptyElements()\n\n  if (ignore_Ca) {\n    ignoredElements.Ca = 1\n  }\n  if (ignore_Mg) {\n    ignoredElements.Mg = 1\n  }\n  if (ignore_S) {\n    ignoredElements.S = 1\n  }\n\n  let weights: { [K: string]: FertilizerWeights } = Object.fromEntries(\n    fertilizers.map(v => ([v.id, {\n      id: v.id,\n      weight: 0,\n      base_weight: 0\n    }])))\n  const xElements = {...needElements}\n  const calcElements = getEmptyElements()\n\n  for (let f of fertilizers) {\n    let p = entries(f.elements)\n      .filter(v => v[1])\n      .sort((a, b) => xElements[a[0]] / a[1]  - xElements[b[0]] / b[1])\n    let primaryElement = p.filter(([a]) => xElements[a] > 0 && needElements[a] > 0)?.[0]?.[0]\n    let skipFert = p.filter(([a]) => needElements[a] <= 0 && !ignoredElements[a]).length > 0\n    if (!primaryElement || skipFert) {\n      continue\n    }\n\n    let m = Object.fromEntries(p)\n    let weight = xElements[primaryElement] / (m[primaryElement] * 10)\n    weights[f.id].base_weight = round(weight, 3)\n    weights[f.id].weight = round(weight * solution_volume * solution_concentration, precision)\n    for (let [a, v] of p) {\n      const e = weight * v * 10\n      calcElements[a] += round(e)\n      xElements[a] -= e\n    }\n  }\n  let score_el: Elements = getScoreElement(needElements, calcElements)\n  for (let [e, v] of entries(ignoredElements)) {\n    if (v) {\n      score_el[e] = 0\n    }\n  }\n  const score_percent = sum(Object.values(score_el))\n\n  let ignored = sum(values(ignoredElements));\n  const needElementsLength = keys(needElements).length\n  const totalScore = Math.round(100 / ((score_percent - (needElementsLength - ignored)) / (needElementsLength - ignored) + 1))\n\n  const deltaElementsPairs = entries(calcElements).map(([k, v]) => {\n    return [k, round(needElements[k] - v, 1)]\n  })\n  const deltaElements = Object.fromEntries(deltaElementsPairs)\n\n  return  {\n    fertilizers: values(weights)\n        .map(v => ({\n          ...v,\n          base_weight: round(v.base_weight, precision),\n          weight: round(v.weight, precision),\n        }))\n        .filter(v => v.weight),\n    elements: calcElements,\n    deltaElements,\n    score: totalScore,\n    stats: {\n      count: 0,\n      time: 0,\n    }\n  }\n\n\n}\n\nexport function calculate_v1(\n  needElements: Elements,\n  fertilizers: Fertilizer[],\n  options: CalculateOptions = {},\n): CalculateResult {\n\n  const time = new Date().getTime();\n  let count = 0;\n  const {\n    accuracy = 0.1,\n    max_iterations = 25,\n    ignore_Ca = false,\n    ignore_Mg = false,\n    ignore_S = false,\n  } = options || {}\n  const precision = countDecimals(accuracy)\n  let weights: FertilizerWeights[] = fertilizers.map(v => ({\n    id: v.id,\n    weight: max_iterations,\n    base_weight: max_iterations\n  }))\n\n  let ignoredElements: Elements = getEmptyElements()\n  if (ignore_Ca) {\n    ignoredElements.Ca = 1\n  }\n  if (ignore_Mg) {\n    ignoredElements.Mg = 1\n  }\n  if (ignore_S) {\n    ignoredElements.S = 1\n  }\n  // for (let [e, v] of entries(needElements)) {\n  //   if (v === 0) {\n  //     ignoredElements[e] = 1\n  //   }\n  // }\n\n  let best_score = 1000000;\n  let score;\n  let score_percent = 0;\n  let calculatedElements: Elements = getEmptyElements()\n\n  const accuracyList = [0.2, 0.1, 0.05, 0.01]\n  let step = accuracyList[0] * 10;\n\n  for (let currentAccuracy of accuracyList) {\n    if (currentAccuracy < accuracy) {\n      break\n    }\n\n    const _step = step\n    const weightRanges = weights.map(w => {\n      const ranges = []\n      const weight = w.weight < _step ? _step : w.weight\n      let minWeight = weight - _step\n      let maxWeight = weight + _step\n      if (weight === max_iterations) {\n        // Maybe first iteration\n        minWeight = 0\n        maxWeight = max_iterations\n      }\n      for (let i = minWeight; i <= maxWeight; i += _step) {\n        ranges.push(i)\n      }\n      return ranges\n    })\n\n\n    const it = product(...weightRanges)\n\n    for (let portions of it) {\n      let n_el: Elements = sumFertilizers(fertilizers, portions)\n      let score_el: Elements = getScoreElement(needElements, n_el)\n\n      for (let [e, v] of entries(ignoredElements)) {\n        if (v) {\n          score_el[e] = 0\n        }\n      }\n\n      count += 1\n      const current_score = sum(Object.values(score_el))\n      score = sum(Object.values(score_el).map(v => Math.pow(v, 2)))\n      if (best_score > score) {\n        calculatedElements = n_el\n        best_score = score\n        score_percent = current_score\n        weights.forEach((v, index) => {\n          v.base_weight = portions[index]\n          v.weight = portions[index]\n        })\n      }\n    }\n    weights = weights.filter(v => v.weight > 0)\n    let newFertilizers: Fertilizer[] = []\n    for (let f of fertilizers) {\n      for (let w of weights) {\n        if (w.id === f.id) {\n          newFertilizers.push(f)\n        }\n      }\n    }\n    fertilizers = newFertilizers\n    step = currentAccuracy * 10;\n  }\n\n\n  for (let [k, v] of entries(calculatedElements)) {\n    calculatedElements[k] = round(v)\n  }\n\n  const deltaElementsPairs = entries(calculatedElements).map(([k, v]) => {\n    return [k, needElements[k] - v]\n  })\n  const deltaElements = Object.fromEntries(deltaElementsPairs)\n\n  let ignored = sum(values(ignoredElements));\n  const needElementsLength = keys(needElements).length\n  const totalScore = Math.round(100 / ((score_percent - (needElementsLength - ignored)) / (needElementsLength - ignored) + 1))\n  return {\n    fertilizers: weights.map(v => ({...v, weight: round(v.weight / 10, precision)})),\n    score: totalScore,\n    elements: calculatedElements,\n    deltaElements,\n    stats: {\n      time: (new Date().getTime() - time) / 1000,\n      count: count,\n    }\n  }\n}\n","import {all, fork, put, select, takeLatest} from 'redux-saga/effects'\nimport {actionTypes, getFormValues, stopSubmit} from \"redux-form\";\nimport {CALCULATE_START, REDUX_FORM_NAME} from \"./constants\";\nimport {calculateError, calculateStart, calculateSuccess} from \"./actions\";\nimport {calculate_v3} from \"@/calculator\";\nimport {CalculatorFormValues} from \"./types\";\nimport {normalizeFertilizer} from \"@/calculator/fertilizer\";\n\nexport function* calculateStartSaga() {\n  const formValues: CalculatorFormValues = yield select(getFormValues(REDUX_FORM_NAME))\n  if (!formValues.fertilizers.length) {\n    yield put(stopSubmit(REDUX_FORM_NAME, {\n      fertilizers: {_error: \"Need fertilizers!\"}\n    }))\n    yield put(calculateError())\n    return\n  }\n  const {\n    ignore_Ca,\n    ignore_Mg,\n    ignore_S,\n    accuracy,\n    solution_volume,\n    solution_concentration,\n  } = formValues\n\n  // Тут замораживается UI из за вычислений. нужно либо оптимизировать либо использовать WebWorker\n  const result = calculate_v3(\n    formValues.recipe,\n    formValues.fertilizers.map(f => normalizeFertilizer(f)),\n    {\n      ignore_Ca,\n      ignore_Mg,\n      ignore_S,\n      accuracy,\n      solution_volume,\n      solution_concentration,\n    }\n  )\n\n  yield put(calculateSuccess(result))\n\n}\n\nexport function* calculatorSagaWatcher() {\n  yield takeLatest(CALCULATE_START, calculateStartSaga);\n}\n\nexport function* calculatorFormChangeWatcher() {\n\n  yield takeLatest([\n      actionTypes.CHANGE,\n      actionTypes.BLUR,\n      actionTypes.ARRAY_PUSH,\n      actionTypes.ARRAY_REMOVE\n    ],\n    function* () {\n      yield put(calculateStart())\n    });\n}\n\nexport default function* calculatorRootSaga() {\n  yield all([\n    fork(calculatorSagaWatcher),\n    fork(calculatorFormChangeWatcher)\n  ]);\n}\n","import {all} from 'redux-saga/effects'\nimport calculatorRootSaga from \"./components/Calculator/saga\";\n\ntype AnySagaGenerator = Generator<any, any, any>;\n\nconst sagas: (() => AnySagaGenerator)[] = [\n  calculatorRootSaga\n]\n\nexport default function* rootSaga() {\n  yield all(sagas.map(s => s()))\n}\n","export function assertNever<TState>(state: TState, _: never): TState {\n  return state;\n}\n","import {buildNPKFertilizer} from \"@/calculator/fertilizer\";\nimport {FertilizerInfo} from \"@/calculator/types\";\n\n// Бутылка-1 Макра-азотная\n// Селитра амиачная\n// Селитра калиевая\n// Селитра кальциевая\n//\n// Бутылка 2 Макра-серно-фосфорная\n// Сульфат аммония\n// Сульфат магния семиводный\n// Монофосфат калия\n\nexport const defaultFertilizers: FertilizerInfo[] = [\n  // buildNPKFertilizer(\n  //   \"Valagro 3:11:38\",\n  //   {\n  //     NO3: 3, P: 11, K: 38, Ca: 0, Mg: 4,\n  //   }),\n  // buildNPKFertilizer(\"Кальциевая селитра\",\n  //   {\n  //     NO3: 16, Ca: 24,\n  //   }),\n  // buildNPKFertilizer(\"Сульфат магния\", {Mg: 16.7, S: 13.3}),\n  // buildNPKFertilizer(\"Сульфат калия\", {K: 50, S: 18}),\n  // buildNPKFertilizer(\"Нитрат калия\", {NO3: 14, K: 46}),\n  // buildNPKFertilizer(\"Монофосфат калия\", {P: 50, K: 33}),\n  // {id: \"Сульфат калия\", composition: [{formula: \"K2SO4\", percent: 98}]},\n  {id: \"Сульфат магния (MgSO4*7H2O)\", composition: [{formula: \"MgSO4*7H2O\", percent: 98}]},\n  {id: \"Нитрат аммония (NH4NO3)\", composition: [{formula: \"NH4NO3\", percent: 98}]},\n  {id: \"Нитрат калия (KNO3)\", composition: [{formula: \"KNO3\", percent: 98}]},\n  {id: \"Сульфат калия (K2SO4)\", composition: [{formula: \"K2SO4\", percent: 98}]},\n  {id: \"Монофосфат калия (KH2PO4)\", composition: [{formula: \"KH2PO4\", percent: 98}]},\n  {id: \"Кальциевая селитра (Ca(NO3)2*4H2O)\", composition: [{formula: \"Ca(NO3)2*4H2O\", percent: 98}]},\n  {id: \"Сульфат аммония (NH4)2SO4)\", composition: [{formula: \"(NH4)2SO4\", percent: 98}]},\n  // {id: \"Магниевая селитра (Mg(NO3)2*6Н2О)\", composition: [{formula: \"Mg(NO3)2*6Н2О\", percent: 98}]},\n   buildNPKFertilizer(\"Магниевая селитра (Mg(NO3)2*6Н2О)\", {NO3: 7, Mg: 10}),\n\n]\n","import {ActionTypes, CalculatorState} from \"./types\";\nimport * as ActionNames from \"./constants\";\nimport {assertNever} from \"@/redux-helpers/helpers\";\nimport {defaultFertilizers} from \"./constants/fertilizers\";\nimport {DEFAULT_RECIPES} from \"./constants/recipes\";\nimport {updateOrPush} from \"@/utils\";\n\nconst initialState: CalculatorState = {\n  result: null,\n  process: false,\n  error: false,\n  fertilizers: defaultFertilizers,\n  recipes: DEFAULT_RECIPES,\n}\n\n\nexport const reducer = (state: CalculatorState = initialState, action: ActionTypes): CalculatorState => {\n  switch (action.type) {\n    case ActionNames.CALCULATE_START:\n      return {...state, process: true}\n    case ActionNames.CALCULATE_SUCCESS:\n      return {...state, process: false, result: action.result}\n    case ActionNames.CALCULATE_ERROR:\n      return {...state, process: false, error: true}\n\n    case ActionNames.FERTILIZERS_PUSH:\n      return {\n        ...state,\n        fertilizers: updateOrPush(state.fertilizers, action.payload, 'id'),\n      }\n    case ActionNames.FERTILIZERS_REMOVE:\n      return {...state, fertilizers: state.fertilizers.filter(f => action.payload.id !== f.id)}\n    case ActionNames.FERTILIZERS_RESET:\n      return {...state, fertilizers: [...defaultFertilizers]}\n\n    case ActionNames.RECIPE_PUSH:\n      return {...state, recipes: updateOrPush(state.recipes, action.payload, 'name')}\n    case ActionNames.RECIPE_REMOVE:\n      return {...state, recipes: state.recipes.filter(f => action.payload.name !== f.name)}\n    case ActionNames.RECIPE_RESET:\n      return {...state, recipes: [...DEFAULT_RECIPES]}\n\n    default:\n      return assertNever<CalculatorState>(state, action)\n  }\n}\n","import {combineReducers} from \"redux\";\nimport {reducer as calculateReducer} from \"../components/Calculator/reducers\";\nimport {reducer as formReducer} from \"redux-form\";\n\nexport const rootReducers = combineReducers({\n  calculator: calculateReducer,\n  form: formReducer\n})\n","import {applyMiddleware, compose, createStore} from 'redux'\nimport createSagaMiddleware from 'redux-saga'\nimport rootSaga from \"../saga\";\n\nimport {rootReducers} from \"./rootReducers\";\nimport {defaultFertilizers} from \"@/components/Calculator/constants/fertilizers\";\nimport {DEFAULT_RECIPES} from \"@/components/Calculator/constants/recipes\";\n\n\nconst composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst sagaMiddleware = createSagaMiddleware()\n\nfunction loadPersistedState() {\n  let state: any = {}\n  if (localStorage.getItem('reduxState')) {\n    state = JSON.parse(localStorage.getItem('reduxState') as string)\n    if (state?.calculator && !state.calculator.fertilizers) {\n      state.calculator.fertilizers = defaultFertilizers\n    }\n    if (state?.calculator && !state.calculator.recipes) {\n      state.calculator.recipes = DEFAULT_RECIPES\n    }\n  }\n  return state\n}\n\nconst persistedState = loadPersistedState()\n\nconst middlewares = [sagaMiddleware]\n\nconst enhancers = composeEnhancers(\n    applyMiddleware(...middlewares),\n  )\n\n// TODO typing\nexport const store = createStore(\n  rootReducers,\n  persistedState,\n  enhancers\n)\n\nstore.subscribe(() => {\n  localStorage.setItem('reduxState', JSON.stringify(store.getState()))\n})\n\nsagaMiddleware.run(rootSaga)\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport Root from './Root'\nimport {store} from \"./redux\";\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Root store={store}/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","export const ATOMIC_MASS = {\n  \"H\": 1.008,\n  \"He\": 4.0026022,\n  \"Li\": 6.94,\n  \"Be\": 9.01218315,\n  \"B\": 10.81,\n  \"C\": 12.011,\n  \"N\": 14.007,\n  \"O\": 15.999,\n  \"F\": 18.9984031636,\n  \"Ne\": 20.17976,\n  \"Na\": 22.989769282,\n  \"Mg\": 24.305,\n  \"Al\": 26.98153857,\n  \"Si\": 28.085,\n  \"P\": 30.9737619985,\n  \"S\": 32.06,\n  \"Cl\": 35.45,\n  \"K\": 39.09831,\n  \"Ar\": 39.9481,\n  \"Ca\": 40.0784,\n  \"Sc\": 44.9559085,\n  \"Ti\": 47.8671,\n  \"V\": 50.94151,\n  \"Cr\": 51.99616,\n  \"Mn\": 54.9380443,\n  \"Fe\": 55.8452,\n  \"Ni\": 58.69344,\n  \"Co\": 58.9331944,\n  \"Cu\": 63.5463,\n  \"Zn\": 65.382,\n  \"Ga\": 69.7231,\n  \"Ge\": 72.6308,\n  \"As\": 74.9215956,\n  \"Se\": 78.9718,\n  \"Br\": 79.904,\n  \"Kr\": 83.7982,\n  \"Rb\": 85.46783,\n  \"Sr\": 87.621,\n  \"Y\": 88.905842,\n  \"Zr\": 91.2242,\n  \"Nb\": 92.906372,\n  \"Mo\": 95.951,\n  \"Tc\": 98,\n  \"Ru\": 101.072,\n  \"Rh\": 102.905502,\n  \"Pd\": 106.421,\n  \"Ag\": 107.86822,\n  \"Cd\": 112.4144,\n  \"In\": 114.8181,\n  \"Sn\": 118.7107,\n  \"Sb\": 121.7601,\n  \"I\": 126.904473,\n  \"Te\": 127.603,\n  \"Xe\": 131.2936,\n  \"Cs\": 132.905451966,\n  \"Ba\": 137.3277,\n  \"La\": 138.905477,\n  \"Ce\": 140.1161,\n  \"Pr\": 140.907662,\n  \"Nd\": 144.2423,\n  \"Pm\": 145,\n  \"Sm\": 150.362,\n  \"Eu\": 151.9641,\n  \"Gd\": 157.253,\n  \"Tb\": 158.925352,\n  \"Dy\": 162.5001,\n  \"Ho\": 164.930332,\n  \"Er\": 167.2593,\n  \"Tm\": 168.934222,\n  \"Yb\": 173.0451,\n  \"Lu\": 174.96681,\n  \"Hf\": 178.492,\n  \"Ta\": 180.947882,\n  \"W\": 183.841,\n  \"Re\": 186.2071,\n  \"Os\": 190.233,\n  \"Ir\": 192.2173,\n  \"Pt\": 195.0849,\n  \"Au\": 196.9665695,\n  \"Hg\": 200.5923,\n  \"Tl\": 204.38,\n  \"Pb\": 207.21,\n  \"Bi\": 208.980401,\n  \"Po\": 209,\n  \"At\": 210,\n  \"Rn\": 222,\n  \"Fr\": 223,\n  \"Ra\": 226,\n  \"Ac\": 227,\n  \"Pa\": 231.035882,\n  \"Th\": 232.03774,\n  \"Np\": 237,\n  \"U\": 238.028913,\n  \"Am\": 243,\n  \"Pu\": 244,\n  \"Cm\": 247,\n  \"Bk\": 247,\n  \"Cf\": 251,\n  \"Es\": 252,\n  \"Fm\": 257,\n  \"Md\": 258,\n  \"No\": 259,\n  \"Lr\": 266,\n  \"Rf\": 267,\n  \"Db\": 268,\n  \"Sg\": 269,\n  \"Hs\": 269,\n  \"Bh\": 270,\n  \"Mt\": 278,\n  \"Ds\": 281,\n  \"Rg\": 282,\n  \"Cn\": 285,\n  \"Nh\": 286,\n  \"Fl\": 289,\n  \"Mc\": 289,\n  \"Lv\": 293,\n  \"Ts\": 294,\n  \"Og\": 294,\n  \"Uue\": 315\n}\nexport type AtomNameType = keyof ATOMIC_MASS\nexport type ATOMIC_MASS = typeof ATOMIC_MASS;\nexport const FERTILIZER_ELEMENT_NAMES = [\"NO3\", \"NH4\", \"P\", \"K\", \"Ca\", \"Mg\", \"S\"] as const\nexport type FERTILIZER_ELEMENT_NAMES = typeof FERTILIZER_ELEMENT_NAMES[number]\n\nexport const IONIC_STRENGTH = {\n  NO3: -1 / ATOMIC_MASS[\"N\"],\n  NH4: 1 / ATOMIC_MASS[\"N\"],\n  P: -1 / ATOMIC_MASS[\"P\"],\n  K: 1 / ATOMIC_MASS[\"K\"],\n  Ca: 2 / ATOMIC_MASS[\"Ca\"],\n  Mg: 2 / ATOMIC_MASS[\"Mg\"],\n  S: -2 / ATOMIC_MASS[\"S\"],\n  // TODO use for balance without recipe\n  Cl: -1 / ATOMIC_MASS[\"Cl\"],\n  Na: 1 / ATOMIC_MASS[\"Na\"],\n}\n\n","export const keys = Object.keys as <T>(o: T) => (Extract<keyof T, string>)[];\nexport const entries = Object.entries as <T>(\n  o: T\n) => [Extract<keyof T, string>, Exclude<T[keyof T], undefined>][]\n\nexport const values = Object.values as <T>(\n  o: T\n) => (Exclude<T[keyof T], undefined>)[]\n\nexport function sum(values: number[]) {\n  return values.reduce((a, b) => a + b, 0)\n}\n\nexport function round(number: number, precision: number = 0) {\n  const p = Math.pow(10, precision)\n  return Math.round((number + Number.EPSILON) * p) / p\n}\n\nexport function countDecimals(value: number): number {\n  if (Math.floor(value.valueOf()) === value.valueOf()) return 0;\n  return value.toString().split(\".\")[1].length || 0;\n}\n\ntype ToMapResult<T> = {[K in string]: T}\nexport function toMap<T extends object>(list: T[], field: keyof T): ToMapResult<T> {\n  const m: ToMapResult<T> = {}\n  for (let i of list) {\n    let key = i[field] as any as string\n    m[key] = i\n  }\n  return m\n}\n\nexport function updateOrPush<T extends object>(list: T[], item: T, lookup: keyof T): T[] {\n  const newList = [...list]\n  let updated = false\n  for (let i=0; i< list.length; i++)  {\n    if (newList[i][lookup] === item[lookup]) {\n      newList[i] = item\n      updated = true\n      break\n    }\n  }\n  if (!updated) {\n    newList.push(item)\n  }\n  return newList\n\n\n}\n","import {entries, round, sum} from \"../utils\";\nimport {IONIC_STRENGTH} from \"./constants\";\nimport {FertilizerWeights} from \"@/calculator/index\";\nimport {Elements} from \"@/calculator/types\";\n\nexport interface NPKBalance {\n  anions: number,\n  cations: number,\n  ion_balance: number,\n  'N:K': number,\n  'K:Ca': number,\n  'Ca:Mg': number,\n  '%NH4': number,\n  EC: number\n}\n\n\nexport function calculateNPKBalance(npk: Elements): NPKBalance {\n  const result: NPKBalance = {\n    anions: -0,\n    cations: 0,\n    ion_balance: 0,\n    'N:K': (npk.NH4 + npk.NO3) / npk.K,\n    'K:Ca': npk.K / npk.Ca,\n    'Ca:Mg': npk.Ca / npk.Mg,\n    '%NH4': round((npk.NH4 / (npk.NH4 + npk.NO3)) * 100, 1),\n    EC: 0,\n  }\n  for (let [el, w] of entries(npk)) {\n    const st = w * IONIC_STRENGTH?.[el]\n    if (Math.sign(st) < 0) {\n      result.anions += st\n    } else {\n      result.cations += st\n    }\n    result.ion_balance += st\n  }\n  // TODO понять что за магические числа\n  result.EC = 0.095 * result.cations + 0.19\n\n  entries(result).forEach(([k, v]) => {\n    if (!isFinite(v)) {\n      v = 0\n    }\n    result[k] = round(v, 2)\n  })\n\n  return result\n}\n\n\nexport function getEmptyElements(): Elements {\n  return {NO3: 0, NH4: 0, P: 0, K: 0, Ca: 0, Mg: 0, S: 0}\n}\n\n// Считаем PPM раствора\nexport function calculatePPM(\n  fertilizers: FertilizerWeights[],\n  solution_volume=1,\n): number {\n  return round(sum(fertilizers.map(f => {\n    return f.weight * 1000\n  })) / solution_volume)\n}\n\n// ppm (мг/л) в EC (мСм/см).  k - коэфициент преобразования\nexport function ppmToEC(ppm: number, k: number=1.0): number {\n  return round(ppm * (1 / k)) / 1000\n}\n","import {ATOMIC_MASS, AtomNameType} from \"../constants\";\n\nexport interface SubgroupType {\n  formula: string,\n  count: number\n}\n\nexport type ParsedMolecule = { [Atom in AtomNameType]?: number }\n\n/**\n * @param formula String A molecular formula, eg CH(CH(CH2)2)2OH\n * @return subgroups An array of first-level subgroups.\n * Eg [{formula: 'CH', count:1}, {formula:'CH(CH2)2', count:2,\n * {formula:'OH', count:1}]\n */\nexport const findSubgroups = function (formula: string): SubgroupType[] {\n  let finishingNestedSubgroup;\n  let subgroups: SubgroupType[] = [];\n  let currentFormula = '', currentCount = '';\n  let level = 0;\n\n  //This pushes the current state of currentFormula and currentCount to subgroups.\n  //It also resets currentFormula and currentCount.\n  const pushSubgroup = function () {\n    if (!currentFormula) return;\n    const countStr = currentCount || '1';\n    const count = parseInt(countStr, 10);\n    subgroups.push({formula: currentFormula, count: count});\n    currentFormula = '';\n    currentCount = '';\n  };\n\n  let i=-1;\n\n  for (let ch of formula) {\n    i++\n    if (/[A-Za-z]/.test(ch)) {\n      if (finishingNestedSubgroup) {\n        pushSubgroup();\n        finishingNestedSubgroup = false;\n      }\n      currentFormula += ch;\n      continue;\n    } else if (ch === '(') {\n      //If we are outside of parenthesis start a new subgroup\n      if (level === 0 && currentFormula) {\n        pushSubgroup();\n      }\n      if (level > 0) {\n        //If we are in a subgroup, the ( is part of the formula\n        currentFormula += ch;\n      }\n      level += 1;\n    } else if (ch === ')') {\n      level -= 1;\n      if (level === 0) {\n        //Finishing top-level subgroup; mark it so we can count multiples\n        finishingNestedSubgroup = true;\n      } else {\n        //If we are in a subgroup, the ( is part of the formula\n        currentFormula += ch;\n      }\n    } else if (/[*+]/.test(ch)) {\n      if (level === 0 && currentFormula) {\n        pushSubgroup();\n      }\n      if (level > 0) {\n        currentFormula += ch\n      }\n      level += 1\n    } else if (/\\d/.test(ch)) {\n      // TODO check numbers > 9\n      if (finishingNestedSubgroup) {\n        currentCount += ch;\n      } else {\n        if (i === 0) {\n          currentCount += ch\n          continue\n        }\n        currentFormula += ch;\n      }\n    }\n  }\n  //Once more to pick up any straggling formula\n  pushSubgroup();\n  return subgroups;\n}\n\n/**\n * @param formula String A primitive (ie, without subgroups/parentheses, like\n * CH4) molecular formula\n * @return elementCounts A map of element:count, eg {C:1, H:4}\n * @api private\n */\nconst _decomposePrimitiveFormula = function (formula: string): ParsedMolecule {\n  let elementCounts: ParsedMolecule = {};\n  let match = formula.match(elementRe)\n  if (!match) {\n    return elementCounts\n  }\n  for (let token of match) {\n    //matcher will be of the form ['Na2', 'Na', '2', ...] or ['H', 'H', '', ...]\n    let matcher = token.match(singleElementRe);\n    if (!matcher) {\n      continue\n    }\n    const element = matcher[1];\n    const count = parseInt((matcher[2] || '1'), 10);\n\n    if (!ATOMIC_MASS.hasOwnProperty(element)) {\n      continue\n    }\n    let _el = element as AtomNameType\n    if (element in elementCounts) {\n      elementCounts[_el] = (elementCounts[_el] || 0) + count;\n    } else {\n      elementCounts[_el] = count;\n    }\n  }\n\n\n  return elementCounts;\n};\n/**\n * @param formula String A molecular formula, eg CH(CH3)3\n * @return elementCounts A map of element:count, eg\n * {\n *   C: 4,\n *   H: 10\n * }\n */\nexport const decomposeFormula = function (formula: string): ParsedMolecule {\n  if (!formula) return {};\n  const subgroups = findSubgroups(formula);\n  if (subgroups.length === 1 && subgroups[0].formula === formula) {\n    //We have a primitive formula that we can just count!\n    return _decomposePrimitiveFormula(formula);\n  } else {\n    //We have subgroups\n    let combinedCounts: ParsedMolecule = {};\n    subgroups.forEach(function (subgroup) {\n      const subgroupCounts = decomposeFormula(subgroup.formula);\n      let elementCount;\n      for (let element in subgroupCounts) {\n        if (ATOMIC_MASS.hasOwnProperty(element)) {\n          let _el = element as AtomNameType\n          elementCount = (subgroupCounts[_el] || 0) * subgroup.count;\n          if (element in combinedCounts) {\n            combinedCounts[_el] = (combinedCounts[_el] || 0) + elementCount;\n          } else {\n            combinedCounts[_el] = elementCount;\n          }\n\n        }\n      }\n    });\n    return combinedCounts;\n  }\n}\n\nlet elementRe: RegExp = /([A-Z][a-z]{0,2})(\\d*)/g\nlet singleElementRe: RegExp = /([A-Z][a-z]{0,2})(\\d*)/\n\n\n","import {entries, round, sum, values} from \"../utils\";\nimport {ATOMIC_MASS, AtomNameType} from \"./constants\";\nimport {decomposeFormula, findSubgroups} from './molecular-parser/molecularParser';\n\nexport type DecomposedChemFormula = {\n  [Atom in AtomNameType]?: number;\n}\n\ntype ParsedNitrateType = {\n  NH4: number,\n  NO3: number\n}\n\n/**\n *\n * @param formula\n * @return\n */\nexport function parseMolecule(formula: string): DecomposedChemFormula {\n  return decomposeFormula(formula)\n}\n\nexport function parseNitrates(formula: string): ParsedNitrateType {\n  const nitrates: ParsedNitrateType = {\"NH4\": 0, \"NO3\": 0}\n  const re = /NH4|NO3/g\n  for (let s of findSubgroups(formula)) {\n\n    if (nitrates.hasOwnProperty(s.formula)) {\n      nitrates[s.formula as keyof typeof nitrates] += s.count\n      continue\n    }\n    if (s.formula !== formula) {\n      for (let [n, c] of entries(parseNitrates(s.formula))) {\n        (nitrates as ParsedNitrateType)[n] += c\n      }\n    } else {\n      for (let r of s.formula.matchAll(re)) {\n        (nitrates as ParsedNitrateType)[r[0] as keyof ParsedNitrateType] += s.count\n      }\n    }\n  }\n  return nitrates\n}\n\nexport function calculateMassParts(formula: DecomposedChemFormula): DecomposedChemFormula {\n  const atomMasses = Object.fromEntries(entries(formula).map(\n    ([atom, count]) =>\n      [atom, ATOMIC_MASS[atom] * count]\n    )\n  ) as DecomposedChemFormula\n\n  const totalMass = sum(values(atomMasses))\n  return Object.fromEntries(\n    entries(atomMasses).map(([atom, mass]) => [atom, round(mass / totalMass, 2)])\n  ) as DecomposedChemFormula\n}\n\n","import {Recipe} from \"@/components/Calculator/types\";\n\nexport const DEFAULT_RECIPES: Recipe[] = [\n  {\n    name: \"Универсальное\",\n    elements: {NO3: 214, NH4: 14, P: 60, K: 250, Ca: 170, Mg: 50, S: 46}\n  },\n  {\n    name: \"Перец вегетация\",\n    color: 'green',\n    elements: {NO3: 224, NH4: 14, P: 39, K: 264, Ca: 200, Mg: 36, S: 56}\n  },\n  {\n    name: \"Перец цветение\",\n    color: 'yellow',\n    elements: {NO3: 150, NH4: 0, P: 90, K: 280, Ca: 170, Mg: 50, S: 56}\n  },\n  {\n    name: \"Перец плодоношение\",\n    color: 'red',\n    elements: {NO3: 140, NH4: 0, P: 50, K: 330, Ca: 170, Mg: 50, S: 56}\n  },\n  {\n    name: \"Томат вегетация\",\n    color: 'green',\n    elements: {NO3: 220, NH4: 0, P: 50, K: 260, Ca: 220, Mg: 60, S: 141}\n  },\n  {\n    name: \"Томат цветение\",\n    color: 'yellow',\n    elements: {NO3: 220, NH4: 0, P: 50, K: 280, Ca: 200, Mg: 60, S: 141}\n  },\n  {\n    name: \"Томат плодоношение\",\n    color: 'red',\n    elements: {NO3: 200, NH4: 0, P: 50, K: 320, Ca: 180, Mg: 60, S: 141}\n  },\n  {\n    name: \"Огурцы\",\n    elements: {NO3: 180, NH4: 0, P: 80, K: 320, Ca: 180, Mg: 50, S: 44}\n  },\n  {\n    name: \"Салат\",\n    elements: {NO3: 200, NH4: 0, P: 80, K: 200, Ca: 170, Mg: 50, S: 0}\n  },\n  {\n    name: \"Бобовые\",\n    elements: {NO3: 80, NH4: 0, P: 110, K: 400, Ca: 170, Mg: 50, S: 0}\n  },\n  {\n    name: \"Капуста\",\n    elements: {NO3: 200, NH4: 0, P: 70, K: 200, Ca: 170, Mg: 50, S: 0}\n  },\n  {\n    name: \"Клубника\",\n    elements: {NO3: 150, NH4: 0, P: 70, K: 350, Ca: 200, Mg: 50, S: 48}\n  },\n  {\n    name: \"Картофель\",\n    elements: {NO3: 200, NH4: 0, P: 80, K: 200, Ca: 170, Mg: 50, S: 0}\n  },\n  {\n    name: \"Тыква\",\n    elements: {NO3: 100, NH4: 0, P: 95, K: 320, Ca: 170, Mg: 50, S: 0}\n  },\n]\n","import {entries, keys, round, sum, values} from \"../utils\";\nimport {calculateMassParts, parseMolecule, parseNitrates} from \"./chem\";\nimport {AtomNameType} from \"./constants\";\nimport {getEmptyElements} from \"./helpers\";\nimport {Elements, Fertilizer, FertilizerComposition, FertilizerInfo, NPKElements} from \"@/calculator/types\";\n\nconst NPKOxides = {\n  NO3: 'NO3',\n  NH4: 'NH4',\n  P: 'P2O5',\n  K: 'K2O',\n  Ca: 'CaO',\n  Mg: 'MgO',\n  S: 'S',\n}\n\nexport function buildNPKFertilizer(id: string, npk: NPKElements): FertilizerInfo {\n  const composition: FertilizerComposition[] = entries(npk)\n    .filter(v => v[1] > 0)\n    .map(([k, v]) => {\n        return {\n          formula: NPKOxides[k],\n          percent: v\n        }\n      }\n    )\n  return {\n    id,\n    composition\n  }\n}\n\n// Расчет состава удобрения в чистые элементы\nexport function normalizeFertilizer(fertilizerInfo: FertilizerInfo, convertMass = true): Fertilizer {\n  const elements: Elements = getEmptyElements()\n  for (let comp of fertilizerInfo.composition) {\n    let atomCounts = parseMolecule(comp.formula)\n    let massParts = calculateMassParts(atomCounts)\n    for (let [atom, mass] of entries(massParts)) {\n      let subAtoms = {[atom]: 1}\n      if (atom === \"N\") {\n        subAtoms = parseNitrates(comp.formula)\n        if (keys(elements).includes(comp.formula as keyof Elements)) {\n          mass = 1\n        }\n      }\n      const totalSubAtoms = sum(values(subAtoms))\n      for (let [a, k] of entries(subAtoms)) {\n        if (elements.hasOwnProperty(a)) {\n          let percent = 100\n          if (comp.percent) {\n            percent = comp.percent;\n          }\n          percent *= (k / totalSubAtoms)\n          elements[a as keyof Elements] += round(percent * mass, 2)\n        }\n      }\n    }\n  }\n  if (!convertMass) {\n    // Оксиды нужны только для отображения.\n    keys(elements).forEach(atom => {\n      const oxide = NPKOxides[atom]\n      const massParts = calculateMassParts(parseMolecule(oxide))\n      if (massParts.hasOwnProperty(\"N\") || massParts.hasOwnProperty(\"S\")) {\n\n        // ничего не делаем, азот не переводим в оксиды\n        return\n      }\n      const elementMassPart = massParts[atom as AtomNameType]\n      if (elementMassPart) {\n        const k = round(sum(values(massParts)) / elementMassPart, 2)\n        elements[atom] = round(elements[atom] * k, 2)\n      }\n    })\n  }\n  return {\n    id: fertilizerInfo.id,\n    elements\n  }\n\n}\n\n","import * as ActionNames from \"./constants\";\nimport {CalculateResult} from \"@/calculator\";\nimport {Recipe} from \"@/components/Calculator/types\";\nimport {FertilizerInfo} from \"@/calculator/types\";\n\nexport const calculateStart = () => ({\n  type: ActionNames.CALCULATE_START,\n} as const)\n\nexport const calculateSuccess = (result: CalculateResult) => ({\n  type: ActionNames.CALCULATE_SUCCESS,\n  result\n} as const)\n\nexport const calculateError = () => ({\n  type: ActionNames.CALCULATE_ERROR,\n} as const)\n\nexport const fertilizerPush = (payload: FertilizerInfo) => ({\n  type: ActionNames.FERTILIZERS_PUSH,\n  payload\n})\n\nexport const fertilizerRemove = (payload: FertilizerInfo) => ({\n  type: ActionNames.FERTILIZERS_REMOVE,\n  payload\n})\n\nexport const fertilizerReset = () => ({\n  type: ActionNames.FERTILIZERS_RESET,\n})\n\n\nexport const recipePush = (payload: Recipe) => ({\n  type: ActionNames.RECIPE_PUSH,\n  payload\n})\n\nexport const recipeRemove = (payload: Recipe) => ({\n  type: ActionNames.RECIPE_REMOVE,\n  payload\n})\n\nexport const recipeReset = () => ({\n  type: ActionNames.RECIPE_RESET,\n})\n\n\n"],"sourceRoot":""}