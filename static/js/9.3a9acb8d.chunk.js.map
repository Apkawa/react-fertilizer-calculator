{"version":3,"sources":["components/LazyPromise.tsx","pages/Help/Help.tsx","pages/Help/index.ts"],"names":["LazyPromise","props","lazy","Component","component","loading","Loading","useState","undefined","result","setResult","then","HELP_PAGES","path","name","m","default","Help","useRouteMatch","url","justifyContent","maxWidth","to","sx","float","margin","marginTop","map","p","exact","source"],"mappings":"mNASO,SAASA,EAAeC,GAA6B,IACnDC,EAA0DD,EAA1DC,KAAiBC,EAAyCF,EAApDG,UAD4C,EACQH,EAA9BI,QAASC,OADa,MACF,qCADE,IAE7BC,wBAAwBC,GAFK,mBAElDC,EAFkD,KAE1CC,EAF0C,KAMzD,OAFAR,IAAOS,MAAK,SAAAF,GAAM,OAAIC,EAAUD,MAG9B,oCACGA,EAAQ,kBAACN,EAAD,CAAWM,OAAQA,IAAYH,GCV9C,IAAMM,EAAa,CACjB,CACEC,KAAM,GACNC,KAAM,8FACNZ,KAAM,kBAAM,+BAAgDS,MAAK,SAAAI,GAAC,OAAIA,EAAEC,aAE1E,CACEH,KAAM,aACNC,KAAM,8FACNZ,KAAM,kBAAM,+BAA+CS,MAAK,SAAAI,GAAC,OAAIA,EAAEC,cCd5DC,UDsBmC,WAAO,IAAD,EAClCC,cAAdL,EADgD,EAChDA,KAAMM,EAD0C,EAC1CA,IAGZ,OACE,kBAAC,IAAD,CAAMC,eAAgB,UACpB,kBAAC,IAAD,CAAKC,SAAS,SACZ,kBAAC,IAAD,CAAMC,GAAG,KAAT,sEAGA,kBAAC,IAAD,CAAMC,GAAI,CACRC,MAAO,OACPC,OAAQ,EACRC,UAAW,IAEX,4BACGd,EAAWe,KAAI,SAAAC,GAAC,OACf,4BAAI,kBAAC,IAAD,CAAMN,GAAIH,EAAMS,EAAEf,MAAOe,EAAEd,YAKrC,kBAAC,IAAD,KACGF,EAAWe,KAAI,SAAAC,GAAC,OACf,kBAAC,IAAD,CAAOC,OAAK,EAAChB,KAAMA,EAAOe,EAAEf,MAC1B,kBAACb,EAAD,CACEE,KAAM0B,EAAE1B,KACRE,UAAW,gBAAEK,EAAF,EAAEA,OAAF,OAAc,kBAAC,IAAD,CAAeqB,OAAQrB,GAAU","file":"static/js/9.3a9acb8d.chunk.js","sourcesContent":["import React, {ComponentType, useState} from \"react\";\n\ninterface LazyPromiseProps<T> {\n  lazy: () => Promise<T>\n  component: ComponentType<{ result: T }>\n  loading?: ComponentType\n  fallback?: ComponentType\n}\n\nexport function LazyPromise<T>(props: LazyPromiseProps<T>) {\n  const {lazy, component: Component, loading: Loading = (<></>)} = props\n  const [result, setResult] = useState<T | undefined>(undefined)\n\n  lazy().then(result => setResult(result))\n\n  return (\n    <>\n      {result? <Component result={result} />: Loading}\n    </>\n  )\n}\n","import React, {FunctionComponent} from \"react\";\nimport ReactMarkdown from \"react-markdown\";\nimport {Box, Flex} from \"rebass\";\nimport {Link, Route, Switch, useRouteMatch} from \"react-router-dom\";\nimport {LazyPromise} from \"@/components/LazyPromise\";\n\n\nconst HELP_PAGES = [\n  {\n    path: '',\n    name: 'Как использовать',\n    lazy: () => import(\"!!raw-loader!../../docs/how_to_use.md\").then(m => m.default)\n  },\n  {\n    path: '/technique',\n    name: 'Методика расчета',\n    lazy: () => import(\"!!raw-loader!../../docs/technique.md\").then(m => m.default)\n  }\n]\n\n\ninterface HelpProps {\n}\n\nexport const Help: FunctionComponent<HelpProps> = () => {\n  let { path, url } = useRouteMatch();\n\n\n  return (\n    <Flex justifyContent={\"center\"}>\n      <Box maxWidth=\"960px\">\n        <Link to=\"/\">\n          Калькулятор\n        </Link>\n        <Flex sx={{\n          float: \"left\",\n          margin: 3,\n          marginTop: 5,\n        }}>\n          <ul>\n            {HELP_PAGES.map(p =>\n              <li><Link to={url + p.path}>{p.name}</Link></li>\n            )}\n          </ul>\n\n        </Flex>\n        <Switch>\n          {HELP_PAGES.map(p =>\n            <Route exact path={path + p.path}>\n              <LazyPromise<string>\n                lazy={p.lazy}\n                component={({result}) => <ReactMarkdown source={result || \"\"}/>}\n              />\n            </Route>\n          )}\n        </Switch>\n      </Box>\n    </Flex>\n  )\n}\n\n","import {Help} from \"./Help\";\n\nexport default Help\n"],"sourceRoot":""}