{"version":3,"sources":["components/ui/IconButton.tsx","components/ui/ReduxForm/normalizers.ts","components/ui/RebassWidgets/index.ts","components/ui/ReduxForm/Input.tsx","hooks/ReduxForm.ts","components/ui/ReduxForm/Checkbox.tsx","components/ui/Modal/ModalContainer.tsx","components/ui/Modal/Modal.tsx","utils/csv.ts","components/Calculator/FertilizerSelect/SelectedListItem.tsx","utils/downloads.ts","components/Calculator/FertilizerManager/AddItemElementForm.tsx","components/Calculator/FertilizerManager/AddEditCompositionList.tsx","components/Calculator/FertilizerManager/AddEdit.tsx","components/Calculator/FertilizerManager/Item.tsx","components/Calculator/ImportExport/ImportFertilizers.tsx","components/Calculator/ImportExport/ExportFertilizers.tsx","components/Calculator/FertilizerManager/List.tsx","components/Calculator/FertilizerManager/index.ts"],"names":["IconButton","forwardRef","props","buttonRef","IconComponent","component","size","children","extraProps","useState","containerSize","setSize","theme","useTheme","useEffect","current","offsetWidth","marginRight","type","ref","color","colors","background","style","number","value","parseInt","decimal","parseFloat","Input","styled","RebassInput","WrappedInput","input","label","lang","placeholder","name","useFormName","useContext","ReduxFormContext","form","useFormValues","formName","dispatch","useDispatch","useSelector","state","getFormValues","change","WrappedCheckbox","checked","Checkbox","StyledOverlay","Flex","window","pageYOffset","ModalContainer","modalRoot","el","document","querySelector","createElement","setAttribute","body","appendChild","useModalRoot","ReactDOM","createPortal","Helmet","backgroundColor","height","Modal","opened","button","container","closed","setClose","onClose","modalActions","open","close","renderCbProps","modal","justifyContent","fontSize","title","Icon","Cross","onClick","csvParse","parse","csvExport","stringify","Element","delta","displayName","isOxide","NPKOxides","hasOwnProperty","bg","flex","mx","px","minWidth","maxWidth","flexDirection","alignItems","SelectedListItem","item","onRemove","weight","normalizedFertilizer","normalizeFertilizer","width","id","FERTILIZER_ELEMENT_NAMES","map","v","elements","key","margin","textAlign","volume","liquid_weight","padding","alignSelf","saveData","a","data","fileName","blob","Blob","url","URL","createObjectURL","href","download","click","revokeObjectURL","AddItemElementForm","disabled","min","max","autoComplete","normalize","AddEditCompositionList","fields","push","formula","percent","f","i","step","remove","getInitialValues","formData","composition","npk","composition_enable","solution_concentration","solution_density","solution_density_enable","formToFertilizer","formValues","AddEdit","reduxForm","FERTILIZER_EDIT_FORM_NAME","enableReinitialize","Form","MACRO_ELEMENT_NAMES","MICRO_ELEMENT_NAMES","FieldArray","sx","whiteSpace","required","Item","fertilizer","marginBottom","pump_number","Edit","initialValues","fertilizerPush","onSave","Trash","fertilizerRemove","COLUMNS","ImportFertilizers","createRef","newSize","offsetHeight","handleOnChange","e","console","log","target","files","file","reader","FileReader","onload","result","csv","p","columns","isNaN","P","splice","buildNPKFertilizer","loadCSV","readAsText","position","Import","accept","onChange","event","top","left","opacity","ExportFertilizers","fertilizers","calculator","rows","cols","n","csvData","header","Export","List","Plus","onAdd","list","setList","newList","fertilizerSet","paddingBottom","flexWrap","marginLeft","Restart","fertilizerReset","FertilizerManager"],"mappings":"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","file":"static/js/6.611e1fef.chunk.js","sourcesContent":["import React, {forwardRef, MouseEventHandler, PropsWithChildren, useEffect, useState} from \"react\";\nimport {Button, ButtonProps} from \"rebass\";\nimport {EmotionIcon} from '@emotion-icons/emotion-icon'\n\nimport {useTheme} from \"emotion-theming\";\nimport {Theme} from \"@/themes/types\";\n\n\ninterface IconButtonProps extends\n  PropsWithChildren<Omit<ButtonProps, keyof React.HTMLProps<HTMLButtonElement>>> {\n  component: EmotionIcon,\n  disabled?: boolean,\n  onClick?: MouseEventHandler<HTMLButtonElement>,\n  size?: number | string,\n  title?: string\n}\n\nexport const IconButton = forwardRef<HTMLButtonElement, IconButtonProps>(\n  (props, buttonRef) => {\n    const {\n      component: IconComponent,\n      size = \"1.5em\",\n      children,\n      ...extraProps\n    } = props\n    const [containerSize, setSize] = useState<number | string>(size || 0)\n    const theme = useTheme<Theme>()\n\n    useEffect(() => {\n      if (!size && buttonRef && 'current' in buttonRef) {\n        setSize(buttonRef.current?.offsetWidth || 0)\n      }\n    }, [buttonRef, setSize, size])\n    let marginRight = 0;\n    if (children) {\n      marginRight = 2;\n    }\n    return (\n      <Button type=\"button\" {...extraProps} ref={buttonRef}>\n        <IconComponent\n          color={theme.colors?.background}\n          size={containerSize}\n          style={{marginRight}}\n        />\n        {children}\n      </Button>\n    )\n  })\n","\n\nexport function number(value: any) {\n  return value && parseInt(value)\n}\n\nexport function decimal(value: any) {\n  return value && parseFloat(value)\n}\n","import {Input as RebassInput, InputProps as RebassInputProps} from \"@rebass/forms\";\nimport styled from \"styled-components\";\n\n\nexport type InputProps = RebassInputProps\n\nexport const Input = styled(RebassInput)`\n  ::-webkit-inner-spin-button, ::-webkit-outer-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n    width: 0;\n    height: 0;\n  }\n  -moz-appearance: textfield;\n`\n\n\n\n","import React from \"react\";\nimport {Field as ReduxField} from \"redux-form\";\n\nimport {Input as RebassInput, InputProps as RebassInputProps} from \"../RebassWidgets\";\nimport {ReduxFormComponentType, WrapperInputType} from \"./types\";\n\ninterface InputProps extends RebassInputProps {\n  label?: string\n}\n\nexport const StyledInput = RebassInput\n\nexport const WrappedInput: WrapperInputType<InputProps> = ({input, label, type = \"text\", ...props}: any) =>\n  <RebassInput  {...props}\n                {...input}\n                type={type}\n                lang=\"en-US\"\n                placeholder={label}\n  />\n\n\n// TODO вывести тип\nexport const Input: ReduxFormComponentType<InputProps> = (\n  {\n    name,\n    ...props\n  }) => {\n\n  return (\n    <ReduxField\n      component={WrappedInput}\n      name={name}\n      {...props as any}\n    />\n  )\n}\n","import {useContext} from 'react'\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {change, FormContext, getFormValues, ReduxFormContext} from \"redux-form\";\n\nexport function useReduxForm(): FormContext {\n  return useContext(ReduxFormContext)\n}\n\nexport function useFormName(): string {\n  return useReduxForm().form\n}\n\nexport function useFormValues<FormValues=object>(formName: string): [FormValues, (name: string, value: any) => void] {\n  const dispatch = useDispatch()\n  const values = useSelector(state => getFormValues(formName)(state)) as FormValues\n\n  const setValue = (name: string, value: any) => {\n    dispatch(change(formName, name, value))\n  }\n  return [\n    values,\n    setValue\n    ]\n}\n","import React from \"react\";\n\nimport {Checkbox as RebassCheckbox, CheckboxProps as RebassCheckboxProps, Label} from \"@rebass/forms\";\nimport {Field as ReduxField} from \"redux-form\";\nimport {ReduxFormComponentType, WrapperInputType} from \"./types\";\n\ninterface CheckboxProps extends RebassCheckboxProps {\n  label: string\n}\n\nconst WrappedCheckbox: WrapperInputType<CheckboxProps> = ({input, label, ...props}: any) =>\n  <Label>\n    <RebassCheckbox\n      {...props} {...input}\n      checked={input.value}\n    />\n    {label}\n  </Label>\n\n// TODO вывести тип\nexport const Checkbox: ReduxFormComponentType<CheckboxProps> = ({name, ...props}) => {\n  return (\n    <ReduxField\n      component={WrappedCheckbox}\n      name={name}\n      {...props as any}\n    />\n  )\n}\n\n","import React, {ReactNode} from \"react\";\nimport ReactDOM from 'react-dom'\nimport {Card, Flex} from \"rebass\";\nimport styled from '@emotion/styled'\nimport {Helmet} from \"react-helmet\";\n\n\ninterface ModalContainerProps {\n  children: ReactNode,\n}\n\nconst useModalRoot = () => {\n  let el = document.querySelector('#modal-root')\n  if (!el) {\n    el = document.createElement('div')\n    el.setAttribute('id', 'modal-root')\n    document.body.appendChild(el)\n  }\n  return el\n}\n\nconst StyledOverlay = styled(Flex)`\n  overflow-y: auto;\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  top: ${() => `${window.pageYOffset}px`};\n  left: 0;\n  justify-content: center;\n  align-items: center;\n  background-color: rgba(255, 255, 255, 0.5);\n  z-index: 999;\n  \n  // Mobile\n  @media screen and (max-height: 500px), screen and (max-width: 500px) {\n    align-items: initial;\n  }\n`\n\nexport function ModalContainer(props: ModalContainerProps) {\n  const {\n    children,\n  } = props\n  const modalRoot = useModalRoot()\n  return ReactDOM.createPortal(\n    <>\n      <Helmet>\n        <style type='text/css'>\n          {`\n          body {\n            overflow: hidden;\n          }\n        `}\n        </style>\n      </Helmet>\n      <StyledOverlay>\n        <Card backgroundColor='#fff' height=\"max-content\">\n          {children}\n        </Card>\n      </StyledOverlay>\n    </>\n    , modalRoot)\n}\n","import React, {ReactNode, useEffect, useState} from \"react\";\nimport {ModalContainer} from \"@/components/ui/Modal/ModalContainer\";\nimport {Box, Flex, Heading} from \"rebass\";\nimport {Icon} from \"@/components/ui/Icon\";\nimport {Cross} from \"@styled-icons/entypo/Cross\";\n\nexport interface ModalActions {\n  open: () => void,\n  close: () => void,\n}\n\ntype RenderCb = (props: {modal: ModalActions}) => ReactNode\n\ninterface ModalProps {\n  opened?: boolean,\n  onClose?: () => void,\n  button?: RenderCb,\n  title?: string,\n  container: RenderCb,\n}\n\nexport function Modal(props: ModalProps) {\n  const {\n    opened = false,\n    button,\n    container,\n  } = props\n\n  const [closed, setClose] = useState(!opened)\n\n  useEffect(() => {\n    setClose(!opened)\n  }, [opened])\n\n  useEffect(() => {\n    if (closed && props.onClose) {\n      props.onClose()\n    }\n  }, [closed, props])\n\n  const modalActions: ModalActions = {\n    open: () => setClose(false),\n    close: () => setClose(true),\n  }\n  const renderCbProps = {modal: modalActions}\n\n  return (\n    <>\n      {button && button(renderCbProps)}\n      {closed ? null : <ModalContainer>\n        <Flex justifyContent='space-between'>\n          <Heading fontSize={2}>{props.title}</Heading>\n          <Icon component={Cross} onClick={modalActions.close}/>\n        </Flex>\n        <Box>\n          {container(renderCbProps)}\n        </Box>\n      </ModalContainer>\n      }\n    </>\n  )\n}\n","import parse from \"csv-parse/lib/sync\"\nimport stringify from \"csv-stringify/lib/sync\"\n\nexport const csvParse = parse\nexport const csvExport = stringify\n\n\n","import React, {FunctionComponent} from \"react\";\nimport {Box, Card, Flex, Text} from \"rebass\";\nimport {Cross} from \"@styled-icons/entypo/Cross\"\nimport {FertilizerType} from \"./types\";\nimport {normalizeFertilizer, NPKOxides} from \"@/calculator/fertilizer\";\nimport {FERTILIZER_ELEMENT_NAMES} from \"@/calculator/constants\";\nimport {IconButton} from \"@/components/ui/IconButton\";\nimport {FertilizerWeights} from \"@/calculator\";\nimport {Elements} from \"@/calculator/types\";\n\ninterface ElementProps {\n  name: keyof Elements,\n  isOxide?: boolean,\n  value: number,\n  delta?: number,\n}\n\nexport const Element: FunctionComponent<ElementProps> = (props) => {\n  const {name,\n    value,\n    delta,\n    isOxide\n  } = props\n  let displayName: string = name;\n  if (isOxide && NPKOxides.hasOwnProperty(name)) {\n    displayName = NPKOxides[name] as string\n  }\n  return (\n    <Box bg={name} flex={1} mx=\"2px\" px={1} color={'black'} minWidth=\"2.1em\" maxWidth=\"4em\" fontSize={1}>\n      <Flex flexDirection='column' alignItems={'center'}>\n        <Box>{displayName}</Box>\n        <Box>{value}</Box>\n        {typeof delta !== \"undefined\" ? <Box>{delta}</Box> : null}\n      </Flex>\n    </Box>\n  )\n}\n\ninterface SelectedListItemProps {\n  item: FertilizerType,\n  onRemove: () => void,\n  weight?: FertilizerWeights,\n}\n\n\nexport const SelectedListItem: FunctionComponent<SelectedListItemProps> = ({item, onRemove, weight}) => {\n  const normalizedFertilizer = normalizeFertilizer(item, false)\n  return (\n    <Card width={'auto'}>\n      <Flex justifyContent={'space-between'} alignItems=\"center\">\n        <Box flex={1}>\n          <Text flex={1}>\n            {item.id}\n          </Text>\n          <Flex>\n            {\n              FERTILIZER_ELEMENT_NAMES.map((name) => {\n                  let v = normalizedFertilizer.elements[name]\n                  if (!v) {\n                    return null\n                  }\n                  return <Element\n                    name={name}\n                    key={name}\n                    value={v}\n                    isOxide\n                  />\n                }\n              )\n            }\n          </Flex>\n        </Box>\n        <Flex>\n          <Flex alignItems=\"center\" justifyContent=\"center\" margin={1}>\n            {weight ? (\n              <Text textAlign=\"center\" minWidth=\"3em\">\n                {weight.weight}г\n                {weight.volume ? (\n                  <>\n                    <br/>\n                    <span\n                      title=\"Объем или вес раствора\">{weight.volume && `${weight.volume} мл${weight.liquid_weight? `, ${weight.liquid_weight}г`:''}`}</span>\n                  </>\n                ) : null}\n              </Text>\n            ) : null}\n          </Flex>\n          <IconButton\n            padding={1}\n            alignSelf=\"center\"\n            component={Cross}\n            onClick={() => onRemove()}\n          />\n        </Flex>\n      </Flex>\n    </Card>\n  )\n}\n","export const saveData = (function () {\n  const a = document.createElement(\"a\");\n  document.body.appendChild(a);\n  a.setAttribute('style', \"display: none\")\n  return function (data: string, fileName: string) {\n    const blob = new Blob([data], {type: \"octet/stream\"})\n    const url = window.URL.createObjectURL(blob)\n    a.href = url;\n    a.download = fileName;\n    a.click();\n    window.URL.revokeObjectURL(url);\n  };\n})();\n\nexport {}\n","import React, {FunctionComponent} from \"react\";\nimport {Flex} from \"rebass\";\nimport {Input} from \"@/components/ui/ReduxForm/Input\";\nimport {decimal} from \"@/components/ui/ReduxForm/normalizers\";\nimport {NPKOxides} from \"@/calculator/fertilizer\";\nimport {Elements} from \"@/calculator/types\";\n\ninterface RecipeElementFormProps {\n  name: keyof Elements,\n  disabled?: boolean\n}\n\n\nexport const AddItemElementForm: FunctionComponent<RecipeElementFormProps> = (props) => {\n  const {name, disabled} = props\n  let displayName: string = name;\n  if (NPKOxides.hasOwnProperty(name)) {\n    displayName = NPKOxides[name] as string\n  }\n  return (\n    <Flex flexDirection=\"column\" justifyContent=\"center\" alignItems=\"center\" width='4rem'>\n      <label style={{textAlign: 'center'}}>\n        {displayName}\n      </label>\n      <Input\n        name={'npk.' + name}\n        type=\"number\"\n        min=\"0\"\n        max=\"100\"\n        autoComplete=\"off\"\n        width=\"3rem\"\n        style={{\n          textAlign: \"center\"\n        }}\n        normalize={decimal}\n        disabled={disabled}\n      />\n    </Flex>\n  )\n}\n","import React from \"react\";\nimport {ReduxFieldArrayType} from \"@/components/ui/ReduxForm/types\";\nimport {Card, Flex} from \"rebass\";\nimport {FertilizerComposition} from \"@/calculator/types\";\nimport {Input} from \"@/components/ui/ReduxForm/Input\";\nimport {decimal} from \"@/components/ui/ReduxForm/normalizers\";\n\ninterface AddEditCompositionListProps {\n}\n\ntype AddEditCompositionListType = ReduxFieldArrayType<AddEditCompositionListProps, FertilizerComposition>\nexport const AddEditCompositionList: AddEditCompositionListType = (props) => {\n  const {fields} = props\n  return (\n    <Card width=\"100%\">\n      <Flex>\n        <button type=\"button\"  onClick={() => fields.push({formula: '', percent: 98})}>+</button>\n      </Flex>\n      <Flex flexDirection=\"column\">\n        {fields.map((f, i) => (\n          <Flex key={i} width=\"100%\">\n            <Input name={`${f}.formula`} flex={2}/>\n            <Input\n              name={`${f}.percent`}\n              type=\"number\"\n              step=\"0.1\"\n              min=\"0\"\n              max=\"100\"\n              normalize={decimal}\n              flex={1}\n            />\n            <button type=\"button\" onClick={() => fields.remove(i)}>-</button>\n          </Flex>\n        ))}\n      </Flex>\n    </Card>\n  )\n}\n","import React from \"react\";\nimport {Box, Flex, Text} from \"rebass\";\n\nimport {FieldArray, Form, reduxForm} from 'redux-form'\nimport {ReduxFormType} from \"@/components/ui/ReduxForm/types\";\nimport {Input} from \"@/components/ui/ReduxForm/Input\";\nimport {normalizeFertilizer} from \"@/calculator/fertilizer\";\nimport {MACRO_ELEMENT_NAMES, MICRO_ELEMENT_NAMES} from \"@/calculator/constants\";\n\nimport {AddItemElementForm} from \"./AddItemElementForm\";\n\nimport {FERTILIZER_EDIT_FORM_NAME} from \"./constants\";\nimport {AddEditFormType} from \"./types\";\nimport {Checkbox} from \"@/components/ui/ReduxForm/Checkbox\";\nimport {AddEditCompositionList} from \"@/components/Calculator/FertilizerManager/AddEditCompositionList\";\nimport {useFormName, useFormValues} from \"@/hooks/ReduxForm\";\nimport {decimal, number} from \"@/components/ui/ReduxForm/normalizers\";\nimport {Label} from \"@rebass/forms\";\nimport {FertilizerInfo} from \"@/components/Calculator/types\";\n\ninterface AddEditProps {\n  fertilizer?: FertilizerInfo,\n}\n\nexport const getElements = (f: FertilizerInfo) => {\n  return normalizeFertilizer(f, false).elements\n}\n\nexport function getInitialValues(f: FertilizerInfo): AddEditFormType {\n  let formData: AddEditFormType = {...f}\n\n  if (f.composition) {\n    formData.npk = normalizeFertilizer(f, false).elements\n    formData.composition_enable = true\n  }\n  if (f.solution_concentration) {\n    formData.solution_concentration = f.solution_concentration\n    formData.solution_density = f.solution_density || 1000\n    formData.solution_density_enable = true\n  }\n  return formData\n}\n\nexport function formToFertilizer(formValues: AddEditFormType): FertilizerInfo {\n\n  const {\n    composition_enable, composition, npk,\n    solution_density_enable, solution_density, solution_concentration,\n    ..._f\n  } = formValues\n  const f: FertilizerInfo = _f\n  if (composition_enable) {\n    f.composition = composition\n  } else {\n    f.npk = npk\n  }\n  if (solution_density_enable) {\n    f.solution_density = solution_density\n    f.solution_concentration = solution_concentration\n  }\n  return f\n}\n\nconst AddEditForm: ReduxFormType<AddEditProps, AddEditFormType> = (props) => {\n  const formValues = useFormValues<AddEditFormType>(useFormName())[0]\n\n  return (\n    <Form>\n      <Flex flexDirection='column'>\n        <Input name=\"id\" title=\"Name\" label=\"Name\"/>\n        <Box>\n          Макроэлементы\n        </Box>\n        <Flex>\n          {MACRO_ELEMENT_NAMES.map(el => (\n            <AddItemElementForm\n              name={el}\n              disabled={formValues.composition_enable}\n            />\n          ))}\n        </Flex>\n        <Box>\n          Микроэлементы\n        </Box>\n        <Flex>\n          {MICRO_ELEMENT_NAMES.map(el => (\n            <AddItemElementForm\n              name={el}\n              disabled={formValues.composition_enable}\n            />\n          ))}\n        </Flex>\n        <Flex>\n          <Checkbox name=\"composition_enable\" label=\"Формула\"/>\n        </Flex>\n        {formValues.composition_enable ?\n          <Flex>\n            <FieldArray<{}>\n              name=\"composition\"\n              component={AddEditCompositionList}\n            />\n          </Flex> : null\n        }\n        <Flex alignItems='center'>\n          <Box width=\"auto\" marginRight={2}>\n            <Checkbox\n              name=\"solution_density_enable\" label=\"Раствор\"\n            />\n          </Box>\n          {formValues.solution_density_enable ?\n            <Flex flexDirection=\"column\">\n              <Flex alignItems=\"flex-end\">\n                <Label flexDirection=\"column\">\n                  Концентрация\n                  <Input\n                    name=\"solution_concentration\"\n                    type=\"number\"\n                    step=\"0.1\"\n                    min=\"0\"\n                    max=\"3000\"\n                    normalize={decimal}\n                    width='5em'\n                    marginRight={2}\n                  />\n                  <Text sx={{whiteSpace: 'nowrap'}}>г/л</Text>\n                </Label>\n              </Flex>\n              <Flex alignItems=\"flex-end\">\n                <Label flexDirection=\"column\">\n                  Плотность\n                  <Input\n                    name=\"solution_density\"\n                    type=\"number\"\n                    step=\"1\"\n                    min=\"800\"\n                    max=\"3000\"\n                    normalize={number}\n                    width='5em'\n                    marginRight={2}\n                  />\n                </Label>\n                <Text sx={{whiteSpace: 'nowrap'}}>г/л</Text>\n              </Flex>\n            </Flex>\n            : null}\n        </Flex>\n        <Flex>\n            <Label flexDirection=\"column\">\n              Миксер, номер помпы\n              <Input\n                name=\"pump_number\"\n                type=\"number\"\n                step=\"1\"\n                min=\"1\"\n                max=\"16\"\n                required={false}\n                normalize={number}\n                maxWidth={'3em'}\n              />\n            </Label>\n        </Flex>\n      </Flex>\n    </Form>\n  )\n}\n\n\nexport const AddEdit = reduxForm<AddEditFormType>({\n  form: FERTILIZER_EDIT_FORM_NAME,\n  enableReinitialize: true\n})(AddEditForm)\n","import React from \"react\";\nimport {Box, Button, Card, Flex, Text} from \"rebass\";\n\nimport {normalizeFertilizer} from \"@/calculator/fertilizer\";\nimport {FERTILIZER_ELEMENT_NAMES} from \"@/calculator/constants\";\n\nimport {IconButton} from \"@/components/ui/IconButton\";\nimport {Edit} from \"@styled-icons/fa-regular/Edit\"\nimport {Trash} from \"@styled-icons/fa-solid/Trash\";\n\nimport {Element} from \"../FertilizerSelect/SelectedListItem\";\nimport {AddEdit, formToFertilizer, getInitialValues} from './AddEdit';\nimport {Modal, ModalActions} from \"@/components/ui/Modal/Modal\";\nimport {useFormValues} from \"@/hooks/ReduxForm\";\nimport {FERTILIZER_EDIT_FORM_NAME} from \"@/components/Calculator/FertilizerManager/constants\";\nimport {useDispatch} from \"react-redux\";\nimport {fertilizerPush, fertilizerRemove} from \"@/components/Calculator/actions\";\nimport {AddEditFormType} from \"@/components/Calculator/FertilizerManager/types\";\nimport {FertilizerInfo} from \"@/components/Calculator/types\";\n\ninterface ItemProps {\n  fertilizer: FertilizerInfo\n}\n\nexport function Item(props: ItemProps) {\n  const {fertilizer} = props\n  const normalizedFertilizer = normalizeFertilizer(fertilizer, false)\n  const [formValues] = useFormValues<AddEditFormType>(FERTILIZER_EDIT_FORM_NAME)\n  const dispatch = useDispatch()\n  const onRemove = () => {\n    dispatch(fertilizerRemove(fertilizer))\n  }\n  const onSave = (modal: ModalActions) => {\n    dispatch(fertilizerPush(formToFertilizer(formValues)))\n    modal.close()\n  }\n  return (\n    <>\n      <Card width={'auto'} marginBottom={2}>\n        <Flex justifyContent={'space-between'} alignItems=\"center\">\n          <Box flex={1}>\n            <Text flex={1}>\n              {fertilizer.id} &nbsp;\n              {fertilizer.solution_concentration && `[жидкий ${fertilizer.solution_concentration} г/л]`} &nbsp;\n              <span title={\"Номер помпы в миксере\"}>{fertilizer.pump_number && `p${fertilizer.pump_number}`}</span> &nbsp;\n            </Text>\n            <Flex>\n              {\n                FERTILIZER_ELEMENT_NAMES.map((name) => {\n                    let v = normalizedFertilizer.elements[name]\n                    if (!v) {\n                      return null\n                    }\n                    return <Element\n                      name={name}\n                      key={name}\n                      value={v}\n                      isOxide\n                    />\n                  }\n                )\n              }\n            </Flex>\n          </Box>\n          <Flex>\n            <Modal\n              button={({modal}) => (\n                <IconButton\n                  padding={1}\n                  alignSelf=\"center\"\n                  component={Edit}\n                  backgroundColor={'primary'}\n                  onClick={modal.open}\n                />\n              )}\n              container={({modal}) => (\n                <>\n                <AddEdit\n                  initialValues={getInitialValues(fertilizer)}\n                />\n                  <Flex justifyContent=\"flex-end\">\n                    <Button type=\"button\" onClick={() => onSave(modal)}>Save</Button>\n                  </Flex>\n                </>\n              )}\n            />\n            <IconButton\n              padding={1}\n              alignSelf=\"center\"\n              component={Trash}\n              backgroundColor={'danger'}\n              onClick={onRemove}\n            />\n          </Flex>\n        </Flex>\n      </Card>\n    </>\n  )\n}\n","import React, {ChangeEvent, createRef, useEffect, useState} from \"react\";\nimport {Import} from \"@styled-icons/boxicons-regular/Import\"\nimport {IconButton} from \"@/components/ui/IconButton\";\nimport {csvParse} from \"@/utils/csv\";\nimport {FERTILIZER_ELEMENT_NAMES} from \"@/calculator/constants\";\nimport {buildNPKFertilizer} from \"@/calculator/fertilizer\";\nimport {useDispatch} from \"react-redux\";\nimport {fertilizerPush} from \"@/components/Calculator/actions\";\n\ninterface ImportFertilizersProps {\n}\n\nconst COLUMNS = ['id', ...FERTILIZER_ELEMENT_NAMES]\n\nexport function ImportFertilizers(props: ImportFertilizersProps) {\n  const buttonRef = createRef<HTMLButtonElement>()\n  const dispatch = useDispatch()\n  const [size, setSize] = useState({width: 0, height: 0})\n  useEffect(() => {\n    const newSize = {\n      width: buttonRef.current?.offsetWidth || 0,\n      height: buttonRef.current?.offsetHeight || 0,\n    }\n    if (size.width !== newSize.width) {\n      setSize(newSize)\n    }\n  }, [buttonRef, size.width])\n\n  const loadCSV = (csv: string) => {\n    const p = csvParse(csv, {columns: COLUMNS})\n    if (isNaN(parseInt(p[0].P))) {\n      p.splice(0, 1)\n    }\n    for (let {id, ...npk} of p) {\n      const f = buildNPKFertilizer(id, npk)\n      dispatch(fertilizerPush(f))\n    }\n  }\n\n  const handleOnChange = (e: ChangeEvent<HTMLInputElement>) => {\n    console.log(e.target.value, e.target.files?.[0])\n    const file = e.target.files?.[0]\n    if (!file) {\n      return file\n    }\n    let reader = new FileReader();\n    reader.onload = () => {\n      console.log(reader.result)\n      loadCSV(reader.result as string)\n\n    }\n    reader.readAsText(file)\n\n  }\n  return (\n    <>\n      <IconButton\n        sx={{\n          position: \"relative\"\n        }}\n        ref={buttonRef}\n        component={Import}\n      >\n        <input type=\"file\"\n               accept=\"text/csv, .csv\"\n               onChange={event => handleOnChange(event)}\n               style={{\n                 top: 0,\n                 left: 0,\n                 position: \"absolute\",\n                 opacity: 0,\n                 ...size,\n               }}\n        />\n      </IconButton>\n    </>\n  )\n}\n","import React from \"react\";\nimport {Export} from \"@styled-icons/boxicons-regular/Export\"\nimport {IconButton} from \"@/components/ui/IconButton\";\nimport {useSelector} from \"react-redux\";\nimport {CalculatorState} from \"@/components/Calculator/types\";\nimport {normalizeFertilizer} from \"@/calculator/fertilizer\";\nimport {FERTILIZER_ELEMENT_NAMES} from \"@/calculator/constants\";\nimport {csvExport} from \"@/utils/csv\";\nimport {saveData} from \"@/utils/downloads\";\n\ninterface ExportFertilizersProps {\n}\n\nexport function ExportFertilizers(props: ExportFertilizersProps) {\n  const {\n    fertilizers,\n  } = useSelector<any>(state => state.calculator) as CalculatorState\n  const doExport = () => {\n    const npkFertilizer = fertilizers.map(f => normalizeFertilizer(f, false))\n    const rows = npkFertilizer.map(f => {\n      const cols = FERTILIZER_ELEMENT_NAMES.map(n => f.elements[n])\n      return [f.id, ...cols]\n    })\n    const csvData = csvExport(rows, {columns: ['Удобрение', ...FERTILIZER_ELEMENT_NAMES], header: true})\n    saveData(csvData, \"Удобрения.csv\")\n  }\n  return (\n    <>\n      <IconButton onClick={doExport} component={Export}/>\n    </>\n  )\n}\n","import React from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {CalculatorState} from \"@/components/Calculator/types\";\nimport {Box, Button, Card, Flex, Heading} from \"rebass\";\nimport {ReactSortable} from \"react-sortablejs\";\n\nimport {Item} from \"./Item\";\nimport {fertilizerPush, fertilizerReset, fertilizerSet} from \"@/components/Calculator/actions\";\nimport {Modal, ModalActions} from \"@/components/ui/Modal/Modal\";\nimport {IconButton} from \"@/components/ui/IconButton\";\nimport {Plus} from \"@styled-icons/boxicons-regular/Plus\";\nimport {AddEdit, formToFertilizer, getInitialValues} from \"@/components/Calculator/FertilizerManager/AddEdit\";\nimport {useFormValues} from \"@/hooks/ReduxForm\";\nimport {AddEditFormType} from \"@/components/Calculator/FertilizerManager/types\";\nimport {FERTILIZER_EDIT_FORM_NAME} from \"@/components/Calculator/FertilizerManager/constants\";\nimport {ImportFertilizers} from \"@/components/Calculator/ImportExport/ImportFertilizers\";\nimport {ExportFertilizers} from \"@/components/Calculator/ImportExport/ExportFertilizers\";\nimport {Restart} from \"@styled-icons/remix-line/Restart\";\n\ninterface ListProps {\n}\n\nexport function List(props: ListProps) {\n  const {\n    fertilizers,\n  } = useSelector<any>(state => state.calculator) as CalculatorState\n  const [formValues] = useFormValues<AddEditFormType>(FERTILIZER_EDIT_FORM_NAME)\n  const dispatch = useDispatch()\n\n  function onAdd(modal: ModalActions) {\n    dispatch(fertilizerPush(formToFertilizer(formValues)))\n    modal.close()\n  }\n\n  return (\n    <Flex flexDirection='column'>\n      <Flex>\n        <Modal\n          button={({modal}) => (\n            <IconButton\n              padding={1}\n              alignSelf=\"center\"\n              component={Plus}\n              backgroundColor={'primary'}\n              onClick={modal.open}\n            />\n          )}\n          container={({modal}) => (\n            <>\n              <AddEdit\n                initialValues={getInitialValues({id: ''})}\n              />\n              <Flex justifyContent=\"flex-end\">\n                <Button type=\"button\" onClick={() => onAdd(modal)}>Save</Button>\n              </Flex>\n            </>\n          )}\n        />\n      </Flex>\n      <ReactSortable list={fertilizers} setList={newList => dispatch(fertilizerSet(newList))}>\n        {fertilizers.map(f => (\n          <Item fertilizer={f} key={f.id}/>\n        ))}\n      </ReactSortable>\n      <Card>\n        <Heading fontSize={2}>Импорт/Экспорт</Heading>\n        <Flex flexDirection=\"column\" p={3}>\n          <Flex alignItems='center'\n                paddingBottom={2}\n                justifyContent=\"space-between\"\n                flexWrap=\"wrap\"\n          >\n            <Box sx={{\n              \"&>*\": {\n                marginLeft: 1\n              }\n            }}>\n              <ImportFertilizers/>\n              <ExportFertilizers/>\n              <IconButton\n                component={Restart}\n                onClick={() => dispatch(fertilizerReset())}\n              />\n            </Box>\n          </Flex>\n        </Flex>\n      </Card>\n    </Flex>\n  )\n}\n","import {List as FertilizerManager} from './List'\n\nexport {List as FertilizerManager} from './List'\n\nexport default FertilizerManager\n"],"sourceRoot":""}