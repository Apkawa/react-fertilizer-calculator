{"version":3,"sources":["components/ui/IconButton.tsx","components/ui/ReduxForm/normalizers.ts","components/ui/ReduxForm/Input.tsx","hooks/ReduxForm.ts","components/Calculator/FertilizerSelect/SelectedListItem.tsx","components/ui/ReduxForm/Checkbox.tsx","components/ui/Dropdown/context.ts","components/ui/Dropdown/DropdownItem.tsx","components/ui/Dropdown/DropdownList.tsx","components/ui/Dropdown/Dropdown.tsx","components/ui/Modal/ModalContainer.tsx","components/ui/Modal/Modal.tsx","components/Calculator/FertilizerSelect/AddItem.tsx","components/Calculator/FertilizerSelect/SelectedList.tsx","components/Calculator/FertilizerSelect/Container.tsx","components/Calculator/FertilizerSelect/index.ts","components/ui/ReduxForm/validators.ts","components/Calculator/Options/IgnoreElement.tsx","components/ui/ReduxForm/Radio.tsx","components/Calculator/Options/Accuracy.tsx","components/Calculator/Options/Solution.tsx","components/Calculator/Options/Dilution.tsx","components/Calculator/Options/Options.tsx","components/Calculator/Options/RecipeElementForm.tsx","components/Calculator/Options/RecipeTuneForm.tsx","components/Calculator/Options/Recipe.tsx","components/Calculator/Result/ResultFertilizerList.tsx","components/Calculator/Result/hooks.ts","calculator/dilution.ts","components/Calculator/Result/ResultDilution.tsx","components/Calculator/Result/Result.tsx","utils/csv.ts","components/Calculator/ImportExport/ImportFertilizers.tsx","utils/downloads.ts","components/Calculator/ImportExport/ExportFertilizers.tsx","components/Calculator/ImportExport/ExportRecipes.tsx","components/Calculator/ImportExport/ImportRecipes.tsx","components/ui/styled.ts","components/Calculator/index.tsx"],"names":["IconButton","forwardRef","props","buttonRef","IconComponent","component","size","children","extraProps","useState","containerSize","setSize","theme","useTheme","useEffect","current","offsetWidth","type","ref","color","colors","background","number","value","parseInt","decimal","parseFloat","StyledInput","styled","RebassInput","WrappedInput","input","label","lang","placeholder","Input","name","useFormName","useContext","ReduxFormContext","form","useFormValues","formName","dispatch","useDispatch","useSelector","state","getFormValues","change","Element","delta","bg","flex","mx","px","minWidth","maxWidth","fontSize","flexDirection","alignItems","round","SelectedListItem","item","onRemove","weight","normalizedFertilizer","normalizeFertilizer","width","justifyContent","id","FERTILIZER_ELEMENT_NAMES","map","v","elements","key","margin","textAlign","volume","title","liquid_weight","padding","alignSelf","Cross","onClick","WrappedCheckbox","checked","Checkbox","DropdownContext","React","createContext","ItemContainer","sx","position","zIndex","backgroundColor","content","left","top","opacity","height","StyledItemBox","Box","disabled","css","DropdownItem","index","ctx","onItemClick","checkDisabledItem","renderItem","DropdownList","items","itemRef","useRef","setHeight","offsetHeight","maxHeight","overflowY","Array","from","s","i","length","style","IconDown","ChevronDownSquare","text","Dropdown","renderValue","opened","setOpened","setItem","setValue","editing","setEditing","containerRef","handleClickOutside","event","contains","target","document","addEventListener","removeEventListener","onClickItemHandler","onChange","context","Provider","val","onKeyDown","stopPropagation","onEdit","onBlur","right","StyledOverlay","Flex","window","pageYOffset","ModalContainer","modalRoot","el","querySelector","createElement","setAttribute","body","appendChild","useModalRoot","ReactDOM","createPortal","Helmet","Modal","button","container","closed","setClose","onClose","modalActions","open","close","renderCbProps","modal","Icon","AddItem","onAdd","fertilizers","calculator","calculationForm","selected","setSelected","fertilizersIDs","f","pr","includes","onAddHandler","Plus","SelectedList","fields","error","meta","result","calculatedFertilizersWeights","Object","fromEntries","push","marginTop","remove","Container","FieldArray","validate","message","IgnoreElement","Radio","normalize","toString","ACCURACY_VARIANTS","Accuracy","a","Solution","htmlFor","step","min","pattern","autoComplete","paddingTop","max","Dilution","dilution_enabled","REDUX_FORM_NAME","display","Options","my","marginLeft","getRecipeFieldName","RecipeElementForm","ELEMENT_IN_MATRIX","ALLOWED_ELEMENT_IN_MATRIX","filter","RecipeTuneForm","formValue","recipe","setRecipe","recipeInfo","calculateNPKBalance","ratio","setRatio","EC","setEC","onChangeRecipe","onChangeRatio","El1","El2","newNpk","convertProfileWithRatio","convertProfileWithEC","MACRO_ELEMENT_NAMES","RecipeInput","ion_balance","NH4","NO3","K","Mg","Ca","N","P","el2","MICRO_ELEMENT_NAMES","onSave","e","StyledBalanceCell","m","Recipe","recipes","values","NPKBalance","getEmptyElements","entries","zeroValues","recipeRemove","onRemoveItemHandler","marginRight","Save","recipePush","Broom","n","Tune","ResultFertilizerList","accuracy","countDecimals","usePPM","solution_volume","fertilizerWeights","calculatePPM","useFertilizerSolutionGroup","fertilizersWeights","fertilizerWeightsMap","toMap","groups","nf","A","S","B","C","groupFertilizerBySolution","sort","ResultDilution","solution_concentration","dilution_volume","dilution_concentration","fertilizerWeightGroups","ppm","dilution","sources","concentration","dilution_solution","d","ppmToEC","StyledList","ul","Result","score","deltaElements","liquidFertilizersVolume","sum","k","score_display","getScoreDisplay","g","f_weights","stats","count","time","csvParse","parse","csvExport","stringify","COLUMNS","ImportFertilizers","createRef","newSize","handleOnChange","console","log","files","file","reader","FileReader","onload","csv","p","columns","isNaN","splice","npk","buildNPKFertilizer","fertilizerPush","loadCSV","readAsText","Import","accept","saveData","data","fileName","blob","Blob","url","URL","createObjectURL","href","download","click","revokeObjectURL","ExportFertilizers","rows","cols","csvData","header","Export","ExportRecipes","ImportRecipes","mobileStyles","styles","initialValues","DEFAULT_RECIPES","DEFAULT_MICRO_RECIPE","Cl","CalculatorContainer","handleSubmit","Form","onSubmit","calculateStart","FertilizerSelect","marginBottom","paddingBottom","flexWrap","Restart","fertilizerReset","recipeReset","InitializerCalculator","reduxForm","enableReinitialize","ReduxCalculator","connect","formValues"],"mappings":"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","file":"static/js/6.1452e8ec.chunk.js","sourcesContent":["import React, {forwardRef, MouseEventHandler, PropsWithChildren, useEffect, useState} from \"react\";\nimport {Button, ButtonProps} from \"rebass\";\nimport {EmotionIcon} from '@emotion-icons/emotion-icon'\n\nimport {useTheme} from \"emotion-theming\";\nimport {Theme} from \"@/themes/types\";\n\n\ninterface IconButtonProps extends\n  PropsWithChildren<Omit<ButtonProps, keyof React.HTMLProps<HTMLButtonElement>>> {\n  component: EmotionIcon,\n  disabled?: boolean,\n  onClick?: MouseEventHandler<HTMLButtonElement>,\n  size?: number | string\n}\n\nexport const IconButton = forwardRef<HTMLButtonElement, IconButtonProps>(\n  (props, buttonRef) => {\n    const {\n      component: IconComponent,\n      size = \"1.5em\",\n      children,\n      ...extraProps\n    } = props\n    const [containerSize, setSize] = useState<number | string>(size || 0)\n    const theme = useTheme<Theme>()\n\n    useEffect(() => {\n      if (!size && buttonRef && 'current' in buttonRef) {\n        setSize(buttonRef.current?.offsetWidth || 0)\n      }\n    }, [buttonRef, setSize, size])\n\n    return (\n      <Button type=\"button\" {...extraProps} ref={buttonRef}>\n        <IconComponent\n          color={theme.colors?.background}\n          size={containerSize}\n        />\n        {children}\n      </Button>\n    )\n  })\n","\n\nexport function number(value: any) {\n  return value && parseInt(value)\n}\n\nexport function decimal(value: any) {\n  return value && parseFloat(value)\n}\n","import React from \"react\";\nimport {Field as ReduxField} from \"redux-form\";\n\nimport {Input as RebassInput, InputProps as RebassInputProps} from \"@rebass/forms\";\nimport {ReduxFormComponentType, WrapperInputType} from \"./types\";\nimport styled from \"styled-components\";\n\ninterface InputProps extends RebassInputProps {\n  label?: string\n}\n\nexport const StyledInput = styled(RebassInput)`\n  ::-webkit-inner-spin-button, ::-webkit-outer-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n  }\n  -moz-appearance: textfield;\n\n`\n\nexport const WrappedInput: WrapperInputType<InputProps> = ({input, label, type = \"text\", ...props}: any) =>\n  <StyledInput  {...props}\n                {...input}\n                type={type}\n                lang=\"en-US\"\n                placeholder={label}\n  />\n\n\n// TODO вывести тип\nexport const Input: ReduxFormComponentType<InputProps> = (\n  {\n    name,\n    ...props\n  }) => {\n\n  return (\n    <ReduxField\n      component={WrappedInput}\n      name={name}\n      {...props as any}\n    />\n  )\n}\n","import {useContext} from 'react'\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {change, FormContext, getFormValues, ReduxFormContext} from \"redux-form\";\n\nexport function useReduxForm(): FormContext {\n  return useContext(ReduxFormContext)\n}\n\nexport function useFormName(): string {\n  return useReduxForm().form\n}\n\nexport function useFormValues<FormValues=object>(formName: string): [FormValues, (name: string, value: any) => void] {\n  const dispatch = useDispatch()\n  const values = useSelector(state => getFormValues(formName)(state)) as FormValues\n\n  const setValue = (name: string, value: any) => {\n    dispatch(change(formName, name, value))\n  }\n  return [\n    values,\n    setValue\n    ]\n}\n","import React, {FunctionComponent} from \"react\";\nimport {Box, Card, Flex, Text} from \"rebass\";\nimport {Cross} from \"@styled-icons/entypo/Cross\"\nimport {FertilizerType} from \"./types\";\nimport {normalizeFertilizer} from \"@/calculator/fertilizer\";\nimport {FERTILIZER_ELEMENT_NAMES} from \"@/calculator/constants\";\nimport {IconButton} from \"../../ui/IconButton\";\nimport {round} from \"@/utils\";\nimport {FertilizerWeights} from \"@/calculator\";\n\ninterface ElementProps {\n  name: string,\n  value: number,\n  delta?: number,\n}\n\nexport const Element: FunctionComponent<ElementProps> = (props) => {\n  const {name, value, delta} = props\n  return (\n    <Box bg={name} flex={1} mx=\"2px\" px={1} color={'black'} minWidth=\"2.1em\" maxWidth=\"3em\" fontSize={1}>\n      <Flex flexDirection='column' alignItems={'center'}>\n        <Box>{name}</Box>\n        <Box>{round(value, 1)}</Box>\n        {typeof delta !== \"undefined\" ? <Box>{delta}</Box> : null}\n      </Flex>\n    </Box>\n  )\n}\n\ninterface SelectedListItemProps {\n  item: FertilizerType,\n  onRemove: () => void,\n  weight?: FertilizerWeights,\n}\n\n\nexport const SelectedListItem: FunctionComponent<SelectedListItemProps> = ({item, onRemove, weight}) => {\n  const normalizedFertilizer = normalizeFertilizer(item, false)\n  return (\n    <Card width={'auto'}>\n      <Flex justifyContent={'space-between'} alignItems=\"center\">\n        <Box flex={1}>\n          <Text flex={1}>\n            {item.id}\n          </Text>\n          <Flex>\n            {\n              FERTILIZER_ELEMENT_NAMES.map((name) => {\n                  let v = normalizedFertilizer.elements[name]\n                  if (!v) {\n                    return null\n                  }\n                  return <Element\n                    name={name}\n                    key={name}\n                    value={v}\n                  />\n                }\n              )\n            }\n          </Flex>\n        </Box>\n        <Flex>\n          <Flex alignItems=\"center\" justifyContent=\"center\" margin={1}>\n            {weight ? (\n              <Text textAlign=\"center\" minWidth=\"3em\">\n                {weight.weight}г\n                {weight.volume ? (\n                  <>\n                    <br/>\n                    <span\n                      title=\"Объем или вес раствора\">{weight.volume && `${weight.volume} мл${weight.liquid_weight? `, ${weight.liquid_weight}г`:''}`}</span>\n                  </>\n                ) : null}\n              </Text>\n            ) : null}\n          </Flex>\n          <IconButton\n            padding={1}\n            alignSelf=\"center\"\n            component={Cross}\n            onClick={() => onRemove()}\n          />\n        </Flex>\n      </Flex>\n    </Card>\n  )\n}\n","import React from \"react\";\n\nimport {Checkbox as RebassCheckbox, CheckboxProps as RebassCheckboxProps, Label} from \"@rebass/forms\";\nimport {Field as ReduxField} from \"redux-form\";\nimport {ReduxFormComponentType, WrapperInputType} from \"./types\";\n\ninterface CheckboxProps extends RebassCheckboxProps {\n  label: string\n}\n\nconst WrappedCheckbox: WrapperInputType<CheckboxProps> = ({input, label, ...props}: any) =>\n  <Label>\n    <RebassCheckbox\n      {...props} {...input}\n      checked={input.value}\n    />\n    {label}\n  </Label>\n\n// TODO вывести тип\nexport const Checkbox: ReduxFormComponentType<CheckboxProps> = ({name, ...props}) => {\n  return (\n    <ReduxField\n      component={WrappedCheckbox}\n      name={name}\n      {...props as any}\n    />\n  )\n}\n\n","import React, {Context} from \"react\";\nimport {ItemCallback, RenderItemCallback} from \"./types\";\n\n// TODO  сделать генерик\nexport interface DropdownContextInterface<T=any> {\n  onItemClick?: ItemCallback<T>,\n  renderItem?: RenderItemCallback<T>\n  checkDisabledItem?: ItemCallback<T,  boolean>,\n}\n\nexport type DropdownContext<T> = Context<DropdownContextInterface<T>>\nexport const DropdownContext: DropdownContext<any> = React.createContext({})\n\n\n","import React, {FunctionComponent, useContext} from \"react\";\nimport {Box, Flex} from \"rebass\";\n// import styled from '@emotion/styled'\nimport {DropdownContext} from \"./context\";\nimport styled, {css} from \"styled-components\";\n\ninterface DropdownItemProps<T> {\n  value: T,\n  index: number,\n}\n\n\nconst ItemContainer: FunctionComponent = ({\n                                            children,\n                                          }) => {\n  return <Flex\n    padding={2}\n    sx={{\n      position: \"relative\",\n      zIndex: 1,\n      '&::before': {\n        backgroundColor: 'highlight',\n        content: '\"\"',\n        position: \"absolute\",\n        left: 0,\n        top: 0,\n        opacity: 0,\n        width: '100%',\n        height: '100%',\n        zIndex: -1,\n      },\n      '&:hover::before': {\n        opacity: 0.1,\n        // boxShadow: \"inset 0 0 0 99999px rgba(0,0,0,0.1)\"\n      }\n    }}\n  >\n    {children}\n  </Flex>\n\n}\n\nconst StyledItemBox = styled(Box)`\n  ${props => props.disabled \n    && css`\n      pointer-events: none;\n      opacity: 0.4;\n  `}\n\n`\n\nexport function DropdownItem<T>(props: DropdownItemProps<T>) {\n  const {value, index} = props;\n  const ctx = useContext(DropdownContext);\n\n  const renderItem = () => {\n    if (ctx.renderItem) {\n      return <ctx.renderItem item={value} index={index} />\n    }\n    return (value + '')\n  }\n\n  const onItemClickHandler = () => {\n    if (ctx.onItemClick) {\n      ctx.onItemClick(value)\n    }\n  }\n\n  return (\n    <StyledItemBox\n      onClick={onItemClickHandler}\n      disabled={ctx.checkDisabledItem && ctx.checkDisabledItem(value)}\n    >\n      <ItemContainer>\n        {renderItem()}\n      </ItemContainer>\n    </StyledItemBox>\n  )\n}\n","import React, {useEffect, useRef, useState} from \"react\";\nimport {Box, Card, Flex} from \"rebass\";\nimport {DropdownItem} from \"./DropdownItem\";\n\ninterface DropdownListProps<T> {\n  items: T[],\n}\n\nexport function DropdownList<T>(props: DropdownListProps<T>) {\n  const items = props.items\n\n  const itemRef = useRef<HTMLDivElement>()\n  const [height, setHeight] = useState(0)\n\n  useEffect(() => {\n    setHeight(itemRef?.current?.offsetHeight || 0)\n  }, [itemRef])\n\n  return (\n    <Card\n      backgroundColor={\"background\"}\n      padding={0}\n      maxHeight={height * 5}\n      overflowY={'auto'}\n      sx={{zIndex: 3}}\n    >\n      <Flex flexDirection=\"column\">\n        {Array.from(items).map((s, i) => {\n          return (\n            <Box ref={i === 0 ? itemRef: null}>\n              <DropdownItem<T>\n                value={s}\n                index={i}\n                key={i}\n              />\n              {i < items.length - 1 ? <hr style={{margin: 0}}/> : null}\n            </Box>\n          )\n        })}\n      </Flex>\n    </Card>\n  )\n}\n","import React, {ChangeEvent, KeyboardEvent, useEffect, useRef, useState} from \"react\";\nimport {Input} from \"@rebass/forms\";\nimport {Box, Flex} from \"rebass\";\nimport styled from '@emotion/styled'\nimport {ChevronDownSquare} from '@emotion-icons/boxicons-solid/ChevronDownSquare'\nimport {DropdownList} from \"./DropdownList\";\nimport {DropdownContext, DropdownContextInterface} from \"./context\";\nimport {ItemCallback, ItemType, RenderItemCallback, RenderValueCallback} from \"./types\";\n\nconst IconDown = styled(ChevronDownSquare)`\n  color: ${(props: any) => props.theme.colors.text};\n  height: 3rem;\n  opacity: 0.5;\n  \n  &:hover {\n    opacity: 0.7;\n  }\n`\n\nexport interface DropdownProps<T> {\n  value?: ItemType<T>,\n  items: T[],\n  renderValue?: RenderValueCallback<T>,\n  renderItem?: RenderItemCallback<T>,\n  checkDisabledItem?: ItemCallback<T,  boolean>,\n\n  onEdit?: (value: string) => void,\n  onChange?: (item: ItemType<T>) => void,\n  width?: number\n}\n\nexport function Dropdown<T>(props: DropdownProps<T>) {\n  const {width} = props\n  const renderValue: RenderValueCallback<T> = item => {\n    if (props.renderValue) {\n      return props.renderValue(item)\n    }\n    return (item || '') + ''\n  }\n\n  const [opened, setOpened] = useState(false)\n  const [item, setItem] = useState(props.value || null)\n  const [value, setValue] = useState(renderValue(props.value || null))\n  const [editing, setEditing] = useState(false)\n  const containerRef = useRef<HTMLDivElement>()\n\n  useEffect(() => {\n    function handleClickOutside(event: MouseEvent) {\n      if (containerRef.current\n        && !containerRef.current.contains(event.target as any)) {\n        setOpened(false)\n      }\n    }\n\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, [containerRef])\n\n  const onClickItemHandler = (item: ItemType<T>) => {\n    setItem(item)\n    setValue(renderValue(item))\n\n    props.onChange && props.onChange(item)\n    setEditing(false)\n    setOpened(false)\n  }\n  const onChangeInputHandler = (event: ChangeEvent<HTMLInputElement>) => {\n    const val = event.target.value\n    setValue(val)\n    setEditing(true)\n    setOpened(false)\n  }\n\n  const onKeyDownInputHandler = (event: KeyboardEvent<HTMLInputElement>) => {\n    event.stopPropagation()\n    if (event.key === 'Enter') {\n      props.onEdit && props.onEdit(value)\n    }\n    if (event.key === 'Escape') {\n      onClickItemHandler(item)\n    }\n  }\n\n  const onBlurInputHandler = () => {\n    if (editing) {\n      value && props.onEdit && props.onEdit(value)\n    }\n  }\n\n  const context: DropdownContextInterface<T> = {\n    onItemClick: onClickItemHandler,\n    renderItem: props.renderItem,\n    checkDisabledItem: props.checkDisabledItem,\n  }\n\n  return (\n    <DropdownContext.Provider value={context}>\n      <Flex flexDirection=\"column\" width={width} ref={containerRef}>\n        <Flex sx={{position: 'relative'}}>\n          <Input\n            value={value}\n            onChange={onChangeInputHandler}\n            onKeyDown={onKeyDownInputHandler}\n            onBlur={onBlurInputHandler}\n          />\n          <Box\n            sx={{\n              position: \"absolute\",\n              right: 0\n            }}\n          >\n            <IconDown\n              onClick={() => setOpened(!opened)}\n            />\n          </Box>\n        </Flex>\n        <Flex sx={{position: 'relative'}}>\n          <Flex sx={{position: \"absolute\"}}\n                flexDirection=\"column\"\n                width=\"100%\"\n          >\n            {opened && <DropdownList<T> items={props.items}/>}\n          </Flex>\n        </Flex>\n      </Flex>\n    </DropdownContext.Provider>\n  )\n}\n","import React, {ReactNode} from \"react\";\nimport ReactDOM from 'react-dom'\nimport {Card, Flex} from \"rebass\";\nimport styled from '@emotion/styled'\nimport {Helmet} from \"react-helmet\";\n\n\ninterface ModalContainerProps {\n  children: ReactNode,\n}\n\nconst useModalRoot = () => {\n  let el = document.querySelector('#modal-root')\n  if (!el) {\n    el = document.createElement('div')\n    el.setAttribute('id', 'modal-root')\n    document.body.appendChild(el)\n  }\n  return el\n}\n\nconst StyledOverlay = styled(Flex)`\n  overflow-y: auto;\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  top: ${() => `${window.pageYOffset}px`};\n  left: 0;\n  justify-content: center;\n  align-items: center;\n  background-color: rgba(255, 255, 255, 0.5);\n  z-index: 999;\n  \n  // Mobile\n  @media screen and (max-height: 500px), screen and (max-width: 500px) {\n    align-items: initial;\n  }\n`\n\nexport function ModalContainer(props: ModalContainerProps) {\n  const {\n    children,\n  } = props\n  const modalRoot = useModalRoot()\n  return ReactDOM.createPortal(\n    <>\n      <Helmet>\n        <style type='text/css'>\n          {`\n          body {\n            overflow: hidden;\n          }\n        `}\n        </style>\n      </Helmet>\n      <StyledOverlay>\n        <Card backgroundColor='#fff' height=\"max-content\">\n          {children}\n        </Card>\n      </StyledOverlay>\n    </>\n    , modalRoot)\n}\n","import React, {ReactNode, useEffect, useState} from \"react\";\nimport {ModalContainer} from \"@/components/ui/Modal/ModalContainer\";\nimport {Box, Flex, Heading} from \"rebass\";\nimport {Icon} from \"@/components/ui/Icon\";\nimport {Cross} from \"@styled-icons/entypo/Cross\";\n\nexport interface ModalActions {\n  open: () => void,\n  close: () => void,\n}\n\ntype RenderCb = (props: {modal: ModalActions}) => ReactNode\n\ninterface ModalProps {\n  opened?: boolean,\n  onClose?: () => void,\n  button?: RenderCb,\n  title?: string,\n  container: RenderCb,\n}\n\nexport function Modal(props: ModalProps) {\n  const {\n    opened = false,\n    button,\n    container,\n  } = props\n\n  const [closed, setClose] = useState(!opened)\n\n  useEffect(() => {\n    setClose(!opened)\n  }, [opened])\n\n  useEffect(() => {\n    if (closed && props.onClose) {\n      props.onClose()\n    }\n  }, [closed, props])\n\n  const modalActions: ModalActions = {\n    open: () => setClose(false),\n    close: () => setClose(true),\n  }\n  const renderCbProps = {modal: modalActions}\n\n  return (\n    <>\n      {button && button(renderCbProps)}\n      {closed ? null : <ModalContainer>\n        <Flex justifyContent='space-between'>\n          <Heading fontSize={2}>{props.title}</Heading>\n          <Icon component={Cross} onClick={modalActions.close}/>\n        </Flex>\n        <Box>\n          {container(renderCbProps)}\n        </Box>\n      </ModalContainer>\n      }\n    </>\n  )\n}\n","import React, {FunctionComponent, useState} from \"react\";\nimport {Box, Card, Flex} from \"rebass\";\nimport {FertilizerType} from \"./types\";\nimport {Dropdown} from \"@/components/ui/Dropdown/Dropdown\";\nimport {Plus} from \"@styled-icons/boxicons-regular/Plus\"\n\nimport {useSelector} from \"react-redux\";\nimport {CalculatorState} from \"../types\";\nimport {IconButton} from \"@/components/ui/IconButton\";\nimport {FertilizerInfo} from \"@/calculator/types\";\n\ninterface AddItemProps {\n  onAdd: (item: FertilizerType) => void\n}\n\n\nexport const AddItem: FunctionComponent<AddItemProps> = ({onAdd}) => {\n  const {\n    fertilizers,\n  } = useSelector<any>(state => state.calculator) as CalculatorState\n  const {\n    calculationForm,\n  } = useSelector<any>(state => state.calculator) as CalculatorState\n\n  const [selected, setSelected] = useState<FertilizerInfo | undefined>(fertilizers[0])\n\n  const selectedFertilizers = calculationForm?.fertilizers || [];\n  const fertilizersIDs = selectedFertilizers.map(f => f?.id)\n\n  const onChangeHandler = (item: FertilizerInfo | null) => {\n    item && setSelected(item)\n  }\n\n\n  const onAddHandler = (item: FertilizerInfo) => {\n    onAdd(item)\n  }\n  return (\n    <Card>\n      <Flex flexDirection=\"column\">\n        <Flex justifyContent=\"space-between\">\n          <Box flex={1} pr={2}>\n            <Dropdown<FertilizerInfo>\n              value={selected}\n              items={fertilizers}\n              onChange={onChangeHandler}\n              checkDisabledItem={item => fertilizersIDs.includes(item?.id || \"\")}\n              renderItem={({item}) => (\n                <Flex flex={1} justifyContent=\"space-between\">\n                  <Box>\n                    {item.id}\n                  </Box>\n                  <IconButton\n                    onClick={(event) => {\n                      event.stopPropagation()\n                      onAddHandler(item)\n                    }}\n                    component={Plus}\n                  />\n                </Flex>\n              )}\n              renderValue={item => item?.id || \"\"}\n            />\n          </Box>\n        </Flex>\n      </Flex>\n\n    </Card>\n  )\n}\n\n","import React from \"react\";\nimport {Flex} from \"rebass\";\nimport {SelectedListItem} from \"./SelectedListItem\";\nimport {AddItem} from \"./AddItem\";\nimport {ReduxFieldArrayType} from \"../../ui/ReduxForm/types\";\nimport {FertilizerType} from \"./types\";\nimport {CalculatorState} from \"../types\";\nimport {useSelector} from \"react-redux\";\n\ninterface SelectedListProps {\n}\n\nexport const SelectedList: ReduxFieldArrayType<SelectedListProps, FertilizerType> = (\n  {fields, meta: {error}}) => {\n  const {\n    calculationForm,\n    result,\n  } = useSelector<any>(state => state.calculator) as CalculatorState\n  const fertilizers = calculationForm?.fertilizers || [];\n\n  const calculatedFertilizersWeights = Object.fromEntries((result?.fertilizers || []).map(f => [f.id, f]))\n\n  const onAddHandler = (item: FertilizerType) => {\n    for (let f of fertilizers) {\n      if (f.id === item.id) {\n        return\n      }\n    }\n    fields.push(item)\n  }\n  return (\n    <Flex sx={{flexDirection: 'column'}} width='auto'>\n      <AddItem onAdd={onAddHandler}/>\n      <Flex sx={{\n        flexDirection: 'column',\n        '& > *': {\n          marginTop: '8px !important',\n        }\n      }}>\n        {error ? <span>{error}</span> : null}\n        {fertilizers.map((item, index) =>\n          <SelectedListItem\n            item={item}\n            key={item.id}\n            weight={calculatedFertilizersWeights[item.id]}\n            onRemove={() => fields.remove(index)}\n          />\n        )}\n      </Flex>\n    </Flex>\n  )\n}\n","import React from \"react\";\nimport {SelectedList} from \"./SelectedList\";\nimport {FieldArray} from \"redux-form\";\nimport {required} from \"../../ui/ReduxForm/validators\";\n\n\nexport const Container = () => {\n  return (\n    <FieldArray<{}>\n      name={\"fertilizers\"}\n      component={SelectedList}\n      validate={required(\"Выберите удобрения\")}\n    />\n  )\n}\n\n","import {Container} from \"./Container\";\n\nexport default Container\n","\ntype ValidatorCallback = {\n  (value: any): void|string\n}\n\nexport function pattern(pattern: RegExp|string, message?: string): ValidatorCallback {\n  message = message || 'Значение должно соответствовать регулярному выражению'\n  return (value) => {\n    pattern = new RegExp(pattern) as RegExp\n    if (pattern.test(value)) {\n      return message\n    }\n  }\n}\n\nexport function minLength(length: number, message?: string): ValidatorCallback {\n  message = message || `Количество элементов должно быть не менее ${length}`\n\n  return value => {\n    if (value.length < length) {\n      return message\n    }\n  }\n}\n\n\nexport function required(message?: string): ValidatorCallback {\n  message = message || `Должно быть заполнено`\n\n  return value => {\n    if (!value || !value?.length) {\n      return message\n    }\n  }\n}\n\n","import React, {FunctionComponent} from \"react\";\nimport {Card, Flex, Heading} from \"rebass\";\nimport {Checkbox} from \"../../ui/ReduxForm/Checkbox\";\n\ninterface IgnoreElementProps {\n}\n\n\nexport const IgnoreElement: FunctionComponent<IgnoreElementProps> = () => {\n  return (\n    <Card>\n      <Flex flexDirection=\"column\">\n        <Heading fontSize={2}>Игнорировать</Heading>\n        <Checkbox name=\"ignore.Ca\" label=\"Кальций\" />\n        <Checkbox name=\"ignore.Mg\" label=\"Магний\" />\n        <Checkbox name=\"ignore.S\" label=\"Сера\" />\n        <Checkbox name=\"ignore.Cl\" label=\"Хлор\" />\n      </Flex>\n    </Card>\n  )\n}\n","import React from \"react\";\n\nimport {Label, Radio as RebassRadio, RadioProps as RebassRadioProps} from \"@rebass/forms\";\nimport {Field as ReduxField} from \"redux-form\";\nimport {ReduxFormComponentType, WrapperInputType} from \"./types\";\n\ninterface RadioProps extends RebassRadioProps {\n  label: string,\n  value: string | number,\n}\n\nconst WrappedCheckbox: WrapperInputType<RadioProps> = ({input, label, value, ...props}: any) =>\n  <Label>\n    <RebassRadio\n      {...props}\n      {...input}\n    />\n    {label}\n  </Label>\n\n// TODO вывести тип\nexport const Radio: ReduxFormComponentType<RadioProps> = ({\n                                                            name,\n                                                            value,\n                                                            normalize= (v) => v.toString(),\n                                                            ...props\n                                                          }) => {\n  return (\n    <ReduxField\n      component={WrappedCheckbox}\n      name={name}\n      normalize={normalize}\n      // onClick={() => setChecked(!checked)}\n      // checked={checked}\n      type='radio'\n      value={normalize(value)}\n      {...props as any}\n    />\n  )\n}\n","import React, {FunctionComponent} from \"react\";\nimport {Card, Flex, Heading} from \"rebass\";\nimport {Radio} from \"../../ui/ReduxForm/Radio\";\nimport {decimal} from \"../../ui/ReduxForm/normalizers\";\n\nconst ACCURACY_VARIANTS = [\n  0.2,\n  0.1,\n  0.05,\n  0.01,\n]\ninterface AccuracyProps {\n}\n\nexport const Accuracy: FunctionComponent<AccuracyProps> = () => {\n    return (\n      <Card>\n          <Flex flexDirection=\"column\">\n            <Heading fontSize={2}>Точность</Heading>\n            {ACCURACY_VARIANTS.map(a =>\n                <Radio\n                  name=\"accuracy\"\n                  value={a}\n                  label={`${a} г.`}\n                  normalize={decimal}\n                />\n            )}\n          </Flex>\n      </Card>\n    )\n}\n","import React, {FunctionComponent} from \"react\";\nimport {Card, Flex, Heading} from \"rebass\";\nimport {Label} from \"@rebass/forms\";\nimport {Input} from \"../../ui/ReduxForm/Input\";\nimport {decimal, number} from \"../../ui/ReduxForm/normalizers\";\n\n\ninterface SolutionVolumeProps {\n}\n\nexport const Solution: FunctionComponent<SolutionVolumeProps> = () => {\n  return (\n    <Card>\n        <Heading fontSize={2}>Раствор</Heading>\n      <Flex flexDirection=\"column\">\n        <Flex alignItems=\"center\" justifyContent=\"space-between\">\n          <Label htmlFor=\"solution_volume\">Объем, л</Label>\n          <Input\n            name=\"solution_volume\"\n            width=\"3rem\"\n            type=\"number\"\n            step=\"1\"\n            min=\"1\"\n            pattern=\"^\\d+$\"\n            normalize={number}\n            style={{\n              textAlign: \"center\"\n            }}\n            autoComplete=\"off\"\n          />\n        </Flex>\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" paddingTop={2}>\n          <Label htmlFor=\"solution_concentration\">Концентрация, 1/100%</Label>\n          <Input\n            name=\"solution_concentration\"\n            width=\"3rem\"\n            type=\"number\"\n            step=\"0.1\"\n            min=\"0\"\n            max=\"999\"\n            normalize={decimal}\n            style={{\n              textAlign: \"center\"\n            }}\n            autoComplete=\"off\"\n          />\n        </Flex>\n      </Flex>\n    </Card>\n  )\n}\n","import React, {FunctionComponent} from \"react\";\nimport {useSelector} from \"react-redux\";\nimport {getFormValues} from \"redux-form\";\nimport {Card, Flex} from \"rebass\";\nimport {Label} from \"@rebass/forms\";\nimport {Input} from \"@/components/ui/ReduxForm/Input\";\nimport {decimal, number} from \"@/components/ui/ReduxForm/normalizers\";\nimport {Checkbox} from \"@/components/ui/ReduxForm/Checkbox\";\nimport {REDUX_FORM_NAME} from \"@/components/Calculator/constants\";\nimport {CalculatorFormValues} from \"@/components/Calculator/types\";\n\n\ninterface DilutionProps {\n}\n\nexport const Dilution: FunctionComponent<DilutionProps> = () => {\n  const {\n    dilution_enabled,\n  } = useSelector(getFormValues(REDUX_FORM_NAME)) as CalculatorFormValues\n  return (\n    <Card>\n      <Checkbox name=\"dilution_enabled\" label=\"Разбавление концентрата\"/>\n      <Flex flexDirection=\"column\" style={{display: dilution_enabled? \"flex\" : \"none\"}}>\n        <Flex alignItems=\"center\" justifyContent=\"space-between\">\n          <Label htmlFor=\"dilution_volume\">Объем, л</Label>\n          <Input\n            name=\"dilution_volume\"\n            width=\"3rem\"\n            type=\"number\"\n            step=\"1\"\n            min=\"1\"\n            pattern=\"^\\d+$\"\n            normalize={number}\n            style={{\n              textAlign: \"center\"\n            }}\n            autoComplete=\"off\"\n          />\n        </Flex>\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" paddingTop={2}>\n          <Label htmlFor=\"dilution_concentration\">Концентрация, 1/100%</Label>\n          <Input\n            name=\"dilution_concentration\"\n            width=\"3rem\"\n            type=\"number\"\n            step=\"0.1\"\n            min=\"0\"\n            max=\"999\"\n            normalize={decimal}\n            style={{\n              textAlign: \"center\"\n            }}\n            autoComplete=\"off\"\n          />\n        </Flex>\n      </Flex>\n    </Card>\n  )\n}\n","import React, {ComponentType} from \"react\";\nimport {Box, Button, Flex} from \"rebass\";\nimport {IgnoreElement} from \"./IgnoreElement\";\nimport {Accuracy} from \"./Accuracy\";\nimport {Solution} from \"./Solution\";\nimport {Dilution} from \"./Dilution\";\n\ninterface OptionsProps {\n}\n\n\nexport const Options: ComponentType<OptionsProps> = () => {\n  return (\n    <Flex flexDirection=\"column\">\n      <Box flex={1}>\n        <Button width=\"100%\" my={2} type=\"submit\">Calculate</Button>\n      </Box>\n      <Box my={2}>\n        <Solution/>\n      </Box>\n      <Box my={2}>\n        <Dilution/>\n      </Box>\n      <Flex sx={{\n        '& > *': {flex: 1}\n      }}>\n        <IgnoreElement/>\n        <Box marginLeft={2}>\n          <Accuracy/>\n        </Box>\n      </Flex>\n\n    </Flex>\n  )\n}\n\n","import React, {FunctionComponent} from \"react\";\nimport {Box, Flex} from \"rebass\";\nimport {Input} from \"@/components/ui/ReduxForm/Input\";\nimport {number} from \"@/components/ui/ReduxForm/normalizers\";\n\ninterface RecipeElementFormProps {\n  name: string,\n}\n\nexport const getRecipeFieldName = (name: string) => `recipe.${name}`\n\n\n\nexport const RecipeElementForm: FunctionComponent<RecipeElementFormProps> = (props) => {\n  const {name} = props\n  return (\n    <Flex flexDirection=\"column\"\n          justifyContent=\"center\"\n          alignItems=\"center\"\n          maxWidth='3rem'\n    >\n      <Box style={{textAlign: 'center'}}\n      >\n        {name}\n      </Box>\n      <Input\n        name={getRecipeFieldName(name)}\n        type=\"number\"\n        step=\"0.1\"\n        min=\"0\"\n        max=\"999\"\n        autoComplete=\"off\"\n        normalize={number}\n        maxWidth=\"3rem\"\n        style={{\n          textAlign: \"center\"\n        }}\n      />\n    </Flex>\n  )\n}\n","import React, {ChangeEvent, useState} from \"react\";\nimport {Box, Button, Flex} from \"rebass\";\n\nimport {useFormName, useFormValues} from \"@/hooks/ReduxForm\";\nimport {CalculatorFormValues} from \"@/components/Calculator/types\";\nimport {calculateNPKBalance} from '@/calculator/helpers';\nimport {Elements, NeedElements} from \"@/calculator/types\";\nimport {decimal} from \"@/components/ui/ReduxForm/normalizers\";\nimport {FERTILIZER_ELEMENT_NAMES, MACRO_ELEMENT_NAMES, MICRO_ELEMENT_NAMES} from \"@/calculator/constants\";\nimport {StyledInput} from \"@/components/ui/ReduxForm/Input\";\nimport {ALLOWED_ELEMENT_IN_MATRIX, convertProfileWithEC, convertProfileWithRatio} from \"@/calculator/profile\";\nimport {StyledBalanceCell} from \"@/components/Calculator/Options/Recipe\";\nimport {round} from \"@/utils\";\nimport {ModalActions} from \"@/components/ui/Modal/Modal\";\n\ninterface RecipeTuneFormProps {\n  modal: ModalActions,\n  onSave: (npk: NeedElements) => void\n}\n\nconst ELEMENT_IN_MATRIX = ALLOWED_ELEMENT_IN_MATRIX.filter(el => ![\"NH4\", \"NO3\"].includes(el))\n\nexport function RecipeTuneForm(props: RecipeTuneFormProps) {\n  const formValue = useFormValues<CalculatorFormValues>(useFormName())[0]\n  const [recipe, setRecipe] = useState(formValue.recipe)\n  const recipeInfo = calculateNPKBalance(recipe as Elements)\n  const [ratio, setRatio] = useState(recipeInfo.ratio)\n  const [EC, setEC] = useState(recipeInfo.EC)\n\n  const onChangeRecipe = (el: FERTILIZER_ELEMENT_NAMES, value: number) => {\n    setRecipe({...recipe, [el]: value})\n  }\n  const onChangeEC = (val: number) => {\n    setRecipe(convertProfileWithEC(recipe as Elements, val))\n    setEC(val)\n  }\n  const onChangeRatio = (El1: ALLOWED_ELEMENT_IN_MATRIX, El2: ALLOWED_ELEMENT_IN_MATRIX, val: number) => {\n    if (val) {\n      let newNpk = convertProfileWithRatio(recipe, {[El1]: {[El2]: val}})\n      newNpk = convertProfileWithEC(newNpk, EC)\n      setRecipe(newNpk)\n    }\n    setRatio({...ratio, [El1]: {...ratio[El1], [El2]: val}})\n  }\n\n  const onSaveHandler = () => {\n    props.onSave(recipe)\n    props.modal.close()\n  }\n  return (\n    <Flex flexDirection={'column'}>\n      <Flex>\n        {MACRO_ELEMENT_NAMES.map(el => (\n          <RecipeInput\n            name={el}\n            label={el}\n            value={recipe[el]}\n            onChange={val => onChangeRecipe(el, val)}\n            step={0.1}\n          />\n        ))}\n        <RecipeInput name={'EC'} label={\"EC\"} value={EC} onChange={onChangeEC}/>\n      </Flex>\n      <Flex justifyContent=\"space-around\">\n        <StyledBalanceCell name=\"ΔΣ I\" value={recipeInfo.ion_balance}/>\n        <StyledBalanceCell name=\"EC\" value={recipeInfo.EC}/>\n        <RecipeInput\n          name={'NH4'}\n          label={\"%NH4\"}\n          value={round(ratio.NH4.NO3 * 100, 1)}\n          step={0.1}\n          onChange={v => onChangeRatio('NH4', 'NO3', v / 100)}\n        />\n        <StyledBalanceCell name=\"K:Mg\" value={recipeInfo.ratio.K.Mg}/>\n        <StyledBalanceCell name=\"K:Ca\" value={recipeInfo.ratio.K.Ca}/>\n        <StyledBalanceCell name=\"Ca:N\" value={recipeInfo.ratio.Ca.N}/>\n        <StyledBalanceCell name=\"N:K\" value={recipeInfo.ratio.N.K}/>\n        <StyledBalanceCell name=\"N:P\" value={recipeInfo.ratio.N.P}/>\n      </Flex>\n      <Flex>\n        <table>\n          <thead>\n          <tr>\n            <th></th>\n            {ELEMENT_IN_MATRIX.map(el => <th>{el}</th>)}\n          </tr>\n          </thead>\n          <tbody>\n          {ELEMENT_IN_MATRIX.map(el => (\n            <tr>\n              <th>{el}</th>\n              {ELEMENT_IN_MATRIX.map(el2 => (\n                <td style={{textAlign: 'center'}}>\n                  {el === el2 ? 1 : (\n                    <RecipeInput\n                      name={`${el}:${el2}`}\n                      value={round(ratio?.[el]?.[el2] || 0, 2)}\n                      onChange={value => onChangeRatio(el, el2, value)}\n                    />\n                  )}\n                </td>\n              ))}\n\n            </tr>\n\n          ))}\n          </tbody>\n        </table>\n      </Flex>\n      <Flex justifyContent=\"space-around\">\n        {MICRO_ELEMENT_NAMES.map(el => (\n          <RecipeInput\n            name={el}\n            label={el}\n            value={(recipe[el] || 0) * 1000}\n            onChange={val => onChangeRecipe(el, val / 1000)}\n            step={1}\n          />\n        ))}\n      </Flex>\n      <Flex justifyContent=\"space-between\">\n        <Button type=\"button\" onClick={props.modal.close}>Cancel</Button>\n        <Button type=\"button\" onClick={onSaveHandler}>Save</Button>\n      </Flex>\n    </Flex>\n  )\n}\n\ninterface RecipeInputProps {\n  name: string,\n  label?: string,\n  onChange?: (value: number) => void,\n  value?: number,\n  step?: number,\n}\n\nfunction RecipeInput(props: RecipeInputProps) {\n  const {\n    name, label, onChange,\n    value = 0,\n    step = 0.01\n  } = props\n\n  const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.value) {\n      const val = decimal(e.target.value)\n      onChange && onChange(val)\n    }\n  }\n\n  return (\n    <Flex flexDirection=\"column\"\n          justifyContent=\"center\"\n          alignItems=\"center\"\n          maxWidth='6rem'\n    >\n      {label ?\n        <Box style={{textAlign: 'center'}}>\n          {label}\n        </Box>\n        : null\n      }\n      <StyledInput\n        onChange={onChangeHandler}\n        name={name}\n        value={value}\n        type=\"number\"\n        step={step.toString()}\n        min=\"0\"\n        max=\"9999\"\n        autoComplete=\"off\"\n        maxWidth=\"6rem\"\n        lang=\"en-US\"\n        style={{\n          textAlign: \"center\"\n        }}\n      />\n    </Flex>\n  )\n}\n","import React, {FunctionComponent, useState} from \"react\";\nimport {Box, Card, Flex, Heading, Text} from \"rebass\";\nimport {Broom} from '@styled-icons/fa-solid/Broom'\nimport {Save} from '@styled-icons/boxicons-regular/Save'\nimport {Tune} from '@styled-icons/material-sharp/Tune'\nimport {getRecipeFieldName, RecipeElementForm} from \"./RecipeElementForm\";\nimport {useFormName, useFormValues} from \"@/hooks/ReduxForm\";\nimport {FERTILIZER_ELEMENT_NAMES, MACRO_ELEMENT_NAMES} from \"@/calculator/constants\";\n\nimport {IconButton} from \"@/components/ui/IconButton\";\nimport {Dropdown} from \"@/components/ui/Dropdown/Dropdown\";\nimport {CalculatorState, Recipe as RecipeType} from \"@/components/Calculator/types\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {recipePush, recipeRemove} from \"@/components/Calculator/actions\";\nimport {Elements, NeedElements} from \"@/calculator/types\";\nimport {calculateNPKBalance, getEmptyElements} from \"@/calculator/helpers\";\nimport {Modal} from \"@/components/ui/Modal/Modal\";\nimport {RecipeTuneForm} from \"@/components/Calculator/Options/RecipeTuneForm\";\nimport {round} from \"@/utils\";\n\n\nexport const StyledBalanceCell: FunctionComponent<{name:string, value: number}> = (props) => {\n  return (\n    <Flex flexDirection=\"column\" m={1} alignItems=\"center\">\n      <Heading fontSize={1}>{props.name}</Heading>\n      <Text>{props.value}</Text>\n    </Flex>\n  )\n}\n\ninterface RecipeProps {\n}\n\nexport const Recipe: FunctionComponent<RecipeProps> = () => {\n  const {\n    recipes = [],\n  } = useSelector<any>(state => state.calculator) as CalculatorState\n\n  const [values, setValue] = useFormValues(useFormName())\n  const [selected, setSelected] = useState<RecipeType | undefined>(recipes?.[0])\n\n  const dispatch = useDispatch()\n\n  const NPKBalance = calculateNPKBalance(values.recipe || getEmptyElements())\n\n  const onChangeHandler = (item: RecipeType | null) => {\n    item && setSelected(item)\n    item && setRecipe(item.elements)\n  }\n\n  const setRecipe = (elements: NeedElements) => {\n    for (let [name, value] of Object.entries(elements)) {\n      setValue(getRecipeFieldName(name), value)\n    }\n  }\n  const resetRecipe = () => {\n    let zeroValues = Object.fromEntries(FERTILIZER_ELEMENT_NAMES.map(el => [el, 0])) as unknown as Elements\n    setRecipe(zeroValues)\n  }\n  const onEditHandler = (value: string) => {\n    let zeroValues = Object.fromEntries(FERTILIZER_ELEMENT_NAMES\n      .map(el => [el, selected?.elements[el] || 0])) as unknown as Elements\n    setSelected({name: value, elements: zeroValues})\n  }\n\n  const onAddHandler = () => {\n    if (!selected) {\n      return\n    }\n    const recipe = {...selected, elements: values.recipe}\n    dispatch(recipePush(recipe))\n  }\n  const onRemoveItemHandler = (item: RecipeType) => {\n    dispatch(recipeRemove(item))\n  }\n  return (\n    <Card>\n      <Flex flexDirection=\"column\">\n        <Flex\n        >\n          <Box flex={1} mx={2}>\n            <Dropdown<RecipeType>\n              value={selected}\n              items={recipes}\n              onChange={onChangeHandler}\n              onEdit={onEditHandler}\n              renderItem={({item}) => (\n                <Flex flex={1} justifyContent=\"space-between\">\n                  <Box width={3} backgroundColor={item.color || 'gray'}>\n                  </Box>\n                  <Box flex={1} mx={2}>\n                    {item.name}\n                  </Box>\n                  <button onClick={event => {\n                    event.stopPropagation()\n                    onRemoveItemHandler(item)\n                  }}>-\n                  </button>\n                </Flex>\n              )}\n              renderValue={item => item?.name || \"\"}\n            />\n          </Box>\n          <Box>\n            <IconButton\n              marginRight={1}\n              component={Save}\n              onClick={onAddHandler}\n            />\n            <IconButton\n              component={Broom}\n              onClick={resetRecipe}\n            />\n          </Box>\n        </Flex>\n        <Flex justifyContent=\"space-between\">\n          {\n            MACRO_ELEMENT_NAMES.map(n => <RecipeElementForm name={n}/>)\n          }\n        </Flex>\n        <Flex justifyContent=\"space-around\">\n          <Modal\n            title=\"Настройка профиля\"\n            button={({modal}) => (\n              <IconButton\n              marginRight={1}\n              component={Tune}\n              onClick={modal.open}\n              />\n            )}\n            container={({modal}) => (\n              <>\n                <RecipeTuneForm\n                  modal={modal}\n                  onSave={setRecipe}\n                />\n              </>\n            )}\n          />\n          <StyledBalanceCell name=\"ΔΣ I\" value={NPKBalance.ion_balance}/>\n          <StyledBalanceCell name=\"EC\" value={NPKBalance.EC}/>\n          <StyledBalanceCell name=\"%NH4\" value={round(NPKBalance.ratio.NH4.NO3 * 100, 1)}/>\n          <StyledBalanceCell name=\"K:Mg\" value={NPKBalance.ratio.K.Mg}/>\n          <StyledBalanceCell name=\"K:Ca\" value={NPKBalance.ratio.K.Ca}/>\n          <StyledBalanceCell name=\"Ca:N\" value={NPKBalance.ratio.Ca.N}/>\n        </Flex>\n      </Flex>\n    </Card>\n  )\n}\n","import React from \"react\";\nimport {countDecimals, round} from \"@/utils\";\nimport {useSelector} from \"react-redux\";\nimport {getFormValues} from \"redux-form\";\nimport {REDUX_FORM_NAME} from \"@/components/Calculator/constants\";\nimport {CalculatorFormValues} from \"@/components/Calculator/types\";\nimport {FertilizerWeights} from \"@/calculator\";\n\ninterface ResultFertilizerListProps {\n    fertilizers: FertilizerWeights[],\n}\n\n\nexport function ResultFertilizerList(props: ResultFertilizerListProps) {\n    const {fertilizers} = props\n    const {\n      accuracy\n    } = useSelector(getFormValues(REDUX_FORM_NAME)) as CalculatorFormValues\n    return (\n        <>\n            {fertilizers.map(f => {\n                return (\n                  <li key={f.id}>\n                      {round(f.weight, countDecimals(accuracy))}г\n                      &nbsp;\n                      <span title=\"Объем или вес раствора\">{f.volume && `(${f.volume} мл${f.liquid_weight? `, ${f.liquid_weight}г`: ''})`}</span>\n                      &nbsp;\n                      {f.id}\n                  </li>\n                )\n            })}\n        </>\n    )\n}\n","import {useSelector} from \"react-redux\";\nimport {CalculatorFormValues, CalculatorState} from \"@/components/Calculator/types\";\nimport {entries, toMap} from \"@/utils\";\nimport {groupFertilizerBySolution} from \"@/calculator/dilution\";\nimport {FertilizerWeights} from \"@/calculator\";\nimport {calculatePPM} from \"@/calculator/helpers\";\nimport {getFormValues} from \"redux-form\";\nimport {REDUX_FORM_NAME} from \"@/components/Calculator/constants\";\n\nexport function usePPM() {\n  const {\n    result,\n  } = useSelector<any>(state => state.calculator) as CalculatorState\n  const {\n    solution_volume,\n  } = useSelector(getFormValues(REDUX_FORM_NAME)) as CalculatorFormValues\n\n  const fertilizerWeights = (result?.fertilizers || []).map(f => ({...f}))\n\n  const ppm = calculatePPM(\n    fertilizerWeights,\n    solution_volume,\n  );\n\n  return ppm\n}\n\nexport function useFertilizerSolutionGroup() {\n  const {\n    fertilizers,\n    result,\n  } = useSelector<any>(state => state.calculator) as CalculatorState\n\n  const fertilizersWeights = (result?.fertilizers || []).map(f => ({...f}))\n\n  const fertilizerWeightsMap = toMap(fertilizersWeights, 'id')\n\n  const pairs = entries(groupFertilizerBySolution(fertilizers))\n    .sort(([a], [b]) => a > b ? 1 : -1)\n  const fertilizerWeightGroups: [typeof pairs[0][0], FertilizerWeights[]][] = pairs\n    .map(([g, fList]) => {\n        let ws = fList\n          .map((f) => fertilizerWeightsMap[f.id])\n          .filter(f => f)\n        return [g, ws]\n      }\n    )\n\n  return fertilizerWeightGroups\n\n}\n","import {FertilizerInfo} from \"./types\";\nimport {normalizeFertilizer} from \"./fertilizer\";\nimport {round} from \"../utils\";\n\nexport interface Solution {\n  id: string,\n  volume: number,\n  concentration: number,\n  // TODO плотность\n}\n\nexport type DilutionResult = Omit<Solution, \"concentration\">\n\nexport function dilution_solution(target: Solution, sources: Omit<Solution, \"volume\">[]): DilutionResult[] {\n  const result: DilutionResult[] = []\n  for (let s of sources) {\n    result.push({\n      id: s.id,\n      volume: round((target.volume / s.concentration) * target.concentration, 2)\n    })\n  }\n  return result\n}\n\n\ntype FertilizerGroupBySolution = { [K in \"A\" | \"B\" | \"C\"]?: FertilizerInfo[] }\n\n// Делим удобрения на несколько растворов\n// Бутылка-1 Макра-азотная\n// Селитра амиачная\n// Селитра калиевая\n// Селитра кальциевая\n//\n// Бутылка 2 Макра-серно-фосфорная\n// Сульфат аммония\n// Сульфат магния семиводный\n// Монофосфат калия\nexport function groupFertilizerBySolution(fertilizers: FertilizerInfo[]): FertilizerGroupBySolution {\n  const groups: FertilizerGroupBySolution = {}\n  for (let f of fertilizers) {\n    let nf = normalizeFertilizer(f)\n    if (nf.elements.NO3) {\n      groups.A = [...groups.A || [], f]\n      continue\n    }\n    if (nf.elements.S || nf.elements.P) {\n      groups.B = [...groups.B || [], f]\n      continue\n    }\n    groups.C = [...groups.C || [], f]\n\n  }\n  return groups\n}\n","import React from \"react\";\nimport {dilution_solution, DilutionResult} from \"@/calculator/dilution\";\nimport {useSelector} from \"react-redux\";\nimport {getFormValues} from \"redux-form\";\nimport {REDUX_FORM_NAME} from \"@/components/Calculator/constants\";\nimport {CalculatorFormValues} from \"@/components/Calculator/types\";\nimport {useFertilizerSolutionGroup, usePPM} from \"@/components/Calculator/Result/hooks\";\nimport {Flex, Heading} from \"rebass\";\nimport {ppmToEC} from \"@/calculator/helpers\";\nimport {round} from \"@/utils\";\n\ninterface DilutionResultProps {\n}\n\nexport function ResultDilution(props: DilutionResultProps) {\n  const {\n    solution_concentration,\n    dilution_enabled,\n    dilution_volume,\n    dilution_concentration,\n  } = useSelector(getFormValues(REDUX_FORM_NAME)) as CalculatorFormValues\n\n  const fertilizerWeightGroups = useFertilizerSolutionGroup()\n  let ppm = usePPM()\n\n  if (!dilution_enabled) {\n    return null\n  }\n\n  ppm = round((dilution_concentration * ppm) / solution_concentration)\n\n  let dilution: DilutionResult[] | null = null\n\n  dilution = dilution_solution({\n    id: \"Total\",\n    volume: dilution_volume,\n    concentration: dilution_concentration,\n  }, fertilizerWeightGroups.map(([g]) => (\n    {\n      id: g, concentration: solution_concentration\n    })))\n\n  return (\n    <>\n      <Flex flexDirection=\"column\" width=\"75%\">\n        <Heading fontSize={2}>Разбавление</Heading>\n          <ul>\n            {dilution.map(d => (\n              <li>Раствор {d.id} - {d.volume < 1 ? `${d.volume * 1000}мл`: `${d.volume}л` }</li>\n            ))}\n            <li>\n              Долить до {dilution_volume}л\n            </li>\n            <li>\n              <b>TDS:</b> {ppm} ppm; <b>EC:</b> {ppmToEC(ppm, 1)} мСм/см\n            </li>\n          </ul>\n      </Flex>\n\n    </>\n  )\n}\n","import React, {FunctionComponent} from \"react\";\nimport {Card, Flex, Heading, Text} from \"rebass\";\nimport {useSelector} from \"react-redux\";\nimport {CalculatorFormValues, CalculatorState} from \"../types\";\nimport {getFormValues} from \"redux-form\";\nimport {REDUX_FORM_NAME} from \"../constants\";\nimport {MACRO_ELEMENT_NAMES, MICRO_ELEMENT_NAMES} from \"@/calculator/constants\";\nimport {Element} from \"../FertilizerSelect/SelectedListItem\";\nimport styled from \"styled-components\";\nimport {calculateNPKBalance, getEmptyElements, ppmToEC} from \"@/calculator/helpers\";\nimport {StyledBalanceCell} from \"../Options/Recipe\";\nimport {ResultFertilizerList} from \"./ResultFertilizerList\";\nimport {useFertilizerSolutionGroup, usePPM} from \"./hooks\";\nimport {ResultDilution} from \"@/components/Calculator/Result/ResultDilution\";\nimport {round, sum} from \"@/utils\";\n\ninterface ResultProps {\n}\n\nconst StyledList = styled.ul`\n  @media screen and (min-width: 800px) {\n    width: 75%;\n  }\n`\n\nfunction getScoreDisplay(score: number): string {\n  let score_display = \"Не соответствует\";\n  if (score >= 95) score_display = \"Идеально\";\n  if (score >= 90 && score < 95) score_display = \"Отлично\";\n  if (score >= 85 && score < 90) score_display = \"Очень хорошо\";\n  if (score >= 80 && score < 85) score_display = \"Хорошо\";\n  if (score >= 70 && score < 80) score_display = \"Средне\";\n  if (score >= 60 && score < 70) score_display = \"Плохо\";\n  if (score >= 40 && score < 60) score_display = \"Ужасно\";\n  return score_display\n}\n\n\nexport const Result: FunctionComponent<ResultProps> = () => {\n  const {\n    result,\n  } = useSelector<any>(state => state.calculator) as CalculatorState\n\n  const {\n    solution_volume,\n  } = useSelector(getFormValues(REDUX_FORM_NAME)) as CalculatorFormValues\n\n  const ppm = usePPM()\n  const fertilizerWeightGroups = useFertilizerSolutionGroup()\n\n  const score = result?.score || 0\n  const elements = result?.elements || getEmptyElements()\n  const deltaElements = result?.deltaElements || getEmptyElements()\n  const NPKBalance = calculateNPKBalance(elements)\n\n  const liquidFertilizersVolume = round(sum((result?.fertilizers || []).map(f => f.volume || 0)), 1)\n\n  return (\n    <Card>\n      <Flex alignItems=\"center\" flexDirection=\"column\" width=\"100%\">\n        <Heading fontSize={2}>Результат расчета</Heading>\n        <Flex justifyContent=\"space-around\" width=\"100%\">\n          {elements && MACRO_ELEMENT_NAMES.map(\n            k => <Element\n              key={k}\n              name={k}\n              value={round(elements[k])}\n              delta={round(deltaElements[k])}\n            />\n          )}\n        </Flex>\n        <Flex justifyContent=\"space-around\" width=\"100%\">\n          {elements && MICRO_ELEMENT_NAMES.map(\n            k => <Element\n              key={k}\n              name={k}\n              value={round(elements[k] * 1000)}\n              delta={round(deltaElements[k] * 1000)}\n            />\n          )}\n        </Flex>\n        <Flex justifyContent=\"space-around\">\n          <StyledBalanceCell name=\"ΔΣ I\" value={NPKBalance.ion_balance}/>\n          <StyledBalanceCell name=\"EC\" value={NPKBalance.EC}/>\n          <StyledBalanceCell name=\"%NH4\" value={round(NPKBalance.ratio.NH4.NO3 * 100, 1)}/>\n          <StyledBalanceCell name=\"K:Mg\" value={NPKBalance.ratio.K.Mg}/>\n          <StyledBalanceCell name=\"K:Ca\" value={NPKBalance.ratio.K.Ca}/>\n          <StyledBalanceCell name=\"Ca:N\" value={NPKBalance.ratio.Ca.N}/>\n        </Flex>\n        <Heading fontSize={2}>\n          Оценка: {getScoreDisplay(score)}\n        </Heading>\n\n        <Text fontSize={6}>{`${score || 0}%`}</Text>\n        <StyledList>\n          <li>Для {solution_volume}л раствора</li>\n          {fertilizerWeightGroups.map(([g, f_weights]) =>\n            (<li>\n                <b> Раствор {g} </b>\n                <ul>\n                  <ResultFertilizerList fertilizers={f_weights}/>\n                </ul>\n              </li>\n            )\n          )}\n          <li>Долить {(solution_volume * 1000) - liquidFertilizersVolume} мл воды до {solution_volume}л</li>\n          <li title=\"Или минерализация, в мг/л\">\n            <b>TDS:</b> {ppm} ppm; <b>EC:</b> {ppmToEC(ppm, 1)} мСм/см\n          </li>\n        </StyledList>\n        <ResultDilution/>\n        {result?.stats &&\n        <Text>\n          Обработано вариантов: {result?.stats.count} Время: {result?.stats.time} сек\n        </Text>\n        }\n      </Flex>\n    </Card>\n  )\n}\n\n","import parse from \"csv-parse/lib/sync\"\nimport stringify from \"csv-stringify/lib/sync\"\n\nexport const csvParse = parse\nexport const csvExport = stringify\n\n\n","import React, {ChangeEvent, createRef, useEffect, useState} from \"react\";\nimport {Import} from \"@styled-icons/boxicons-regular/Import\"\nimport {IconButton} from \"@/components/ui/IconButton\";\nimport {csvParse} from \"@/utils/csv\";\nimport {FERTILIZER_ELEMENT_NAMES} from \"@/calculator/constants\";\nimport {buildNPKFertilizer} from \"@/calculator/fertilizer\";\nimport {useDispatch} from \"react-redux\";\nimport {fertilizerPush} from \"@/components/Calculator/actions\";\n\ninterface ImportFertilizersProps {\n}\n\nconst COLUMNS = ['id', ...FERTILIZER_ELEMENT_NAMES]\n\nexport function ImportFertilizers(props: ImportFertilizersProps) {\n  const buttonRef = createRef<HTMLButtonElement>()\n  const dispatch = useDispatch()\n  const [size, setSize] = useState({width: 0, height: 0})\n  useEffect(() => {\n    const newSize = {\n      width: buttonRef.current?.offsetWidth || 0,\n      height: buttonRef.current?.offsetHeight || 0,\n    }\n    if (size.width !== newSize.width) {\n      setSize(newSize)\n    }\n  }, [buttonRef, size.width])\n\n  const loadCSV = (csv: string) => {\n    const p = csvParse(csv, {columns: COLUMNS})\n    if (isNaN(parseInt(p[0].P))) {\n      p.splice(0, 1)\n    }\n    for (let {id, ...npk} of p) {\n      const f = buildNPKFertilizer(id, npk)\n      dispatch(fertilizerPush(f))\n    }\n  }\n\n  const handleOnChange = (e: ChangeEvent<HTMLInputElement>) => {\n    console.log(e.target.value, e.target.files?.[0])\n    const file = e.target.files?.[0]\n    if (!file) {\n      return file\n    }\n    let reader = new FileReader();\n    reader.onload = () => {\n      console.log(reader.result)\n      loadCSV(reader.result as string)\n\n    }\n    reader.readAsText(file)\n\n  }\n  return (\n    <>\n      <IconButton\n        sx={{\n          position: \"relative\"\n        }}\n        ref={buttonRef}\n        component={Import}\n      >\n        <input type=\"file\"\n               accept=\"text/csv, .csv\"\n               onChange={event => handleOnChange(event)}\n               style={{\n                 top: 0,\n                 left: 0,\n                 position: \"absolute\",\n                 opacity: 0,\n                 ...size,\n               }}\n        />\n      </IconButton>\n    </>\n  )\n}\n","export const saveData = (function () {\n  const a = document.createElement(\"a\");\n  document.body.appendChild(a);\n  a.setAttribute('style', \"display: none\")\n  return function (data: string, fileName: string) {\n    const blob = new Blob([data], {type: \"octet/stream\"})\n    const url = window.URL.createObjectURL(blob)\n    a.href = url;\n    a.download = fileName;\n    a.click();\n    window.URL.revokeObjectURL(url);\n  };\n})();\n\nexport {}\n","import React from \"react\";\nimport {Export} from \"@styled-icons/boxicons-regular/Export\"\nimport {IconButton} from \"@/components/ui/IconButton\";\nimport {useSelector} from \"react-redux\";\nimport {CalculatorState} from \"@/components/Calculator/types\";\nimport {normalizeFertilizer} from \"@/calculator/fertilizer\";\nimport {FERTILIZER_ELEMENT_NAMES} from \"@/calculator/constants\";\nimport {csvExport} from \"@/utils/csv\";\nimport {saveData} from \"@/utils/downloads\";\n\ninterface ExportFertilizersProps {\n}\n\nexport function ExportFertilizers(props: ExportFertilizersProps) {\n  const {\n    fertilizers,\n  } = useSelector<any>(state => state.calculator) as CalculatorState\n  const doExport = () => {\n    const npkFertilizer = fertilizers.map(f => normalizeFertilizer(f, false))\n    const rows = npkFertilizer.map(f => {\n      const cols = FERTILIZER_ELEMENT_NAMES.map(n => f.elements[n])\n      return [f.id, ...cols]\n    })\n    const csvData = csvExport(rows, {columns: ['Удобрение', ...FERTILIZER_ELEMENT_NAMES], header: true})\n    saveData(csvData, \"Удобрения.csv\")\n  }\n  return (\n    <>\n      <IconButton onClick={doExport} component={Export}/>\n    </>\n  )\n}\n","import React from \"react\";\nimport {Export} from \"@styled-icons/boxicons-regular/Export\"\nimport {IconButton} from \"@/components/ui/IconButton\";\nimport {useSelector} from \"react-redux\";\nimport {CalculatorState} from \"@/components/Calculator/types\";\nimport {FERTILIZER_ELEMENT_NAMES} from \"@/calculator/constants\";\nimport {csvExport} from \"@/utils/csv\";\nimport {saveData} from \"@/utils/downloads\";\n\ninterface ExportRecipesProps {\n}\n\nexport function ExportRecipes(props: ExportRecipesProps) {\n  const {\n    recipes,\n  } = useSelector<any>(state => state.calculator) as CalculatorState\n  const doExport = () => {\n    const rows = recipes.map(f => {\n      const cols = FERTILIZER_ELEMENT_NAMES.map(n => f.elements[n])\n      return [f.name, ...cols]\n    })\n    const csvData = csvExport(rows, {columns: ['Профиль', ...FERTILIZER_ELEMENT_NAMES], header: true})\n    saveData(csvData, \"Профили.csv\")\n  }\n  return (\n    <>\n      <IconButton onClick={doExport} component={Export}/>\n    </>\n  )\n}\n","import React, {ChangeEvent, createRef, useEffect, useState} from \"react\";\nimport {Import} from \"@styled-icons/boxicons-regular/Import\"\nimport {IconButton} from \"@/components/ui/IconButton\";\nimport {csvParse} from \"@/utils/csv\";\nimport {FERTILIZER_ELEMENT_NAMES} from \"@/calculator/constants\";\nimport {useDispatch} from \"react-redux\";\nimport {recipePush} from \"@/components/Calculator/actions\";\n\ninterface ImportRecipesProps {\n}\n\nconst COLUMNS = ['id', ...FERTILIZER_ELEMENT_NAMES]\n\nexport function ImportRecipes(props: ImportRecipesProps) {\n  const buttonRef = createRef<HTMLButtonElement>()\n  const dispatch = useDispatch()\n  const [size, setSize] = useState({width: 0, height: 0})\n  useEffect(() => {\n    const newSize = {\n      width: buttonRef.current?.offsetWidth || 0,\n      height: buttonRef.current?.offsetHeight || 0,\n    }\n    if (size.width !== newSize.width) {\n      setSize(newSize)\n    }\n  }, [buttonRef, size.width])\n\n  const loadCSV = (csv: string) => {\n    const p = csvParse(csv, {columns: COLUMNS})\n    if (isNaN(parseInt(p[0].P))) {\n      p.splice(0, 1)\n    }\n    for (let {id, ...npk} of p) {\n      dispatch(recipePush({name: id, elements: npk}))\n    }\n  }\n\n  const handleOnChange = (e: ChangeEvent<HTMLInputElement>) => {\n    console.log(e.target.value, e.target.files?.[0])\n    const file = e.target.files?.[0]\n    if (!file) {\n      return file\n    }\n    let reader = new FileReader();\n    reader.onload = () => {\n      console.log(reader.result)\n      loadCSV(reader.result as string)\n\n    }\n    reader.readAsText(file)\n\n  }\n  return (\n    <>\n      <IconButton\n        sx={{\n          position: \"relative\"\n        }}\n        ref={buttonRef}\n        component={Import}\n      >\n        <input type=\"file\"\n               accept=\"text/csv, .csv\"\n               onChange={event => handleOnChange(event)}\n               style={{\n                 top: 0,\n                 left: 0,\n                 position: \"absolute\",\n                 opacity: 0,\n                 ...size,\n               }}\n        />\n      </IconButton>\n    </>\n  )\n}\n","import {SxStyleProp} from \"rebass\";\n\nexport function mobileStyles(styles: SxStyleProp) {\n  return {\n    '@media screen and (max-width: 800px)': styles\n  }\n}\n","import React from \"react\";\nimport {Box, Card, Flex, Heading, Text} from 'rebass'\nimport {Restart} from \"@styled-icons/remix-line/Restart\"\nimport {Form, reduxForm} from \"redux-form\";\nimport {connect, useDispatch} from \"react-redux\";\n\nimport FertilizerSelect from './FertilizerSelect'\nimport {Options} from \"./Options/Options\";\nimport {Result} from \"./Result/Result\";\nimport {CalculatorFormValues} from \"./types\";\nimport {ReduxFormType} from \"../ui/ReduxForm/types\";\nimport {REDUX_FORM_NAME} from \"./constants\";\nimport {calculateStart, fertilizerReset, recipeReset} from \"./actions\";\nimport {ImportFertilizers} from \"@/components/Calculator/ImportExport/ImportFertilizers\";\nimport {ExportFertilizers} from \"@/components/Calculator/ImportExport/ExportFertilizers\";\nimport {IconButton} from \"@/components/ui/IconButton\";\nimport {DEFAULT_MICRO_RECIPE, DEFAULT_RECIPES} from \"@/components/Calculator/constants/recipes\";\nimport {ExportRecipes} from \"@/components/Calculator/ImportExport/ExportRecipes\";\nimport {ImportRecipes} from \"@/components/Calculator/ImportExport/ImportRecipes\";\nimport {Recipe} from \"@/components/Calculator/Options/Recipe\";\nimport {mobileStyles} from \"@/components/ui/styled\";\nimport {RootState} from \"@/redux/types\";\n\ninterface CalculatorProps {\n\n}\n\nconst initialValues: CalculatorFormValues = {\n  accuracy: 0.2,\n  solution_volume: 1,\n  solution_concentration: 100,\n  recipe: {...DEFAULT_RECIPES[0].elements, ...DEFAULT_MICRO_RECIPE, Cl: 0},\n  fertilizers: [],\n  dilution_enabled: false,\n  dilution_volume: 20,\n  dilution_concentration: 1,\n}\nexport const CalculatorContainer: ReduxFormType<CalculatorProps, CalculatorFormValues> = ({handleSubmit}) => {\n  const dispatch = useDispatch()\n  return (\n    <Form\n      onSubmit={handleSubmit(() => {\n        dispatch(calculateStart())\n      })}\n    >\n      <Flex sx={{\n        flexDirection: 'row',\n        ...mobileStyles({\n          flexDirection: 'column-reverse',\n        })\n      }}>\n        <Box flex={1}\n             sx={{\n               marginRight: 2,\n               ...mobileStyles({\n                 marginRight: 0\n               })\n             }}\n        >\n          <FertilizerSelect/>\n        </Box>\n        <Flex flexDirection='column' flex={1}>\n          <Box flex={1} marginBottom={2}>\n            <Recipe/>\n          </Box>\n          <Box flex={1}>\n            <Result/>\n          </Box>\n          <Box flex={1}>\n            <Options/>\n          </Box>\n          <Card>\n            <Heading fontSize={2}>Импорт/Экспорт</Heading>\n            <Flex flexDirection=\"column\" p={3}>\n              <Flex alignItems='center'\n                    paddingBottom={2}\n                    justifyContent=\"space-between\"\n                    flexWrap=\"wrap\"\n              >\n                <Text>Удобрения</Text>\n                <Box sx={{\n                  \"&>*\": {\n                    marginLeft: 1\n                  }\n                }}>\n                  <ImportFertilizers/>\n                  <ExportFertilizers/>\n                  <IconButton\n                    component={Restart}\n                    onClick={() => dispatch(fertilizerReset())}\n                  />\n                </Box>\n              </Flex>\n              <Flex alignItems='center'\n                    justifyContent=\"space-between\"\n                    flexWrap=\"wrap\"\n              >\n                <Text>Рецепты</Text>\n                <Box sx={{\n                  \"&>*\": {\n                    marginLeft: 1\n                  }\n                }}>\n                  <ImportRecipes/>\n                  <ExportRecipes/>\n                  <IconButton\n                    component={Restart}\n                    onClick={() => dispatch(recipeReset())}\n                  />\n                </Box>\n              </Flex>\n            </Flex>\n          </Card>\n        </Flex>\n      </Flex>\n    </Form>\n  )\n}\n\n\nconst InitializerCalculator = reduxForm<CalculatorFormValues>({\n  form: REDUX_FORM_NAME,\n  initialValues,\n  enableReinitialize: true\n})(CalculatorContainer)\n\nconst ReduxCalculator = connect((state: RootState) => {\n  const formValues: CalculatorFormValues = (state.calculator?.calculationForm || initialValues)\n  return {\n    initialValues: {\n      ...formValues,\n      recipe: {Cl: 0, ...DEFAULT_MICRO_RECIPE, ...formValues.recipe}\n    }\n  }})(InitializerCalculator)\n\nexport default ReduxCalculator\n"],"sourceRoot":""}