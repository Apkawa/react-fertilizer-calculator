{"version":3,"sources":["components/ui/IconButton.tsx","components/ui/ReduxForm/normalizers.ts","components/ui/ReduxForm/Input.tsx","hooks/ReduxForm.ts","components/Calculator/FertilizerSelect/SelectedListItem.tsx","components/ui/ReduxForm/Checkbox.tsx","components/ui/Modal/ModalContainer.tsx","components/ui/Modal/Modal.tsx","components/Calculator/FertilizerManager/AddItemElementForm.tsx","components/Calculator/FertilizerManager/AddEditCompositionList.tsx","components/Calculator/FertilizerManager/AddEdit.tsx","components/Calculator/FertilizerManager/Item.tsx","components/Calculator/FertilizerManager/List.tsx","components/Calculator/FertilizerManager/index.ts"],"names":["IconButton","forwardRef","props","buttonRef","IconComponent","component","size","children","extraProps","useState","containerSize","setSize","theme","useTheme","useEffect","current","offsetWidth","type","ref","color","colors","background","number","value","parseInt","decimal","parseFloat","StyledInput","styled","RebassInput","WrappedInput","input","label","lang","placeholder","Input","name","useFormName","useContext","ReduxFormContext","form","useFormValues","formName","dispatch","useDispatch","useSelector","state","getFormValues","change","Element","delta","bg","flex","mx","px","minWidth","maxWidth","fontSize","flexDirection","alignItems","round","SelectedListItem","item","onRemove","weight","normalizedFertilizer","normalizeFertilizer","width","justifyContent","id","FERTILIZER_ELEMENT_NAMES","map","v","elements","key","margin","textAlign","volume","title","liquid_weight","padding","alignSelf","Cross","onClick","WrappedCheckbox","checked","Checkbox","StyledOverlay","Flex","window","pageYOffset","ModalContainer","modalRoot","el","document","querySelector","createElement","setAttribute","body","appendChild","useModalRoot","ReactDOM","createPortal","Helmet","backgroundColor","height","Modal","opened","button","container","closed","setClose","onClose","modalActions","open","close","renderCbProps","modal","Icon","AddItemElementForm","disabled","style","step","min","max","autoComplete","normalize","AddEditCompositionList","fields","push","formula","percent","f","i","remove","getInitialValues","formData","npk","composition","composition_enable","solution_concentration","solution_density","solution_density_enable","formToFertilizer","formValues","AddEdit","reduxForm","FERTILIZER_EDIT_FORM_NAME","enableReinitialize","Form","MACRO_ELEMENT_NAMES","MICRO_ELEMENT_NAMES","FieldArray","marginRight","sx","whiteSpace","Item","fertilizer","marginBottom","Edit","initialValues","fertilizerPush","onSave","Trash","fertilizerRemove","List","fertilizers","calculator","Plus","onAdd","list","setList","newList","fertilizerSet","FertilizerManager"],"mappings":"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","file":"static/js/7.e1a7e0d9.chunk.js","sourcesContent":["import React, {forwardRef, MouseEventHandler, PropsWithChildren, useEffect, useState} from \"react\";\nimport {Button, ButtonProps} from \"rebass\";\nimport {EmotionIcon} from '@emotion-icons/emotion-icon'\n\nimport {useTheme} from \"emotion-theming\";\nimport {Theme} from \"@/themes/types\";\n\n\ninterface IconButtonProps extends\n  PropsWithChildren<Omit<ButtonProps, keyof React.HTMLProps<HTMLButtonElement>>> {\n  component: EmotionIcon,\n  disabled?: boolean,\n  onClick?: MouseEventHandler<HTMLButtonElement>,\n  size?: number | string\n}\n\nexport const IconButton = forwardRef<HTMLButtonElement, IconButtonProps>(\n  (props, buttonRef) => {\n    const {\n      component: IconComponent,\n      size = \"1.5em\",\n      children,\n      ...extraProps\n    } = props\n    const [containerSize, setSize] = useState<number | string>(size || 0)\n    const theme = useTheme<Theme>()\n\n    useEffect(() => {\n      if (!size && buttonRef && 'current' in buttonRef) {\n        setSize(buttonRef.current?.offsetWidth || 0)\n      }\n    }, [buttonRef, setSize, size])\n\n    return (\n      <Button type=\"button\" {...extraProps} ref={buttonRef}>\n        <IconComponent\n          color={theme.colors?.background}\n          size={containerSize}\n        />\n        {children}\n      </Button>\n    )\n  })\n","\n\nexport function number(value: any) {\n  return value && parseInt(value)\n}\n\nexport function decimal(value: any) {\n  return value && parseFloat(value)\n}\n","import React from \"react\";\nimport {Field as ReduxField} from \"redux-form\";\n\nimport {Input as RebassInput, InputProps as RebassInputProps} from \"@rebass/forms\";\nimport {ReduxFormComponentType, WrapperInputType} from \"./types\";\nimport styled from \"styled-components\";\n\ninterface InputProps extends RebassInputProps {\n  label?: string\n}\n\nexport const StyledInput = styled(RebassInput)`\n  ::-webkit-inner-spin-button, ::-webkit-outer-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n  }\n  -moz-appearance: textfield;\n\n`\n\nexport const WrappedInput: WrapperInputType<InputProps> = ({input, label, type = \"text\", ...props}: any) =>\n  <StyledInput  {...props}\n                {...input}\n                type={type}\n                lang=\"en-US\"\n                placeholder={label}\n  />\n\n\n// TODO вывести тип\nexport const Input: ReduxFormComponentType<InputProps> = (\n  {\n    name,\n    ...props\n  }) => {\n\n  return (\n    <ReduxField\n      component={WrappedInput}\n      name={name}\n      {...props as any}\n    />\n  )\n}\n","import {useContext} from 'react'\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {change, FormContext, getFormValues, ReduxFormContext} from \"redux-form\";\n\nexport function useReduxForm(): FormContext {\n  return useContext(ReduxFormContext)\n}\n\nexport function useFormName(): string {\n  return useReduxForm().form\n}\n\nexport function useFormValues<FormValues=object>(formName: string): [FormValues, (name: string, value: any) => void] {\n  const dispatch = useDispatch()\n  const values = useSelector(state => getFormValues(formName)(state)) as FormValues\n\n  const setValue = (name: string, value: any) => {\n    dispatch(change(formName, name, value))\n  }\n  return [\n    values,\n    setValue\n    ]\n}\n","import React, {FunctionComponent} from \"react\";\nimport {Box, Card, Flex, Text} from \"rebass\";\nimport {Cross} from \"@styled-icons/entypo/Cross\"\nimport {FertilizerType} from \"./types\";\nimport {normalizeFertilizer} from \"@/calculator/fertilizer\";\nimport {FERTILIZER_ELEMENT_NAMES} from \"@/calculator/constants\";\nimport {IconButton} from \"../../ui/IconButton\";\nimport {round} from \"@/utils\";\nimport {FertilizerWeights} from \"@/calculator\";\n\ninterface ElementProps {\n  name: string,\n  value: number,\n  delta?: number,\n}\n\nexport const Element: FunctionComponent<ElementProps> = (props) => {\n  const {name, value, delta} = props\n  return (\n    <Box bg={name} flex={1} mx=\"2px\" px={1} color={'black'} minWidth=\"2.1em\" maxWidth=\"3em\" fontSize={1}>\n      <Flex flexDirection='column' alignItems={'center'}>\n        <Box>{name}</Box>\n        <Box>{round(value, 1)}</Box>\n        {typeof delta !== \"undefined\" ? <Box>{delta}</Box> : null}\n      </Flex>\n    </Box>\n  )\n}\n\ninterface SelectedListItemProps {\n  item: FertilizerType,\n  onRemove: () => void,\n  weight?: FertilizerWeights,\n}\n\n\nexport const SelectedListItem: FunctionComponent<SelectedListItemProps> = ({item, onRemove, weight}) => {\n  const normalizedFertilizer = normalizeFertilizer(item, false)\n  return (\n    <Card width={'auto'}>\n      <Flex justifyContent={'space-between'} alignItems=\"center\">\n        <Box flex={1}>\n          <Text flex={1}>\n            {item.id}\n          </Text>\n          <Flex>\n            {\n              FERTILIZER_ELEMENT_NAMES.map((name) => {\n                  let v = normalizedFertilizer.elements[name]\n                  if (!v) {\n                    return null\n                  }\n                  return <Element\n                    name={name}\n                    key={name}\n                    value={v}\n                  />\n                }\n              )\n            }\n          </Flex>\n        </Box>\n        <Flex>\n          <Flex alignItems=\"center\" justifyContent=\"center\" margin={1}>\n            {weight ? (\n              <Text textAlign=\"center\" minWidth=\"3em\">\n                {weight.weight}г\n                {weight.volume ? (\n                  <>\n                    <br/>\n                    <span\n                      title=\"Объем или вес раствора\">{weight.volume && `${weight.volume} мл${weight.liquid_weight? `, ${weight.liquid_weight}г`:''}`}</span>\n                  </>\n                ) : null}\n              </Text>\n            ) : null}\n          </Flex>\n          <IconButton\n            padding={1}\n            alignSelf=\"center\"\n            component={Cross}\n            onClick={() => onRemove()}\n          />\n        </Flex>\n      </Flex>\n    </Card>\n  )\n}\n","import React from \"react\";\n\nimport {Checkbox as RebassCheckbox, CheckboxProps as RebassCheckboxProps, Label} from \"@rebass/forms\";\nimport {Field as ReduxField} from \"redux-form\";\nimport {ReduxFormComponentType, WrapperInputType} from \"./types\";\n\ninterface CheckboxProps extends RebassCheckboxProps {\n  label: string\n}\n\nconst WrappedCheckbox: WrapperInputType<CheckboxProps> = ({input, label, ...props}: any) =>\n  <Label>\n    <RebassCheckbox\n      {...props} {...input}\n      checked={input.value}\n    />\n    {label}\n  </Label>\n\n// TODO вывести тип\nexport const Checkbox: ReduxFormComponentType<CheckboxProps> = ({name, ...props}) => {\n  return (\n    <ReduxField\n      component={WrappedCheckbox}\n      name={name}\n      {...props as any}\n    />\n  )\n}\n\n","import React, {ReactNode} from \"react\";\nimport ReactDOM from 'react-dom'\nimport {Card, Flex} from \"rebass\";\nimport styled from '@emotion/styled'\nimport {Helmet} from \"react-helmet\";\n\n\ninterface ModalContainerProps {\n  children: ReactNode,\n}\n\nconst useModalRoot = () => {\n  let el = document.querySelector('#modal-root')\n  if (!el) {\n    el = document.createElement('div')\n    el.setAttribute('id', 'modal-root')\n    document.body.appendChild(el)\n  }\n  return el\n}\n\nconst StyledOverlay = styled(Flex)`\n  overflow-y: auto;\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  top: ${() => `${window.pageYOffset}px`};\n  left: 0;\n  justify-content: center;\n  align-items: center;\n  background-color: rgba(255, 255, 255, 0.5);\n  z-index: 999;\n  \n  // Mobile\n  @media screen and (max-height: 500px), screen and (max-width: 500px) {\n    align-items: initial;\n  }\n`\n\nexport function ModalContainer(props: ModalContainerProps) {\n  const {\n    children,\n  } = props\n  const modalRoot = useModalRoot()\n  return ReactDOM.createPortal(\n    <>\n      <Helmet>\n        <style type='text/css'>\n          {`\n          body {\n            overflow: hidden;\n          }\n        `}\n        </style>\n      </Helmet>\n      <StyledOverlay>\n        <Card backgroundColor='#fff' height=\"max-content\">\n          {children}\n        </Card>\n      </StyledOverlay>\n    </>\n    , modalRoot)\n}\n","import React, {ReactNode, useEffect, useState} from \"react\";\nimport {ModalContainer} from \"@/components/ui/Modal/ModalContainer\";\nimport {Box, Flex, Heading} from \"rebass\";\nimport {Icon} from \"@/components/ui/Icon\";\nimport {Cross} from \"@styled-icons/entypo/Cross\";\n\nexport interface ModalActions {\n  open: () => void,\n  close: () => void,\n}\n\ntype RenderCb = (props: {modal: ModalActions}) => ReactNode\n\ninterface ModalProps {\n  opened?: boolean,\n  onClose?: () => void,\n  button?: RenderCb,\n  title?: string,\n  container: RenderCb,\n}\n\nexport function Modal(props: ModalProps) {\n  const {\n    opened = false,\n    button,\n    container,\n  } = props\n\n  const [closed, setClose] = useState(!opened)\n\n  useEffect(() => {\n    setClose(!opened)\n  }, [opened])\n\n  useEffect(() => {\n    if (closed && props.onClose) {\n      props.onClose()\n    }\n  }, [closed, props])\n\n  const modalActions: ModalActions = {\n    open: () => setClose(false),\n    close: () => setClose(true),\n  }\n  const renderCbProps = {modal: modalActions}\n\n  return (\n    <>\n      {button && button(renderCbProps)}\n      {closed ? null : <ModalContainer>\n        <Flex justifyContent='space-between'>\n          <Heading fontSize={2}>{props.title}</Heading>\n          <Icon component={Cross} onClick={modalActions.close}/>\n        </Flex>\n        <Box>\n          {container(renderCbProps)}\n        </Box>\n      </ModalContainer>\n      }\n    </>\n  )\n}\n","import React, {FunctionComponent} from \"react\";\nimport {Flex} from \"rebass\";\nimport {Input} from \"@/components/ui/ReduxForm/Input\";\nimport {decimal} from \"@/components/ui/ReduxForm/normalizers\";\n\ninterface RecipeElementFormProps {\n  name: string,\n  disabled?: boolean\n}\n\n\n\n\nexport const AddItemElementForm: FunctionComponent<RecipeElementFormProps> = (props) => {\n  const {name, disabled} = props\n\n  return (\n    <Flex flexDirection=\"column\" justifyContent=\"center\" alignItems=\"center\" width='4rem'>\n      <label style={{textAlign: 'center'}}>\n        {name}\n      </label>\n      <Input\n        name={'npk.' + name}\n        type=\"number\"\n        step=\"0.1\"\n        min=\"0\"\n        max=\"100\"\n        autoComplete=\"off\"\n        width=\"3rem\"\n        style={{\n          textAlign: \"center\"\n        }}\n        normalize={decimal}\n        disabled={disabled}\n      />\n    </Flex>\n  )\n}\n","import React from \"react\";\nimport {ReduxFieldArrayType} from \"@/components/ui/ReduxForm/types\";\nimport {Card, Flex} from \"rebass\";\nimport {FertilizerComposition} from \"@/calculator/types\";\nimport {Input} from \"@/components/ui/ReduxForm/Input\";\nimport {decimal} from \"@/components/ui/ReduxForm/normalizers\";\n\ninterface AddEditCompositionListProps {\n}\n\ntype AddEditCompositionListType = ReduxFieldArrayType<AddEditCompositionListProps, FertilizerComposition>\nexport const AddEditCompositionList: AddEditCompositionListType = (props) => {\n  const {fields} = props\n  return (\n    <Card width=\"100%\">\n      <Flex>\n        <button type=\"button\"  onClick={() => fields.push({formula: '', percent: 98})}>+</button>\n      </Flex>\n      <Flex flexDirection=\"column\">\n        {fields.map((f, i) => (\n          <Flex key={i} width=\"100%\">\n            <Input name={`${f}.formula`} flex={2}/>\n            <Input\n              name={`${f}.percent`}\n              type=\"number\"\n              step=\"0.1\"\n              min=\"0\"\n              max=\"100\"\n              normalize={decimal}\n              flex={1}\n            />\n            <button type=\"button\" onClick={() => fields.remove(i)}>-</button>\n          </Flex>\n        ))}\n      </Flex>\n    </Card>\n  )\n}\n","import React from \"react\";\nimport {Box, Flex, Text} from \"rebass\";\n\nimport {FieldArray, Form, reduxForm} from 'redux-form'\nimport {ReduxFormType} from \"@/components/ui/ReduxForm/types\";\nimport {Input} from \"@/components/ui/ReduxForm/Input\";\nimport {normalizeFertilizer} from \"@/calculator/fertilizer\";\nimport {MACRO_ELEMENT_NAMES, MICRO_ELEMENT_NAMES} from \"@/calculator/constants\";\nimport {FertilizerInfo} from \"@/calculator/types\";\n\nimport {AddItemElementForm} from \"./AddItemElementForm\";\n\nimport {FERTILIZER_EDIT_FORM_NAME} from \"./constants\";\nimport {AddEditFormType} from \"./types\";\nimport {Checkbox} from \"@/components/ui/ReduxForm/Checkbox\";\nimport {AddEditCompositionList} from \"@/components/Calculator/FertilizerManager/AddEditCompositionList\";\nimport {useFormName, useFormValues} from \"@/hooks/ReduxForm\";\nimport {decimal, number} from \"@/components/ui/ReduxForm/normalizers\";\nimport {Label} from \"@rebass/forms\";\n\ninterface AddEditProps {\n  fertilizer?: FertilizerInfo,\n}\n\nexport const getElements = (f: FertilizerInfo) => {\n  return normalizeFertilizer(f, false).elements\n}\n\nexport function getInitialValues(f: FertilizerInfo): AddEditFormType {\n  let formData: AddEditFormType = {\n    id: f.id,\n    npk: f.npk,\n    composition: f.composition,\n  }\n  if (f.composition) {\n    formData.npk = normalizeFertilizer(f, false).elements\n    formData.composition_enable = true\n  }\n  if (f.solution_concentration) {\n    formData.solution_concentration = f.solution_concentration\n    formData.solution_density = f.solution_density || 1000\n    formData.solution_density_enable = true\n  }\n  return formData\n}\n\nexport function formToFertilizer(formValues: AddEditFormType): FertilizerInfo {\n  const f: FertilizerInfo = {\n    id: formValues.id,\n    name: formValues.name,\n  }\n  if (formValues.composition_enable) {\n    f.composition = formValues.composition\n  } else {\n    f.npk = formValues.npk\n  }\n  if (formValues.solution_density_enable) {\n    f.solution_density = formValues.solution_density\n    f.solution_concentration = formValues.solution_concentration\n  }\n  return f\n}\n\nconst AddEditForm: ReduxFormType<AddEditProps, AddEditFormType> = (props) => {\n  const formValues = useFormValues<AddEditFormType>(useFormName())[0]\n\n  return (\n    <Form>\n      <Flex flexDirection='column'>\n        <Input name=\"id\" title=\"Name\" label=\"Name\"/>\n        <Box>\n          Макроэлементы\n        </Box>\n        <Flex>\n          {MACRO_ELEMENT_NAMES.map(el => (\n            <AddItemElementForm\n              name={el}\n              disabled={formValues.composition_enable}\n            />\n          ))}\n        </Flex>\n        <Box>\n          Микроэлементы\n        </Box>\n        <Flex>\n          {MICRO_ELEMENT_NAMES.map(el => (\n            <AddItemElementForm\n              name={el}\n              disabled={formValues.composition_enable}\n            />\n          ))}\n        </Flex>\n        <Flex>\n          <Checkbox name=\"composition_enable\" label=\"Формула\"/>\n        </Flex>\n        {formValues.composition_enable ?\n          <Flex>\n            <FieldArray<{}>\n              name=\"composition\"\n              component={AddEditCompositionList}\n            />\n          </Flex> : null\n        }\n        <Flex alignItems='center'>\n          <Box width=\"auto\" marginRight={2}>\n            <Checkbox\n              name=\"solution_density_enable\" label=\"Раствор\"\n            />\n          </Box>\n          {formValues.solution_density_enable ?\n            <Flex flexDirection=\"column\">\n              <Flex alignItems=\"flex-end\">\n                <Label flexDirection=\"column\">\n                  Концентрация\n                  <Input\n                    name=\"solution_concentration\"\n                    type=\"number\"\n                    step=\"0.1\"\n                    min=\"0\"\n                    max=\"3000\"\n                    normalize={decimal}\n                    width='5em'\n                    marginRight={2}\n                  />\n                  <Text sx={{whiteSpace: 'nowrap'}}>г/л</Text>\n                </Label>\n              </Flex>\n              <Flex alignItems=\"flex-end\">\n                <Label flexDirection=\"column\">\n                  Плотность\n                  <Input\n                    name=\"solution_density\"\n                    type=\"number\"\n                    step=\"1\"\n                    min=\"800\"\n                    max=\"3000\"\n                    normalize={number}\n                    width='5em'\n                    marginRight={2}\n                  />\n                </Label>\n                <Text sx={{whiteSpace: 'nowrap'}}>г/л</Text>\n              </Flex>\n            </Flex>\n            : null}\n        </Flex>\n      </Flex>\n    </Form>\n  )\n}\n\n\nexport const AddEdit = reduxForm<AddEditFormType>({\n  form: FERTILIZER_EDIT_FORM_NAME,\n  enableReinitialize: true\n})(AddEditForm)\n","import React from \"react\";\nimport {FertilizerInfo} from \"@/calculator/types\";\nimport {Box, Button, Card, Flex, Text} from \"rebass\";\n\nimport {normalizeFertilizer} from \"@/calculator/fertilizer\";\nimport {FERTILIZER_ELEMENT_NAMES} from \"@/calculator/constants\";\n\nimport {IconButton} from \"@/components/ui/IconButton\";\nimport {Edit} from \"@styled-icons/fa-regular/Edit\"\nimport {Trash} from \"@styled-icons/fa-solid/Trash\";\n\nimport {Element} from \"../FertilizerSelect/SelectedListItem\";\nimport {AddEdit, formToFertilizer, getInitialValues} from './AddEdit';\nimport {Modal, ModalActions} from \"@/components/ui/Modal/Modal\";\nimport {useFormValues} from \"@/hooks/ReduxForm\";\nimport {FERTILIZER_EDIT_FORM_NAME} from \"@/components/Calculator/FertilizerManager/constants\";\nimport {useDispatch} from \"react-redux\";\nimport {fertilizerPush, fertilizerRemove} from \"@/components/Calculator/actions\";\nimport {AddEditFormType} from \"@/components/Calculator/FertilizerManager/types\";\n\ninterface ItemProps {\n  fertilizer: FertilizerInfo\n}\n\nexport function Item(props: ItemProps) {\n  const {fertilizer} = props\n  const normalizedFertilizer = normalizeFertilizer(fertilizer, false)\n  const [formValues] = useFormValues<AddEditFormType>(FERTILIZER_EDIT_FORM_NAME)\n  const dispatch = useDispatch()\n  const onRemove = () => {\n    dispatch(fertilizerRemove(fertilizer))\n  }\n  const onSave = (modal: ModalActions) => {\n    dispatch(fertilizerPush(formToFertilizer(formValues)))\n    modal.close()\n  }\n  return (\n    <>\n      <Card width={'auto'} marginBottom={2}>\n        <Flex justifyContent={'space-between'} alignItems=\"center\">\n          <Box flex={1}>\n            <Text flex={1}>\n              {fertilizer.id} {fertilizer.solution_concentration && `[жидкий ${fertilizer.solution_concentration} г/л]`}\n            </Text>\n            <Flex>\n              {\n                FERTILIZER_ELEMENT_NAMES.map((name) => {\n                    let v = normalizedFertilizer.elements[name]\n                    if (!v) {\n                      return null\n                    }\n                    return <Element\n                      name={name}\n                      key={name}\n                      value={v}\n                    />\n                  }\n                )\n              }\n            </Flex>\n          </Box>\n          <Flex>\n            <Modal\n              button={({modal}) => (\n                <IconButton\n                  padding={1}\n                  alignSelf=\"center\"\n                  component={Edit}\n                  backgroundColor={'primary'}\n                  onClick={modal.open}\n                />\n              )}\n              container={({modal}) => (\n                <>\n                <AddEdit\n                  initialValues={getInitialValues(fertilizer)}\n                />\n                  <Flex justifyContent=\"flex-end\">\n                    <Button type=\"button\" onClick={() => onSave(modal)}>Save</Button>\n                  </Flex>\n                </>\n              )}\n            />\n            <IconButton\n              padding={1}\n              alignSelf=\"center\"\n              component={Trash}\n              backgroundColor={'danger'}\n              onClick={onRemove}\n            />\n          </Flex>\n        </Flex>\n      </Card>\n    </>\n  )\n}\n","import React from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {CalculatorState} from \"@/components/Calculator/types\";\nimport {Button, Flex} from \"rebass\";\nimport {ReactSortable} from \"react-sortablejs\";\n\nimport {Item} from \"./Item\";\nimport {fertilizerPush, fertilizerSet} from \"@/components/Calculator/actions\";\nimport {Modal, ModalActions} from \"@/components/ui/Modal/Modal\";\nimport {IconButton} from \"@/components/ui/IconButton\";\nimport {Plus} from \"@styled-icons/boxicons-regular/Plus\";\nimport {AddEdit, formToFertilizer, getInitialValues} from \"@/components/Calculator/FertilizerManager/AddEdit\";\nimport {useFormValues} from \"@/hooks/ReduxForm\";\nimport {AddEditFormType} from \"@/components/Calculator/FertilizerManager/types\";\nimport {FERTILIZER_EDIT_FORM_NAME} from \"@/components/Calculator/FertilizerManager/constants\";\n\ninterface ListProps {\n}\n\nexport function List(props: ListProps) {\n  const {\n    fertilizers,\n  } = useSelector<any>(state => state.calculator) as CalculatorState\n  const [formValues] = useFormValues<AddEditFormType>(FERTILIZER_EDIT_FORM_NAME)\n  const dispatch = useDispatch()\n\n  function onAdd(modal: ModalActions) {\n    dispatch(fertilizerPush(formToFertilizer(formValues)))\n    modal.close()\n  }\n\n  return (\n    <Flex flexDirection='column'>\n      <Flex>\n        <Modal\n          button={({modal}) => (\n            <IconButton\n              padding={1}\n              alignSelf=\"center\"\n              component={Plus}\n              backgroundColor={'primary'}\n              onClick={modal.open}\n            />\n          )}\n          container={({modal}) => (\n            <>\n              <AddEdit\n                initialValues={getInitialValues({id: ''})}\n              />\n              <Flex justifyContent=\"flex-end\">\n                <Button type=\"button\" onClick={() => onAdd(modal)}>Save</Button>\n              </Flex>\n            </>\n          )}\n        />\n      </Flex>\n      <ReactSortable list={fertilizers} setList={newList => dispatch(fertilizerSet(newList))}>\n        {fertilizers.map(f => (\n          <Item fertilizer={f} key={f.id}/>\n        ))}\n      </ReactSortable>\n    </Flex>\n  )\n}\n","import {List as FertilizerManager} from './List'\n\nexport {List as FertilizerManager} from './List'\n\nexport default FertilizerManager\n"],"sourceRoot":""}