{"version":3,"sources":["components/Calculator/constants/index.ts","calculator/constants.ts","serviceWorker.ts","pages/index.ts","pages/NotFound/index.tsx","themes/index.ts","components/ui/ForkMeOnGitHub.tsx","components/ColorModeToggle.tsx","components/TabMenu.tsx","Root.tsx","calculator/itertools.ts","calculator/index.ts","components/Calculator/saga.ts","components/Calculator/FertilizerManager/saga.ts","saga.ts","redux-helpers/helpers.ts","components/Calculator/constants/fertilizers.ts","components/Calculator/reducers.ts","redux/rootReducers.ts","redux/index.ts","index.tsx","calculator/helpers.ts","utils/index.ts","calculator/fertilizer.ts","calculator/molecular-parser/molecularParser.ts","calculator/chem.ts","components/Calculator/actions.ts","components/Calculator/FertilizerManager/constants.ts","components/Calculator/constants/recipes.ts","calculator/profile.ts"],"names":["REDUX_FORM_NAME","STORE_CALCULATE_FORM","CALCULATE_START","CALCULATE_SUCCESS","CALCULATE_ERROR","FERTILIZERS_PUSH","FERTILIZERS_REMOVE","FERTILIZERS_SET","FERTILIZERS_RESET","RECIPE_PUSH","RECIPE_REMOVE","RECIPE_RESET","ATOMIC_MASS","MACRO_ELEMENT_NAMES","MICRO_ELEMENT_NAMES","FERTILIZER_ELEMENT_NAMES","IONIC_STRENGTH","NO3","NH4","P","K","Ca","Mg","S","Cl","Na","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","App","loadable","NotFound","Help","Calculator","ChemFormula","Example","presets","require","defaultTheme","polaris","colors","modes","dark","text","card","boxShadow","p","styles","button","color","shadows","small","large","StyledForkMeOnGithub","styled","span","ForkMeOnGitHub","target","rel","href","ColorModeToggle","useColorMode","colorMode","setColorMode","Icon","Moon","Sun","onClick","size","TabMenu","props","startPathWith","tabClassName","activeTabClassName","flexDirection","exact","to","Root","store","theme","justifyContent","padding","margin","flex","sx","width","path","component","pages","marginTop","fontSize","__VERSION__","__COMMIT_REF_NAME__","__COMMIT_HASH__","__COMMIT_DATE__","combination","iterable","Permutation","f","getScoreElement","needElements","currentElements","pairs","entries","map","key","value","curVal","score","Object","fromEntries","calculate_v3","fertilizers","options","result","time","Date","getTime","count","r","calculate_v2","stats","ElementPriority","accuracy","ignore","solution_volume","solution_concentration","prevElements","getEmptyElements","precision","countDecimals","ignoredElements","keys","fertilizerMap","id","normalizedFertilizers","normalizeFertilizer","weights","v","weight","base_weight","volume","xElements","calcElements","elements","filter","sort","a","b","primaryElement","skipFert","length","m","fInfo","round","solution_density","e","score_el","score_percent","sum","values","ignored","needElementsLength","totalScore","Math","deltaElementsPairs","k","deltaElements","storeCalculateFormSaga","calculateStartSaga","calculatorSagaWatcher","calculatorFormChangeWatcher","calculatorRootSaga","select","getFormValues","formValues","put","storeCalculateForm","calculateStart","calculator","calculationForm","stopSubmit","_error","calculateError","recipe","calculateSuccess","takeLatest","actionTypes","CHANGE","BLUR","ARRAY_PUSH","ARRAY_REMOVE","action","meta","form","call","all","fork","updateFertilizerForm","fertilizerEditFormChangeWatcher","fertilizerManagerRootSaga","FERTILIZER_EDIT_FORM_NAME","composition_enable","npk","composition","equal","change","formula","rootSaga","sagas","s","assertNever","_","defaultFertilizers","percent","buildNPKFertilizer","initialState","process","recipes","DEFAULT_RECIPES","rootReducers","combineReducers","type","ActionNames","updateOrPush","payload","name","formReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","sagaMiddleware","createSagaMiddleware","persistedState","localStorage","getItem","JSON","parse","loadPersistedState","middlewares","enhancers","applyMiddleware","createStore","subscribe","setItem","stringify","getState","run","ReactDOM","render","StrictMode","document","getElementById","URL","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","calculateNPKBalance","anions","cations","ion_balance","ratio","getProfileRatioMatrix","EC","el","w","ionS","st","sign","forEach","isFinite","macro","micro","Fe","Mn","B","Zn","Cu","Mo","Co","Si","calculatePPM","ppmToEC","ppm","extract_percent","reduce","number","pow","Number","EPSILON","floor","valueOf","toString","split","toMap","list","field","i","item","lookup","newList","updated","push","t1","t2","NPKOxides","oxide","hasOwnProperty","compositionToNPKElements","comp","atomCounts","parseMolecule","massParts","calculateMassParts","atom","mass","subAtoms","parseNitrates","includes","totalSubAtoms","elementsToNPK","val","skipElements","elementMassPart","fertilizerInfo","convertMass","findSubgroups","finishingNestedSubgroup","subgroups","currentFormula","currentCount","level","pushSubgroup","parseInt","ch","test","decomposeFormula","elementCounts","elementRe","matcher","singleElementRe","element","_el","_decomposePrimitiveFormula","combinedCounts","subgroup","elementCount","subgroupCounts","nitrates","re","n","c","matchAll","atomMasses","totalMass","fertilizerPush","fertilizerRemove","fertilizerSet","fertilizerReset","recipePush","recipeRemove","recipeReset","ALLOWED_ELEMENT_IN_MATRIX","elMap","El","N","el2","ppm2","convertProfileWithRatio","newNPK","el1","toEls","_N","elM","convertProfileWithEC","rN","rK","rCa","rMg","vNH4NO3","rNH4","molN","molK","molCa","molMg","newNpk"],"mappings":"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","file":"static/js/main.32b9585d.chunk.js","sourcesContent":["export const REDUX_FORM_NAME = 'calculatorOptions' as const\n\nexport const STORE_CALCULATE_FORM = 'STORE_CALCULATE_FORM'\n\nexport const CALCULATE_START = 'CALCULATE_START' as const;\nexport const CALCULATE_SUCCESS = 'CALCULATE_SUCCESS' as const;\nexport const CALCULATE_ERROR = 'CALCULATE_ERROR'  as const;\n\nexport const FERTILIZERS_PUSH = 'FERTILIZERS_PUSH' as const\nexport const FERTILIZERS_REMOVE = 'FERTILIZERS_REMOVE' as const\nexport const FERTILIZERS_SET = 'FERTILIZERS_SET' as const\nexport const FERTILIZERS_RESET = 'FERTILIZERS_RESET' as const\n\n\nexport const RECIPE_PUSH = 'RECIPE_PUSH' as const\nexport const RECIPE_REMOVE = 'RECIPE_REMOVE' as const\nexport const RECIPE_RESET = 'RECIPE_RESET' as const\n","export const ATOMIC_MASS = {\n  \"H\": 1.008,\n  \"He\": 4.0026022,\n  \"Li\": 6.94,\n  \"Be\": 9.01218315,\n  \"B\": 10.81,\n  \"C\": 12.011,\n  \"N\": 14.007,\n  \"O\": 15.999,\n  \"F\": 18.9984031636,\n  \"Ne\": 20.17976,\n  \"Na\": 22.989769282,\n  \"Mg\": 24.305,\n  \"Al\": 26.98153857,\n  \"Si\": 28.085,\n  \"P\": 30.9737619985,\n  \"S\": 32.06,\n  \"Cl\": 35.45,\n  \"K\": 39.09831,\n  \"Ar\": 39.9481,\n  \"Ca\": 40.0784,\n  \"Sc\": 44.9559085,\n  \"Ti\": 47.8671,\n  \"V\": 50.94151,\n  \"Cr\": 51.99616,\n  \"Mn\": 54.9380443,\n  \"Fe\": 55.8452,\n  \"Ni\": 58.69344,\n  \"Co\": 58.9331944,\n  \"Cu\": 63.5463,\n  \"Zn\": 65.382,\n  \"Ga\": 69.7231,\n  \"Ge\": 72.6308,\n  \"As\": 74.9215956,\n  \"Se\": 78.9718,\n  \"Br\": 79.904,\n  \"Kr\": 83.7982,\n  \"Rb\": 85.46783,\n  \"Sr\": 87.621,\n  \"Y\": 88.905842,\n  \"Zr\": 91.2242,\n  \"Nb\": 92.906372,\n  \"Mo\": 95.951,\n  \"Tc\": 98,\n  \"Ru\": 101.072,\n  \"Rh\": 102.905502,\n  \"Pd\": 106.421,\n  \"Ag\": 107.86822,\n  \"Cd\": 112.4144,\n  \"In\": 114.8181,\n  \"Sn\": 118.7107,\n  \"Sb\": 121.7601,\n  \"I\": 126.904473,\n  \"Te\": 127.603,\n  \"Xe\": 131.2936,\n  \"Cs\": 132.905451966,\n  \"Ba\": 137.3277,\n  \"La\": 138.905477,\n  \"Ce\": 140.1161,\n  \"Pr\": 140.907662,\n  \"Nd\": 144.2423,\n  \"Pm\": 145,\n  \"Sm\": 150.362,\n  \"Eu\": 151.9641,\n  \"Gd\": 157.253,\n  \"Tb\": 158.925352,\n  \"Dy\": 162.5001,\n  \"Ho\": 164.930332,\n  \"Er\": 167.2593,\n  \"Tm\": 168.934222,\n  \"Yb\": 173.0451,\n  \"Lu\": 174.96681,\n  \"Hf\": 178.492,\n  \"Ta\": 180.947882,\n  \"W\": 183.841,\n  \"Re\": 186.2071,\n  \"Os\": 190.233,\n  \"Ir\": 192.2173,\n  \"Pt\": 195.0849,\n  \"Au\": 196.9665695,\n  \"Hg\": 200.5923,\n  \"Tl\": 204.38,\n  \"Pb\": 207.21,\n  \"Bi\": 208.980401,\n  \"Po\": 209,\n  \"At\": 210,\n  \"Rn\": 222,\n  \"Fr\": 223,\n  \"Ra\": 226,\n  \"Ac\": 227,\n  \"Pa\": 231.035882,\n  \"Th\": 232.03774,\n  \"Np\": 237,\n  \"U\": 238.028913,\n  \"Am\": 243,\n  \"Pu\": 244,\n  \"Cm\": 247,\n  \"Bk\": 247,\n  \"Cf\": 251,\n  \"Es\": 252,\n  \"Fm\": 257,\n  \"Md\": 258,\n  \"No\": 259,\n  \"Lr\": 266,\n  \"Rf\": 267,\n  \"Db\": 268,\n  \"Sg\": 269,\n  \"Hs\": 269,\n  \"Bh\": 270,\n  \"Mt\": 278,\n  \"Ds\": 281,\n  \"Rg\": 282,\n  \"Cn\": 285,\n  \"Nh\": 286,\n  \"Fl\": 289,\n  \"Mc\": 289,\n  \"Lv\": 293,\n  \"Ts\": 294,\n  \"Og\": 294,\n  \"Uue\": 315\n}\nexport type AtomNameType = keyof ATOMIC_MASS\nexport type ATOMIC_MASS = typeof ATOMIC_MASS;\nexport const MACRO_ELEMENT_NAMES = [\"NO3\", \"NH4\", \"P\", \"K\", \"Ca\", \"Mg\", \"S\"] as const\nexport type MACRO_ELEMENT_NAMES = typeof MACRO_ELEMENT_NAMES[number]\nexport const MICRO_ELEMENT_NAMES = ['Fe', 'Mn', 'B', 'Zn', 'Cu', 'Mo', 'Co', 'Si'] as const\nexport type MICRO_ELEMENT_NAMES = typeof MICRO_ELEMENT_NAMES[number]\n\nexport const FERTILIZER_ELEMENT_NAMES = [...MACRO_ELEMENT_NAMES, ...MICRO_ELEMENT_NAMES]\nexport type FERTILIZER_ELEMENT_NAMES = typeof FERTILIZER_ELEMENT_NAMES[number]\n\nexport const IONIC_STRENGTH = {\n  NO3: -1 / ATOMIC_MASS[\"N\"],\n  NH4: 1 / ATOMIC_MASS[\"N\"],\n  P: -1 / ATOMIC_MASS[\"P\"],\n  K: 1 / ATOMIC_MASS[\"K\"],\n  Ca: 2 / ATOMIC_MASS[\"Ca\"],\n  Mg: 2 / ATOMIC_MASS[\"Mg\"],\n  S: -2 / ATOMIC_MASS[\"S\"],\n  // TODO use for balance without recipe\n  Cl: -1 / ATOMIC_MASS[\"Cl\"],\n  Na: 1 / ATOMIC_MASS[\"Na\"],\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/pwa-sw.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import loadable from '@loadable/component';\nimport NotFound from './NotFound'\n\nexport default {\n  App: loadable(() => import('./App')),\n  NotFound,\n  Help: loadable(() => import('./Help')),\n  Calculator: loadable(() => import('./Calculator')),\n  ChemFormula: loadable(() => import('./ChemFormula')),\n  Example: loadable(() => import('./Example')),\n}\n","import React from \"react\";\n\nexport default () => <h1>Not found</h1>\n","import {Theme} from \"@/themes/types\";\n\nconst presets: any = require('@theme-ui/presets')\n\nexport const defaultTheme: Theme = {\n  ...presets.polaris,\n  colors: {\n    ...presets.polaris.colors,\n    NO3: '#05AD11',\n    NH4: '#FFF',\n    P: '#DBC403',\n    K: '#E07206',\n    Ca: '#D1C7C7',\n    Mg: '#AB0AE0',\n    S: '#FFF',\n    modes: {\n      dark: {\n        ...presets.polaris.colors.modes.dark,\n        text: \"#9d9d9d\"\n      }\n    },\n  },\n  card: {\n    boxShadow: 'small',\n    p: 2,\n  },\n  styles: {\n    ...presets.polaris.styles,\n    button: {\n      color: 'background'\n    }\n  },\n  shadows: {\n    small: '0 0 4px rgba(0, 0, 0, .125)',\n    large: '0 0 24px rgba(0, 0, 0, .125)'\n  },\n}\nconsole.log(defaultTheme)\n","import React, {FunctionComponent} from \"react\";\nimport styled from \"styled-components\";\n\n\nconst StyledForkMeOnGithub = styled.span`\n&>a {\n    background: #000;\n    color: #fff;\n    text-decoration: none;\n    font-family: arial, sans-serif;\n    text-align: center;\n    font-weight: bold;\n    padding: 5px 40px;\n    font-size: 1rem;\n    line-height: 2rem;\n    position: relative;\n    transition: 0.5s;\n}\n\n&>a:hover {\n    background: #c11;\n    color: #fff;\n}\n\n&>a::before, &>a::after {\n    content: \"\";\n    width: 100%;\n    display: block;\n    position: absolute;\n    top: 1px;\n    left: 0;\n    height: 1px;\n    background: #fff;\n}\n\n&>a::after {\n    bottom: 1px;\n    top: auto;\n}\n\n@media screen and (min-width: 800px) {\n    & {\n        position: absolute;\n        display: block;\n        top: 0;\n        right: 0;\n        width: 200px;\n        overflow: hidden;\n        height: 200px;\n        z-index: 100;\n    }\n\n    &>a {\n        // width: 200px;\n        position: absolute;\n        top: 40px;\n        right: -50px;\n        transform: rotate(45deg);\n        box-shadow: 4px 4px 10px rgba(0, 0, 0, 0.8);\n    }\n}\n`\n\ninterface ForkMeOnGitHubProps {\n}\n\nexport const ForkMeOnGitHub: FunctionComponent<ForkMeOnGitHubProps> = () => {\n  return (\n    <StyledForkMeOnGithub>\n      <a\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        href={'https://github.com/Apkawa/react-fertilizer-calculator'}\n      >Fork me on GitHub</a>\n    </StyledForkMeOnGithub>\n  )\n}\n","import React, {FunctionComponent} from \"react\";\nimport {useColorMode} from \"theme-ui\";\nimport {Moon} from \"@styled-icons/boxicons-solid/Moon\"\nimport {Sun} from \"@styled-icons/fa-solid/Sun\"\n\ninterface ColorModeProps {\n}\n\nexport const ColorModeToggle: FunctionComponent<ColorModeProps> = () => {\n    const [colorMode, setColorMode] = useColorMode()\n    const Icon = colorMode === 'default'? Moon : Sun\n    return (\n          <Icon\n            onClick={() => {\n              setColorMode(colorMode === 'default' ? 'dark' : 'default')\n            }}\n            size={42}\n            color={\"text\"}\n          />\n    )\n}\n","import React from \"react\";\nimport {NavTab, RoutedTabs} from \"react-router-tabs\";\n\nimport {Flex} from \"rebass\";\n\ninterface TabMenuProps {\n}\n\nexport function TabMenu(props: TabMenuProps) {\n    return (\n        <>\n            <RoutedTabs\n              startPathWith={''}\n              tabClassName=\"tab-link\"\n              activeTabClassName=\"active\"\n            >\n              <Flex flexDirection=\"column\">\n                <NavTab exact to=\"/\">Calculate</NavTab>\n                <NavTab to=\"/fertilizers\">Fertilizers</NavTab>\n                <NavTab to=\"/formula/\">Formula</NavTab>\n                <NavTab to=\"/help\">Help</NavTab>\n              </Flex>\n            </RoutedTabs>\n        </>\n    )\n}\n","import React, {FunctionComponent} from 'react'\nimport {Provider} from 'react-redux'\nimport {HashRouter as Router, Route, Switch} from 'react-router-dom'\n\n\nimport {ThemeProvider} from 'theme-ui'\n\n\nimport pages from './pages'\nimport {Box, Flex, Text} from \"rebass\";\nimport {defaultTheme} from \"./themes\";\nimport {ForkMeOnGitHub} from \"./components/ui/ForkMeOnGitHub\";\nimport {ColorModeToggle} from \"./components/ColorModeToggle\";\nimport {TabMenu} from \"@/components/TabMenu\";\n\n\ntype RootProps = {\n  store: any\n}\n\nconst Root: FunctionComponent<RootProps> = ({store}) => {\n  return (\n    <Provider store={store}>\n      <ThemeProvider theme={defaultTheme}>\n        <Flex justifyContent=\"space-between\">\n          <Box\n            padding={3}\n          >\n            <ColorModeToggle/>\n          </Box>\n          <ForkMeOnGitHub/>\n        </Flex>\n        <Flex flexDirection='column' margin={2}>\n          <Box flex={1}>\n            <Router>\n              <TabMenu/>\n\n              <Flex sx={\n                {\n                  justifyContent: 'center'\n                }\n              }>\n                <Box width='936px'>\n                  <Switch>\n                    <Route path={\n                      [\n                        \"/formula/:formula?/:percent?\",\n                      ]} component={pages.ChemFormula}/>\n                    <Route path=\"/example\" component={pages.Example}/>\n                    <Route path=\"/help\" component={pages.Help}/>\n                    <Route path=\"/\" component={pages.Calculator}/>\n                    <Route path=\"*\" component={pages.NotFound}/>\n                  </Switch>\n                </Box>\n              </Flex>\n            </Router>\n          </Box>\n          <Flex justifyContent={\"flex-end\"} marginTop=\"auto\" flex={1}>\n            <Text fontSize={1}>\n              {__VERSION__}-{__COMMIT_REF_NAME__} {__COMMIT_HASH__} [{__COMMIT_DATE__}]\n            </Text>\n          </Flex>\n        </Flex>\n      </ThemeProvider>\n    </Provider>\n  )\n}\n\nexport default Root\n","import {Permutation} from \"js-combinatorics\";\n\ntype GenericIterableIterator<T> = IterableIterator<{\n  [K in keyof T]: T[K] extends Iterable<infer U> ? U : never\n}>\n\nexport function* combination<T extends Array<any>>(iterable: T): GenericIterableIterator<T> {\n  for (let p of new Permutation(iterable)) {\n    yield p as any\n  }\n}\n\n// NB: throws if any iterables passed to it are empty\n// via https://gist.github.com/cybercase/db7dde901d7070c98c48#gistcomment-3033459\nexport function* product<T extends Array<Iterable<any>>>(...iterables: T): GenericIterableIterator<T> {\n  if (iterables.length === 0) {\n    return;\n  }\n  // make a list of iterators from the iterables\n  const iterators = iterables.map(it => it[Symbol.iterator]());\n  const results = iterators.map(it => it.next());\n  if (results.some(r => r.done)) {\n    throw new Error(\"Input contains an empty iterator.\");\n  }\n\n  for (let i = 0; ;) {\n    if (results[i].done) {\n      // reset the current iterator\n      iterators[i] = iterables[i][Symbol.iterator]();\n      results[i] = iterators[i].next();\n      // advance, and exit if we've reached the end\n      if (++i >= iterators.length) {\n        return;\n      }\n    } else {\n      yield results.map(({value}) => value) as any;\n      i = 0;\n    }\n    results[i] = iterators[i].next();\n  }\n}\n\n\n","import {combination, product} from \"./itertools\";\nimport {countDecimals, entries, keys, round, sum, values} from \"../utils\";\nimport {FERTILIZER_ELEMENT_NAMES} from \"./constants\";\nimport {Elements, Fertilizer, FertilizerInfo, NeedElements} from \"./types\";\nimport {getEmptyElements} from \"./helpers\";\nimport {normalizeFertilizer} from \"./fertilizer\";\n\n\nexport interface FertilizerWeights {\n  id: string,\n  // г/л\n  weight: number\n  base_weight: number,\n  // Если удобрение в жидком виде, в мл\n  volume?: number | null,\n}\n\nexport interface CalculateResult {\n  fertilizers: FertilizerWeights[],\n  elements: Elements,\n  deltaElements: Elements,\n  score: number,\n  stats: {\n    time: number,\n    count: number,\n  },\n}\n\nexport type IgnoreElements = {\n  [E in keyof Elements]?: boolean\n}\n\nexport interface CalculateOptions {\n  accuracy?: number,\n  max_iterations?: number,\n  ignore?: IgnoreElements,\n  solution_volume?: number,\n  solution_concentration?: number,\n  // Необходимо для расчета с использованием предыдущих данных,\n  // например, после расчета микроэлементов добавляются макроэлементы и надо их как то учитывать и наоборот\n  prevElements?: Elements,\n}\n\nexport function sumFertilizers(fertilizers: Fertilizer[], portions: number[]): Elements {\n  const pairs = FERTILIZER_ELEMENT_NAMES.map(key =>\n    [\n      key,\n      sum(\n        portions.map(\n          (weight, index) => weight * fertilizers[index].elements[key])\n      )\n    ]\n  )\n  return Object.fromEntries(pairs)\n}\n\n\nexport function getScoreElement(needElements: NeedElements, currentElements: Elements): Elements {\n  let pairs = entries(needElements).map(([key, value]) => {\n    let curVal = currentElements[key]\n    let score = 100\n    if (curVal !== 0) {\n      if (curVal < value) {\n        score = value / curVal;\n      } else {\n        score = curVal / value\n      }\n    } else {\n      if (curVal === value) {\n        // В рецепте тоже ноль\n        score = 1.0\n      }\n    }\n    return [key, score]\n  })\n  return Object.fromEntries(pairs)\n}\n\n// Подбор оптимального количества путем пересортировки удобрений\nexport function calculate_v3(\n  needElements: NeedElements,\n  fertilizers: FertilizerInfo[],\n  options: CalculateOptions = {}\n): CalculateResult {\n\n  let result: CalculateResult | null = null\n  const time = new Date().getTime();\n  let count = 0;\n  for (let f of combination(fertilizers)) {\n    const r = calculate_v2(needElements, f, options)\n    if (!result) {\n      result = r\n      continue\n    }\n    if (result.score < r.score) {\n      result = r\n    }\n    count += 1\n  }\n  if (result) {\n    result.stats.count = count\n    result.stats.time = (new Date().getTime() - time) / 1000\n  }\n  return result as CalculateResult\n\n}\n\nconst ElementPriority = {\n  'NH4': 1000,\n  'B': 1000,\n}\n\n\n// Алгоритм расчетов из https://github.com/siv237/HPG\nexport function calculate_v2(\n  needElements: NeedElements,\n  fertilizers: FertilizerInfo[],\n  options: CalculateOptions = {}\n): CalculateResult {\n  const {\n    accuracy = 0.1,\n    ignore = {},\n    solution_volume = 1,\n    solution_concentration = 1,\n    prevElements = getEmptyElements(),\n  } = options || {}\n  const precision = countDecimals(accuracy)\n  let ignoredElements: Elements = getEmptyElements()\n\n  for (let key of keys(ignoredElements)) {\n    if (ignore[key]) {\n      ignoredElements[key] = 1\n    }\n    if (typeof needElements[key] == \"undefined\") {\n      ignoredElements[key] = 1\n    }\n  }\n\n  const fertilizerMap = Object.fromEntries(fertilizers.map(f => [f.id, f]))\n  const normalizedFertilizers = fertilizers.map(f => normalizeFertilizer(f));\n  let weights: { [K: string]: FertilizerWeights } = Object.fromEntries(\n    fertilizers.map(v => ([v.id, {\n      id: v.id,\n      weight: 0,\n      base_weight: 0,\n      volume: null,\n    }])))\n  const xElements = {...needElements}\n  const calcElements = prevElements;\n\n  for (let f of normalizedFertilizers) {\n    let p = entries(f.elements)\n      .filter(v => v[1])\n      .sort((a, b) =>\n        ((xElements[a[0]] || 0) / a[1] - (xElements[b[0]] || 0) / b[1])\n      )\n      .sort(([a], [b]) =>\n        ((ElementPriority as any)[b] || 0) - ((ElementPriority as any)[a] || 0)\n      )\n    let primaryElement = p.filter(([a]) => (xElements[a] || 0) > 0 && (needElements[a] || 0) > 0)?.[0]?.[0]\n    // Стараемся принять во внимание комплексные удобрения вроде акварина\n    let skipFert = p.filter(([a]) => (needElements[a] || 0) <= 0 && !ignoredElements[a]).length === 1\n    if (!primaryElement || skipFert) {\n      continue\n    }\n\n    let m = Object.fromEntries(p)\n    let weight = (xElements[primaryElement] || 0) / (m[primaryElement] * 10)\n    let fInfo = fertilizerMap[f.id]\n    weights[f.id].base_weight = round(weight, precision > 3 ? precision : 3)\n    weights[f.id].weight = round(weight * solution_volume * solution_concentration, precision)\n    if (fInfo.solution_density) {\n      weights[f.id].volume = round(( weights[f.id].weight * 1000 ) / fInfo.solution_density, precision)\n    }\n    for (let [a, v] of p) {\n      const e = weight * v * 10\n      calcElements[a] += round(e)\n      xElements[a] = (xElements[a] || 0) - e\n    }\n  }\n  let score_el: Elements = getScoreElement(needElements, calcElements)\n  for (let [e, v] of entries(ignoredElements)) {\n    if (v) {\n      score_el[e] = 0\n    }\n  }\n  const score_percent = sum(Object.values(score_el))\n\n  let ignored = sum(values(ignoredElements));\n  const needElementsLength = keys(ignoredElements).length\n  const totalScore = Math.round(100 / ((score_percent - (needElementsLength - ignored)) / (needElementsLength - ignored) + 1))\n\n  const deltaElementsPairs = entries(calcElements).map(([k, v]) => {\n    return [k, round((needElements[k] || 0) - v || 0, 1)]\n  })\n  const deltaElements = Object.fromEntries(deltaElementsPairs)\n\n  return {\n    fertilizers: values(weights)\n      .map(v => ({\n        ...v,\n        base_weight: round(v.base_weight, precision),\n        weight: round(v.weight, precision),\n      }))\n      .filter(v => v.weight),\n    elements: calcElements,\n    deltaElements,\n    score: totalScore,\n    stats: {\n      count: 0,\n      time: 0,\n    }\n  }\n\n\n}\n\n// DEPRECATED\nexport function calculate_v1(\n  needElements: Elements,\n  fertilizers: Fertilizer[],\n  options: CalculateOptions = {},\n): CalculateResult {\n\n  const time = new Date().getTime();\n  let count = 0;\n  const {\n    accuracy = 0.1,\n    max_iterations = 25,\n    ignore = {},\n  } = options || {}\n  const precision = countDecimals(accuracy)\n  let weights: FertilizerWeights[] = fertilizers.map(v => ({\n    id: v.id,\n    weight: max_iterations,\n    base_weight: max_iterations\n  }))\n\n  let ignoredElements: Elements = getEmptyElements()\n  for (let [key, flag] of entries(ignore)) {\n    if (flag) {\n      ignoredElements[key] = 1\n    }\n  }\n\n  let best_score = 1000000;\n  let score;\n  let score_percent = 0;\n  let calculatedElements: Elements = getEmptyElements()\n\n  const accuracyList = [0.2, 0.1, 0.05, 0.01]\n  let step = accuracyList[0] * 10;\n\n  for (let currentAccuracy of accuracyList) {\n    if (currentAccuracy < accuracy) {\n      break\n    }\n\n    const _step = step\n    const weightRanges = weights.map(w => {\n      const ranges = []\n      const weight = w.weight < _step ? _step : w.weight\n      let minWeight = weight - _step\n      let maxWeight = weight + _step\n      if (weight === max_iterations) {\n        // Maybe first iteration\n        minWeight = 0\n        maxWeight = max_iterations\n      }\n      for (let i = minWeight; i <= maxWeight; i += _step) {\n        ranges.push(i)\n      }\n      return ranges\n    })\n\n\n    const it = product(...weightRanges)\n\n    for (let portions of it) {\n      let n_el: Elements = sumFertilizers(fertilizers, portions)\n      let score_el: Elements = getScoreElement(needElements, n_el)\n\n      for (let [e, v] of entries(ignoredElements)) {\n        if (v) {\n          score_el[e] = 0\n        }\n      }\n\n      count += 1\n      const current_score = sum(Object.values(score_el))\n      score = sum(Object.values(score_el).map(v => Math.pow(v, 2)))\n      if (best_score > score) {\n        calculatedElements = n_el\n        best_score = score\n        score_percent = current_score\n        weights.forEach((v, index) => {\n          v.base_weight = portions[index]\n          v.weight = portions[index]\n        })\n      }\n    }\n    weights = weights.filter(v => v.weight > 0)\n    let newFertilizers: Fertilizer[] = []\n    for (let f of fertilizers) {\n      for (let w of weights) {\n        if (w.id === f.id) {\n          newFertilizers.push(f)\n        }\n      }\n    }\n    fertilizers = newFertilizers\n    step = currentAccuracy * 10;\n  }\n\n\n  for (let [k, v] of entries(calculatedElements)) {\n    calculatedElements[k] = round(v)\n  }\n\n  const deltaElementsPairs = entries(calculatedElements).map(([k, v]) => {\n    return [k, needElements[k] - v]\n  })\n  const deltaElements = Object.fromEntries(deltaElementsPairs)\n\n  let ignored = sum(values(ignoredElements));\n  const needElementsLength = keys(needElements).length\n  const totalScore = Math.round(100 / ((score_percent - (needElementsLength - ignored)) / (needElementsLength - ignored) + 1))\n  return {\n    fertilizers: weights.map(v => ({...v, weight: round(v.weight / 10, precision)})),\n    score: totalScore,\n    elements: calculatedElements,\n    deltaElements,\n    stats: {\n      time: (new Date().getTime() - time) / 1000,\n      count: count,\n    }\n  }\n}\n","import {all, call, fork, put, select, takeLatest} from 'redux-saga/effects'\nimport {actionTypes, FormAction, getFormValues, stopSubmit} from \"redux-form\";\nimport {CALCULATE_START, REDUX_FORM_NAME} from \"./constants\";\nimport {calculateError, calculateStart, calculateSuccess, storeCalculateForm} from \"./actions\";\nimport {calculate_v3} from \"@/calculator\";\nimport {CalculatorFormValues} from \"./types\";\n\nexport function* storeCalculateFormSaga() {\n  const formValues: CalculatorFormValues = yield select(getFormValues(REDUX_FORM_NAME))\n  yield put(storeCalculateForm(formValues))\n  yield put(calculateStart())\n}\n\nexport function* calculateStartSaga() {\n  const formValues: CalculatorFormValues = yield select(\n    state => state.calculator.calculationForm\n  )\n  if (!formValues.fertilizers.length) {\n    yield put(stopSubmit(REDUX_FORM_NAME, {\n      fertilizers: {_error: \"Need fertilizers!\"}\n    }))\n    yield put(calculateError())\n    return\n  }\n  const {\n    ignore,\n    accuracy,\n    solution_volume,\n    solution_concentration,\n  } = formValues\n\n  // Тут замораживается UI из за вычислений. нужно либо оптимизировать либо использовать WebWorker\n  const result = calculate_v3(\n    formValues.recipe,\n    formValues.fertilizers,\n    {\n      ignore,\n      accuracy,\n      solution_volume,\n      solution_concentration,\n    }\n  )\n  yield put(calculateSuccess(result))\n}\n\nexport function* calculatorSagaWatcher() {\n  yield takeLatest(CALCULATE_START, calculateStartSaga);\n}\n\nexport function* calculatorFormChangeWatcher() {\n\n  yield takeLatest([\n      actionTypes.CHANGE,\n      actionTypes.BLUR,\n      actionTypes.ARRAY_PUSH,\n      actionTypes.ARRAY_REMOVE\n    ],\n    function* (action: FormAction) {\n      if (action.meta.form === REDUX_FORM_NAME) {\n        yield call(storeCalculateFormSaga)\n      }\n    });\n}\n\nexport default function* calculatorRootSaga() {\n  yield all([\n    fork(calculatorSagaWatcher),\n    fork(calculatorFormChangeWatcher),\n  ]);\n}\n","import {all, call, fork, put, select, takeLatest} from \"redux-saga/effects\";\nimport {actionTypes, change, FormAction, getFormValues} from \"redux-form\";\nimport {FERTILIZER_EDIT_FORM_NAME} from \"./constants\";\nimport {AddEditFormType} from \"@/components/Calculator/FertilizerManager/types\";\nimport {normalizeFertilizer} from \"@/calculator/fertilizer\";\nimport {equal} from \"@/utils\";\n\nfunction* updateFertilizerForm() {\n  const formValues: AddEditFormType = yield select(getFormValues(FERTILIZER_EDIT_FORM_NAME))\n  if (formValues.composition_enable) {\n    const npk = normalizeFertilizer(\n      {id:'', composition: formValues.composition},\n      false\n    ).elements\n    if (!equal(formValues.npk, npk)) {\n      console.log(formValues.npk,npk)\n      yield put(change(FERTILIZER_EDIT_FORM_NAME, 'npk', npk))\n    }\n    if (!formValues.composition?.length) {\n      yield put(change(FERTILIZER_EDIT_FORM_NAME, 'composition', [{formula: ''}]))\n\n    }\n  }\n\n}\n\nfunction* fertilizerEditFormChangeWatcher() {\n  yield takeLatest([\n      actionTypes.CHANGE,\n      actionTypes.BLUR,\n      actionTypes.ARRAY_PUSH,\n      actionTypes.ARRAY_REMOVE\n    ],\n    function* (action: FormAction) {\n      if (action.meta.form === FERTILIZER_EDIT_FORM_NAME) {\n        yield call(updateFertilizerForm)\n      }\n    });\n}\n\nexport default function* fertilizerManagerRootSaga() {\n  yield all([\n    fork(fertilizerEditFormChangeWatcher)\n  ]);\n}\n","import {all, fork} from 'redux-saga/effects'\nimport calculatorRootSaga from \"./components/Calculator/saga\";\nimport fertilizerManagerRootSaga from './components/Calculator/FertilizerManager/saga';\n\ntype AnySagaGenerator = Generator<any, any, any>;\n\nconst sagas: (() => AnySagaGenerator)[] = [\n  calculatorRootSaga,\n  fertilizerManagerRootSaga,\n]\n\nexport default function* rootSaga() {\n  yield all(sagas.map(s => fork(s)))\n}\n","export function assertNever<TState>(state: TState, _: never): TState {\n  return state;\n}\n","import {buildNPKFertilizer} from \"@/calculator/fertilizer\";\nimport {FertilizerInfo} from \"@/calculator/types\";\n\n// Бутылка-1 Макра-азотная\n// Селитра амиачная\n// Селитра калиевая\n// Селитра кальциевая\n//\n// Бутылка 2 Макра-серно-фосфорная\n// Сульфат аммония\n// Сульфат магния семиводный\n// Монофосфат калия\n\nexport const defaultFertilizers: FertilizerInfo[] = [\n  // buildNPKFertilizer(\n  //   \"Valagro 3:11:38\",\n  //   {\n  //     NO3: 3, P: 11, K: 38, Ca: 0, Mg: 4,\n  //   }),\n  // buildNPKFertilizer(\"Кальциевая селитра\",\n  //   {\n  //     NO3: 16, Ca: 24,\n  //   }),\n  // buildNPKFertilizer(\"Сульфат магния\", {Mg: 16.7, S: 13.3}),\n  // buildNPKFertilizer(\"Сульфат калия\", {K: 50, S: 18}),\n  // buildNPKFertilizer(\"Нитрат калия\", {NO3: 14, K: 46}),\n  // buildNPKFertilizer(\"Монофосфат калия\", {P: 50, K: 33}),\n  // {id: \"Сульфат калия\", composition: [{formula: \"K2SO4\", percent: 98}]},\n  {id: \"Сульфат магния (MgSO4*7H2O)\", composition: [{formula: \"MgSO4*7H2O\", percent: 98}]},\n  {id: \"Нитрат аммония (NH4NO3)\", composition: [{formula: \"NH4NO3\", percent: 98}]},\n  {id: \"Нитрат калия (KNO3)\", composition: [{formula: \"KNO3\", percent: 98}]},\n  {id: \"Сульфат калия (K2SO4)\", composition: [{formula: \"K2SO4\", percent: 98}]},\n  {id: \"Монофосфат калия (KH2PO4)\", composition: [{formula: \"KH2PO4\", percent: 98}]},\n  {id: \"Кальциевая селитра (Ca(NO3)2*4H2O)\", composition: [{formula: \"Ca(NO3)2*4H2O\", percent: 98}]},\n  {id: \"Сульфат аммония (NH4)2SO4)\", composition: [{formula: \"(NH4)2SO4\", percent: 98}]},\n  // {id: \"Магниевая селитра (Mg(NO3)2*6Н2О)\", composition: [{formula: \"Mg(NO3)2*6Н2О\", percent: 98}]},\n   buildNPKFertilizer(\"Магниевая селитра (Mg(NO3)2*6Н2О)\", {NO3: 7, Mg: 10}),\n\n]\n","import {ActionTypes, CalculatorState} from \"./types\";\nimport * as ActionNames from \"./constants\";\nimport {assertNever} from \"@/redux-helpers/helpers\";\nimport {defaultFertilizers} from \"./constants/fertilizers\";\nimport {DEFAULT_RECIPES} from \"./constants/recipes\";\nimport {updateOrPush} from \"@/utils\";\n\nconst initialState: CalculatorState = {\n  calculationForm: null,\n  result: null,\n  process: false,\n  error: false,\n  fertilizers: defaultFertilizers,\n  recipes: DEFAULT_RECIPES,\n}\n\n\nexport const reducer = (state: CalculatorState = initialState, action: ActionTypes): CalculatorState => {\n  switch (action.type) {\n    case ActionNames.STORE_CALCULATE_FORM:\n      return {...state, calculationForm: action.form}\n    case ActionNames.CALCULATE_START:\n      return {...state, process: true}\n    case ActionNames.CALCULATE_SUCCESS:\n      return {...state, process: false, result: action.result}\n    case ActionNames.CALCULATE_ERROR:\n      return {...state, process: false, error: true}\n\n    case ActionNames.FERTILIZERS_PUSH:\n      return {\n        ...state,\n        fertilizers: updateOrPush(state.fertilizers, action.payload, 'id'),\n      }\n    case ActionNames.FERTILIZERS_REMOVE:\n      return {...state, fertilizers: state.fertilizers.filter(f => action.payload.id !== f.id)}\n    case ActionNames.FERTILIZERS_SET:\n      return {...state, fertilizers: action.payload}\n    case ActionNames.FERTILIZERS_RESET:\n      return {...state, fertilizers: [...defaultFertilizers]}\n\n    case ActionNames.RECIPE_PUSH:\n      return {...state, recipes: updateOrPush(state.recipes, action.payload, 'name')}\n    case ActionNames.RECIPE_REMOVE:\n      return {...state, recipes: state.recipes.filter(f => action.payload.name !== f.name)}\n    case ActionNames.RECIPE_RESET:\n      return {...state, recipes: [...DEFAULT_RECIPES]}\n\n    default:\n      return assertNever<CalculatorState>(state, action)\n  }\n}\n","import {combineReducers} from \"redux\";\nimport {reducer as calculateReducer} from \"../components/Calculator/reducers\";\nimport {reducer as formReducer} from \"redux-form\";\n\nexport const rootReducers = combineReducers({\n  calculator: calculateReducer,\n  form: formReducer\n})\n","import {applyMiddleware, compose, createStore} from 'redux'\nimport createSagaMiddleware from 'redux-saga'\nimport rootSaga from \"../saga\";\n\nimport {rootReducers} from \"./rootReducers\";\nimport {defaultFertilizers} from \"@/components/Calculator/constants/fertilizers\";\nimport {DEFAULT_RECIPES} from \"@/components/Calculator/constants/recipes\";\n\n\nconst composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst sagaMiddleware = createSagaMiddleware()\n\nfunction loadPersistedState() {\n  let state: any = {}\n  if (localStorage.getItem('reduxState')) {\n    state = JSON.parse(localStorage.getItem('reduxState') as string)\n    if (state?.calculator && !state.calculator.fertilizers) {\n      state.calculator.fertilizers = defaultFertilizers\n    }\n    if (state?.calculator && !state.calculator.recipes) {\n      state.calculator.recipes = DEFAULT_RECIPES\n    }\n  }\n  return state\n}\n\nconst persistedState = loadPersistedState()\n\nconst middlewares = [sagaMiddleware]\n\nconst enhancers = composeEnhancers(\n    applyMiddleware(...middlewares),\n  )\n\n// TODO typing\nexport const store = createStore(\n  rootReducers,\n  persistedState,\n  enhancers\n)\n\nstore.subscribe(() => {\n  localStorage.setItem('reduxState', JSON.stringify(store.getState()))\n})\n\nsagaMiddleware.run(rootSaga)\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport Root from './Root'\nimport {store} from \"./redux\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Root store={store}/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n\n","import {entries, round, sum} from \"../utils\";\nimport {IONIC_STRENGTH} from \"./constants\";\nimport {FertilizerWeights} from './index';\nimport {Elements, MacroElements, MicroElements} from \"./types\";\nimport {ElementsMatrixType, getProfileRatioMatrix} from \"./profile\";\n\nexport interface NPKBalance {\n  anions: number,\n  cations: number,\n  ion_balance: number,\n  ratio: ElementsMatrixType,\n  EC: number\n}\n\n\nexport function calculateNPKBalance(npk: Elements): NPKBalance {\n  const ratio = getProfileRatioMatrix(npk)\n  const result: NPKBalance = {\n    anions: -0,\n    cations: 0,\n    ion_balance: 0,\n    ratio,\n    EC: 0,\n  }\n  for (let [el, w] of entries(npk)) {\n    let ionS = 0\n    if (el in IONIC_STRENGTH) {\n      // TODO починить тип\n      ionS = (IONIC_STRENGTH as any)[el] || 0\n    }\n    const st = w * ionS\n    if (Math.sign(st) < 0) {\n      result.anions += st\n    } else {\n      result.cations += st\n    }\n    result.ion_balance += st\n  }\n  // TODO понять что за магические числа\n  result.EC = 0.095 * result.cations + 0.19\n\n  entries(result).forEach(([k, v]) => {\n    if (k === \"ratio\") {\n      return\n    }\n    v = v as number\n    if (!isFinite(v)) {\n      v = 0\n    }\n    result[k] = round(v, 2)\n  })\n\n  return result\n}\n\nexport function getFillElementsByType<T>(value:T) : {macro: MacroElements<T>, micro: MicroElements<T>} {\n  return {\n    macro: {\n      NO3: value, NH4: value, P: value, K: value, Ca: value, Mg: value, S: value,\n    },\n    micro: {\n      Fe: value, Mn: value, B: value, Zn: value, Cu: value, Mo: value, Co: value, Si: value,\n    }\n  }\n\n}\n\nexport function getEmptyElements(): Elements {\n  const el = getFillElementsByType(0)\n  return {\n    ...el.micro,\n    ...el.macro,\n  }\n}\n\n// Считаем PPM раствора\nexport function calculatePPM(\n  fertilizers: FertilizerWeights[],\n  solution_volume=1,\n): number {\n  return round(sum(fertilizers.map(f => {\n    return f.weight * 1000\n  })) / solution_volume)\n}\n\n// ppm (мг/л) в EC (мСм/см).  k - коэфициент преобразования\nexport function ppmToEC(ppm: number, k: number=1.0): number {\n  return round(ppm * (1 / k)) / 1000\n}\n\n/**\n *\n * @param value\n * @param percent 0.0 to 1.0\n */\nexport function extract_percent(value: number, percent: number): number {\n  return value - (value / (1 + percent))\n\n}\n","export const keys = Object.keys as <T>(o: T) => (Extract<keyof T, string>)[];\nexport const entries = Object.entries as <T>(\n  o: T\n) => [Extract<keyof T, string>, Exclude<T[keyof T], undefined>][]\n\nexport const values = Object.values as <T>(\n  o: T\n) => (Exclude<T[keyof T], undefined>)[]\n\nexport function sum(values: number[]) {\n  return values.reduce((a, b) => a + b, 0)\n}\n\nexport function round(number: number, precision: number = 0) {\n  const p = Math.pow(10, precision)\n  return Math.round((number + Number.EPSILON) * p) / p\n}\n\nexport function countDecimals(value: number): number {\n  if (Math.floor(value.valueOf()) === value.valueOf()) return 0;\n  return value.toString().split(\".\")[1].length || 0;\n}\n\ntype ToMapResult<T> = { [K in string]: T }\n\nexport function toMap<T extends object>(list: T[], field: keyof T): ToMapResult<T> {\n  const m: ToMapResult<T> = {}\n  for (let i of list) {\n    let key = i[field] as any as string\n    m[key] = i\n  }\n  return m\n}\n\nexport function updateOrPush<T extends object>(list: T[], item: T, lookup: keyof T): T[] {\n  const newList = [...list]\n  let updated = false\n  for (let i = 0; i < list.length; i++) {\n    if (newList[i][lookup] === item[lookup]) {\n      newList[i] = item\n      updated = true\n      break\n    }\n  }\n  if (!updated) {\n    newList.push(item)\n  }\n  return newList\n}\n\n\nexport function equal(t1: any, t2: any): boolean {\n  return JSON.stringify(t1) === JSON.stringify(t2)\n}\n","import {entries, keys, round, sum, values} from \"../utils\";\nimport {calculateMassParts, parseMolecule, parseNitrates} from \"./chem\";\nimport {AtomNameType} from \"./constants\";\nimport {getEmptyElements} from \"./helpers\";\nimport {Elements, Fertilizer, FertilizerComposition, FertilizerInfo, NPKElements} from \"@/calculator/types\";\n\nconst NPKOxides = {\n  NO3: 'NO3',\n  NH4: 'NH4',\n  P: 'P2O5',\n  K: 'K2O',\n  Ca: 'CaO',\n  Mg: 'MgO',\n}\n\nexport function buildNPKFertilizer(id: string, npk: NPKElements): FertilizerInfo {\n  const composition: FertilizerComposition[] = entries(npk)\n    .filter(v => v[1] > 0)\n    .map(([k, v]) => {\n        let oxide: string = k\n        if (NPKOxides.hasOwnProperty(k)) {\n          oxide = NPKOxides[k] as string\n        }\n        return {\n          formula: oxide,\n          percent: v\n        }\n      }\n    )\n  return {\n    id,\n    composition\n  }\n}\n\nexport function compositionToNPKElements(composition: FertilizerComposition[]): Elements {\n  const elements: Elements = getEmptyElements()\n  for (let comp of composition) {\n    let atomCounts = parseMolecule(comp.formula)\n    let massParts = calculateMassParts(atomCounts)\n    for (let [atom, mass] of entries(massParts)) {\n      let subAtoms = {[atom]: 1}\n      if (atom === \"N\") {\n        subAtoms = parseNitrates(comp.formula)\n        if (keys(elements).includes(comp.formula as keyof Elements)) {\n          mass = 1\n        }\n      }\n      const totalSubAtoms = sum(values(subAtoms))\n      for (let [a, k] of entries(subAtoms)) {\n        if (elements.hasOwnProperty(a)) {\n          let percent = 100\n          if (comp.percent) {\n            percent = comp.percent;\n          }\n          percent *= (k / totalSubAtoms)\n          elements[a as keyof Elements] += round(percent * mass, 2)\n        }\n      }\n    }\n  }\n  return elements\n}\n\n/**\n * Конвертация чистых элементов в NPK оксиды\n * @param {Elements} elements - чистые элементы\n */\nexport function elementsToNPK(elements: NPKElements): Elements {\n  const e = entries(elements).map(([atom, val]) => {\n    const oxide: string = (NPKOxides as any)[atom] || atom\n    const massParts = calculateMassParts(parseMolecule(oxide))\n    const skipElements = massParts.hasOwnProperty(\"N\") || massParts.hasOwnProperty(\"S\")\n    const elementMassPart = massParts[atom as AtomNameType]\n    if (!skipElements && elementMassPart) {\n      const k = round(sum(values(massParts)) / elementMassPart, 2)\n      val = round(val * k, 2)\n    }\n    return [atom, val]\n  })\n  return Object.fromEntries(e)\n}\n\n/**\n * Расчет состава удобрения в чистые элементы\n * @param {FertilizerInfo} fertilizerInfo\n * @param convertMass - преобразовать ли в чистые элементы\n * @return {Fertilizer}\n */\nexport function normalizeFertilizer(fertilizerInfo: FertilizerInfo, convertMass = true): Fertilizer {\n  let elements: Elements = getEmptyElements()\n  let composition = fertilizerInfo.composition;\n  if (fertilizerInfo.npk) {\n    composition = buildNPKFertilizer(fertilizerInfo.id, fertilizerInfo.npk).composition\n  }\n  if (composition) {\n    elements = compositionToNPKElements(composition)\n  }\n  if (!convertMass) {\n    // Оксиды нужны только для отображения.\n    elements = elementsToNPK(elements)\n  }\n  return {\n    id: fertilizerInfo.id,\n    elements\n  }\n\n}\n\n","import {ATOMIC_MASS, AtomNameType} from \"../constants\";\n\nexport interface SubgroupType {\n  formula: string,\n  count: number\n}\n\nexport type ParsedMolecule = { [Atom in AtomNameType]?: number }\n\n/**\n * @param formula String A molecular formula, eg CH(CH(CH2)2)2OH\n * @return subgroups An array of first-level subgroups.\n * Eg [{formula: 'CH', count:1}, {formula:'CH(CH2)2', count:2,\n * {formula:'OH', count:1}]\n */\nexport const findSubgroups = function (formula: string): SubgroupType[] {\n  let finishingNestedSubgroup;\n  let subgroups: SubgroupType[] = [];\n  let currentFormula = '', currentCount = '';\n  let level = 0;\n\n  //This pushes the current state of currentFormula and currentCount to subgroups.\n  //It also resets currentFormula and currentCount.\n  const pushSubgroup = function () {\n    if (!currentFormula) return;\n    const countStr = currentCount || '1';\n    const count = parseInt(countStr, 10);\n    subgroups.push({formula: currentFormula, count: count});\n    currentFormula = '';\n    currentCount = '';\n  };\n\n  let i=-1;\n\n  for (let ch of formula) {\n    i++\n    if (/[A-Za-z]/.test(ch)) {\n      if (finishingNestedSubgroup) {\n        pushSubgroup();\n        finishingNestedSubgroup = false;\n      }\n      currentFormula += ch;\n      continue;\n    } else if (ch === '(') {\n      //If we are outside of parenthesis start a new subgroup\n      if (level === 0 && currentFormula) {\n        pushSubgroup();\n      }\n      if (level > 0) {\n        //If we are in a subgroup, the ( is part of the formula\n        currentFormula += ch;\n      }\n      level += 1;\n    } else if (ch === ')') {\n      level -= 1;\n      if (level === 0) {\n        //Finishing top-level subgroup; mark it so we can count multiples\n        finishingNestedSubgroup = true;\n      } else {\n        //If we are in a subgroup, the ( is part of the formula\n        currentFormula += ch;\n      }\n    } else if (/[*+]/.test(ch)) {\n      if (level === 0 && currentFormula) {\n        pushSubgroup();\n      }\n      if (level > 0) {\n        currentFormula += ch\n      }\n      level += 1\n    } else if (/\\d/.test(ch)) {\n      // TODO check numbers > 9\n      if (finishingNestedSubgroup) {\n        currentCount += ch;\n      } else {\n        if (i === 0) {\n          currentCount += ch\n          continue\n        }\n        currentFormula += ch;\n      }\n    }\n  }\n  //Once more to pick up any straggling formula\n  pushSubgroup();\n  return subgroups;\n}\n\n/**\n * @param formula String A primitive (ie, without subgroups/parentheses, like\n * CH4) molecular formula\n * @return elementCounts A map of element:count, eg {C:1, H:4}\n * @api private\n */\nconst _decomposePrimitiveFormula = function (formula: string): ParsedMolecule {\n  let elementCounts: ParsedMolecule = {};\n  let match = formula.match(elementRe)\n  if (!match) {\n    return elementCounts\n  }\n  for (let token of match) {\n    //matcher will be of the form ['Na2', 'Na', '2', ...] or ['H', 'H', '', ...]\n    let matcher = token.match(singleElementRe);\n    if (!matcher) {\n      continue\n    }\n    const element = matcher[1];\n    const count = parseInt((matcher[2] || '1'), 10);\n\n    if (!ATOMIC_MASS.hasOwnProperty(element)) {\n      continue\n    }\n    let _el = element as AtomNameType\n    if (element in elementCounts) {\n      elementCounts[_el] = (elementCounts[_el] || 0) + count;\n    } else {\n      elementCounts[_el] = count;\n    }\n  }\n\n\n  return elementCounts;\n};\n/**\n * @param formula String A molecular formula, eg CH(CH3)3\n * @return elementCounts A map of element:count, eg\n * {\n *   C: 4,\n *   H: 10\n * }\n */\nexport const decomposeFormula = function (formula: string): ParsedMolecule {\n  if (!formula) return {};\n  const subgroups = findSubgroups(formula);\n  if (subgroups.length === 1 && subgroups[0].formula === formula) {\n    //We have a primitive formula that we can just count!\n    return _decomposePrimitiveFormula(formula);\n  } else {\n    //We have subgroups\n    let combinedCounts: ParsedMolecule = {};\n    subgroups.forEach(function (subgroup) {\n      const subgroupCounts = decomposeFormula(subgroup.formula);\n      let elementCount;\n      for (let element in subgroupCounts) {\n        if (ATOMIC_MASS.hasOwnProperty(element)) {\n          let _el = element as AtomNameType\n          elementCount = (subgroupCounts[_el] || 0) * subgroup.count;\n          if (element in combinedCounts) {\n            combinedCounts[_el] = (combinedCounts[_el] || 0) + elementCount;\n          } else {\n            combinedCounts[_el] = elementCount;\n          }\n\n        }\n      }\n    });\n    return combinedCounts;\n  }\n}\n\nlet elementRe: RegExp = /([A-Z][a-z]{0,2})(\\d*)/g\nlet singleElementRe: RegExp = /([A-Z][a-z]{0,2})(\\d*)/\n\n\n","import {entries, round, sum, values} from \"../utils\";\nimport {ATOMIC_MASS, AtomNameType} from \"./constants\";\nimport {decomposeFormula, findSubgroups} from './molecular-parser/molecularParser';\n\nexport type DecomposedChemFormula = {\n  [Atom in AtomNameType]?: number;\n}\n\ntype ParsedNitrateType = {\n  NH4: number,\n  NO3: number\n}\n\n/**\n *\n * @param formula\n * @return\n */\nexport function parseMolecule(formula: string): DecomposedChemFormula {\n  return decomposeFormula(formula)\n}\n\nexport function parseNitrates(formula: string): ParsedNitrateType {\n  const nitrates: ParsedNitrateType = {\"NH4\": 0, \"NO3\": 0}\n  const re = /NH4|NO3/g\n  for (let s of findSubgroups(formula)) {\n\n    if (nitrates.hasOwnProperty(s.formula)) {\n      nitrates[s.formula as keyof typeof nitrates] += s.count\n      continue\n    }\n    if (s.formula !== formula) {\n      for (let [n, c] of entries(parseNitrates(s.formula))) {\n        (nitrates as ParsedNitrateType)[n] += c\n      }\n    } else {\n      for (let r of s.formula.matchAll(re)) {\n        (nitrates as ParsedNitrateType)[r[0] as keyof ParsedNitrateType] += s.count\n      }\n    }\n  }\n  return nitrates\n}\n\nexport function calculateMassParts(formula: DecomposedChemFormula): DecomposedChemFormula {\n  const atomMasses = Object.fromEntries(entries(formula).map(\n    ([atom, count]) =>\n      [atom, ATOMIC_MASS[atom] * count]\n    )\n  ) as DecomposedChemFormula\n\n  const totalMass = sum(values(atomMasses))\n  return Object.fromEntries(\n    entries(atomMasses).map(([atom, mass]) => [atom, round(mass / totalMass, 2)])\n  ) as DecomposedChemFormula\n}\n\n","import * as ActionNames from \"./constants\";\nimport {CalculateResult} from \"@/calculator\";\nimport {CalculatorFormValues, Recipe} from \"@/components/Calculator/types\";\nimport {FertilizerInfo} from \"@/calculator/types\";\n\nexport const storeCalculateForm = (form: CalculatorFormValues) => ({\n  type: ActionNames.STORE_CALCULATE_FORM,\n  form,\n} as const)\n\nexport const calculateStart = () => ({\n  type: ActionNames.CALCULATE_START,\n} as const)\n\nexport const calculateSuccess = (result: CalculateResult) => ({\n  type: ActionNames.CALCULATE_SUCCESS,\n  result\n} as const)\n\nexport const calculateError = () => ({\n  type: ActionNames.CALCULATE_ERROR,\n} as const)\n\nexport const fertilizerPush = (payload: FertilizerInfo) => ({\n  type: ActionNames.FERTILIZERS_PUSH,\n  payload\n})\n\nexport const fertilizerRemove = (payload: FertilizerInfo) => ({\n  type: ActionNames.FERTILIZERS_REMOVE,\n  payload\n})\n\nexport const fertilizerSet = (payload: FertilizerInfo[]) => ({\n  type: ActionNames.FERTILIZERS_SET,\n  payload,\n})\n\nexport const fertilizerReset = () => ({\n  type: ActionNames.FERTILIZERS_RESET,\n})\n\n\nexport const recipePush = (payload: Recipe) => ({\n  type: ActionNames.RECIPE_PUSH,\n  payload\n})\n\nexport const recipeRemove = (payload: Recipe) => ({\n  type: ActionNames.RECIPE_REMOVE,\n  payload\n})\n\nexport const recipeReset = () => ({\n  type: ActionNames.RECIPE_RESET,\n})\n\n\n","\nexport const FERTILIZER_EDIT_FORM_NAME = 'fertilizerEdit'\n","import {Recipe} from \"@/components/Calculator/types\";\n\nexport const DEFAULT_RECIPES: Recipe[] = [\n  {\n    name: \"Универсальное\",\n    elements: {NO3: 214, NH4: 14, P: 60, K: 250, Ca: 170, Mg: 50, S: 46}\n  },\n  {\n    name: \"Перец вегетация\",\n    color: 'green',\n    elements: {NO3: 224, NH4: 14, P: 39, K: 264, Ca: 200, Mg: 36, S: 56}\n  },\n  {\n    name: \"Перец цветение\",\n    color: 'yellow',\n    elements: {NO3: 150, NH4: 0, P: 90, K: 280, Ca: 170, Mg: 50, S: 56}\n  },\n  {\n    name: \"Перец плодоношение\",\n    color: 'red',\n    elements: {NO3: 140, NH4: 0, P: 50, K: 330, Ca: 170, Mg: 50, S: 56}\n  },\n  {\n    name: \"Томат вегетация\",\n    color: 'green',\n    elements: {NO3: 220, NH4: 0, P: 50, K: 260, Ca: 220, Mg: 60, S: 141}\n  },\n  {\n    name: \"Томат цветение\",\n    color: 'yellow',\n    elements: {NO3: 220, NH4: 0, P: 50, K: 280, Ca: 200, Mg: 60, S: 141}\n  },\n  {\n    name: \"Томат плодоношение\",\n    color: 'red',\n    elements: {NO3: 200, NH4: 0, P: 50, K: 320, Ca: 180, Mg: 60, S: 141}\n  },\n  {\n    name: \"Огурцы\",\n    elements: {NO3: 180, NH4: 0, P: 80, K: 320, Ca: 180, Mg: 50, S: 44}\n  },\n  {\n    name: \"Салат\",\n    elements: {NO3: 200, NH4: 0, P: 80, K: 200, Ca: 170, Mg: 50, S: 0}\n  },\n  {\n    name: \"Бобовые\",\n    elements: {NO3: 80, NH4: 0, P: 110, K: 400, Ca: 170, Mg: 50, S: 0}\n  },\n  {\n    name: \"Капуста\",\n    elements: {NO3: 200, NH4: 0, P: 70, K: 200, Ca: 170, Mg: 50, S: 0}\n  },\n  {\n    name: \"Клубника\",\n    elements: {NO3: 150, NH4: 0, P: 70, K: 350, Ca: 200, Mg: 50, S: 48}\n  },\n  {\n    name: \"Картофель\",\n    elements: {NO3: 200, NH4: 0, P: 80, K: 200, Ca: 170, Mg: 50, S: 0}\n  },\n  {\n    name: \"Тыква\",\n    elements: {NO3: 100, NH4: 0, P: 95, K: 320, Ca: 170, Mg: 50, S: 0}\n  },\n]\n","import {Elements, NPKElements} from \"./types\";\nimport {entries, round} from \"../utils\";\nimport {ATOMIC_MASS, MACRO_ELEMENT_NAMES} from \"./constants\";\nimport {extract_percent} from \"./helpers\";\n\nexport const ALLOWED_ELEMENT_IN_MATRIX = [\"N\", ...MACRO_ELEMENT_NAMES]\nexport type ALLOWED_ELEMENT_IN_MATRIX = typeof ALLOWED_ELEMENT_IN_MATRIX[number]\n\ntype ElementInMatrix<T = number> = {\n  [K in ALLOWED_ELEMENT_IN_MATRIX]: T\n}\n\n\nexport interface ElementsMatrixType extends ElementInMatrix<ElementInMatrix> {\n}\n\nexport interface ProfileInfo {\n  ratio: ElementsMatrixType\n  anions: number,\n  cations: number,\n  ion_balance: number,\n  EC: number\n}\n\nexport interface ChangeProfileOptions {\n  ratio: Partial<ElementInMatrix<Partial<ElementInMatrix>>>,\n  EC: number,\n\n}\n\nexport interface ChangeProfileResult {\n  npk: Elements,\n  info: ProfileInfo\n}\n\n// export function changeProfile(npk: Elements, options: ChangeProfileOptions): ChangeProfileResult {\n//\n// }\n\n/**\n * Расчет соотношений N/K и тд\n * @param npk\n * @return ElementsMatrixType\n */\nexport function getProfileRatioMatrix(npk: NPKElements): ElementsMatrixType {\n  let elMap: ElementInMatrix = {}\n  for (let [El, ppm] of entries(npk)) {\n    if (ALLOWED_ELEMENT_IN_MATRIX.includes(El)) {\n      elMap[El] = ppm\n    }\n  }\n  elMap.N = (npk.NH4 || 0) + (npk.NO3 || 0)\n  return Object.fromEntries(entries(elMap).map(\n    ([el, ppm]) =>\n      [el, Object.fromEntries(entries(elMap).map(\n        ([el2, ppm2]) => {\n          let r = round(ppm / ppm2, 3)\n          if (!isFinite(r)) {\n            r = 0\n          }\n          return [el2, el === el2 ? 1: r]\n        }\n        )\n      )]\n    )\n  )\n}\n\ntype PartialElementsMatrix = {\n  [K in keyof ElementInMatrix]?: ElementInMatrix\n}\nexport function convertProfileWithRatio(\n  npk: NPKElements,\n  ratio: PartialElementsMatrix): NPKElements {\n  const newNPK: NPKElements = {...npk}\n  const N = (newNPK.NO3 || 0) + (newNPK.NH4 || 0)\n  const v = getProfileRatioMatrix(npk)\n  for (let [el1, toEls] of entries(ratio)) {\n    for (let [el2, r] of entries(toEls)) {\n      if (el1 === el2) {\n        continue\n      }\n      let f = (v: number, r: number) => v * r\n      if (el1 === \"N\") {\n        let _N = f((newNPK[el2 as MACRO_ELEMENT_NAMES] || 0), r)\n        newNPK.NH4 = extract_percent(_N, v.NH4.NO3)\n        newNPK.NO3 = _N - newNPK.NH4\n      } else {\n        let elM = newNPK[el2 as MACRO_ELEMENT_NAMES] || 0\n        if (el2 === 'N') {\n          elM = N\n        }\n        newNPK[el1 as MACRO_ELEMENT_NAMES] = elM * r\n      }\n    }\n  }\n  return Object.fromEntries(entries(newNPK)\n    .map(([el, v]) => (\n      [el, round(v, 1)]\n    )))\n}\n\n/**\n * Copied from siv237/HPG\n * @param npk\n * @param EC new EC\n * @return new NPK\n */\nexport function convertProfileWithEC(npk: NPKElements, EC: number): NPKElements {\n\n  const v = getProfileRatioMatrix(npk)\n  // TODO понять и отрефакторить эту магию\n  const rN = (v.K.Mg * v.K.Ca) / (\n    v.K.Ca * v.K.N + v.K.Mg * v.K.N + v.K.Mg * v.K.Ca + v.K.Mg * v.K.Ca * v.K.N\n  );\n  const rK = (v.K.N * v.K.Mg * v.K.Ca) / (\n    v.K.Ca * v.K.N + v.K.Mg * v.K.N + v.K.Mg * v.K.Ca + v.K.Mg * v.K.Ca * v.K.N);\n  const rCa = (v.K.Mg * v.K.N) / (\n    v.K.Ca * v.K.N + v.K.Mg * v.K.N + v.K.Mg * v.K.Ca + v.K.Mg * v.K.Ca * v.K.N);\n  const rMg = (v.K.Ca * v.K.N) / (\n    v.K.Ca * v.K.N + v.K.Mg * v.K.N + v.K.Mg * v.K.Ca + v.K.Mg * v.K.Ca * v.K.N\n  );\n  const vNH4NO3 = (npk.NH4 || 0) / ((npk.NH4|| 0) + (npk.NO3||0))\n  const rNH4 = (rN * vNH4NO3) / (1 + vNH4NO3);\n\n  const molN = ATOMIC_MASS.N\n  // const molP = ATOMIC_MASS.P\n  const molK = ATOMIC_MASS.K\n  const molCa = ATOMIC_MASS.Ca\n  const molMg = ATOMIC_MASS.Mg\n\n  const r = (\n    0.10526315789473684211 * molN * molCa * molMg * molK * (100 * EC - 19)) / (\n    rNH4 * molCa * molMg * molK\n    + 2 * rCa * molN * molMg * molK\n    + 2 * rMg * molN * molCa * molK\n    + rK * molN * molCa * molMg\n  );\n  const N = rN * r;\n  const NH4 = extract_percent(N, v.NH4.NO3)\n\n  let newNpk = {\n    ...npk,\n    NH4,\n    NO3 : N - NH4,\n    K : rK * r,\n    Ca : rCa * r,\n    Mg : rMg * r,\n  }\n  return Object.fromEntries(entries(newNpk)\n    .map(([el, v]) => (\n      [el, round(v, 1)]\n    )))\n}\n"],"sourceRoot":""}