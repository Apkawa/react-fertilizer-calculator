{"version":3,"sources":["components/ui/IconButton.tsx","components/ui/ReduxForm/Input.tsx","components/ui/ReduxForm/normalizers.ts","hooks/ReduxForm.ts","components/Calculator/FertilizerSelect/SelectedListItem.tsx","components/ui/ReduxForm/Checkbox.tsx","components/ui/Dropdown/context.ts","components/ui/Dropdown/DropdownItem.tsx","components/ui/Dropdown/DropdownList.tsx","components/ui/Dropdown/Dropdown.tsx","components/ui/Modal/ModalContainer.tsx","components/ui/Icon.tsx","components/ui/Modal/Modal.tsx","components/Calculator/FertilizerSelect/AddItemElementForm.tsx","components/Calculator/FertilizerSelect/AddItemFertilizerEditForm.tsx","components/Calculator/FertilizerSelect/AddItem.tsx","components/Calculator/FertilizerSelect/SelectedList.tsx","components/Calculator/FertilizerSelect/Container.tsx","components/Calculator/FertilizerSelect/index.ts","components/ui/ReduxForm/validators.ts","components/Calculator/Options/IgnoreElement.tsx","components/ui/ReduxForm/Radio.tsx","components/Calculator/Options/Accuracy.tsx","components/Calculator/Options/Solution.tsx","components/Calculator/Options/Dilution.tsx","components/Calculator/Options/Options.tsx","components/Calculator/Options/RecipeElementForm.tsx","components/Calculator/Options/RecipeTuneForm.tsx","components/Calculator/Options/Recipe.tsx","components/Calculator/Result/ResultFertilizerList.tsx","components/Calculator/Result/hooks.ts","calculator/dilution.ts","components/Calculator/Result/ResultDilution.tsx","components/Calculator/Result/Result.tsx","utils/csv.ts","components/Calculator/ImportExport/ImportFertilizers.tsx","utils/downloads.ts","components/Calculator/ImportExport/ExportFertilizers.tsx","components/Calculator/ImportExport/ExportRecipes.tsx","components/Calculator/ImportExport/ImportRecipes.tsx","components/ui/styled.ts","components/Calculator/index.tsx"],"names":["IconButton","forwardRef","props","buttonRef","IconComponent","component","size","children","extraProps","useState","containerSize","setSize","theme","useTheme","useEffect","current","offsetWidth","type","ref","color","colors","background","StyledInput","styled","RebassInput","WrappedInput","input","label","lang","placeholder","Input","name","number","value","parseInt","decimal","parseFloat","useFormName","useContext","ReduxFormContext","form","useFormValues","formName","dispatch","useDispatch","useSelector","state","getFormValues","change","Element","delta","bg","flex","mx","px","minWidth","maxWidth","fontSize","flexDirection","alignItems","round","SelectedListItem","item","onRemove","needWeight","normalizedFertilizer","normalizeFertilizer","width","justifyContent","id","FERTILIZER_ELEMENT_NAMES","map","v","elements","key","margin","textAlign","padding","alignSelf","Cross","onClick","WrappedCheckbox","checked","Checkbox","DropdownContext","React","createContext","ItemContainer","sx","position","zIndex","backgroundColor","content","left","top","opacity","height","StyledItemBox","Box","disabled","css","DropdownItem","index","ctx","onItemClick","checkDisabledItem","renderItem","DropdownList","items","itemRef","useRef","setHeight","offsetHeight","maxHeight","overflowY","Array","from","s","i","length","style","IconDown","ChevronDownSquare","text","Dropdown","renderValue","opened","setOpened","setItem","setValue","editing","setEditing","containerRef","handleClickOutside","event","contains","target","document","addEventListener","removeEventListener","onClickItemHandler","onChange","context","Provider","val","onKeyDown","stopPropagation","onEdit","onBlur","right","StyledOverlay","Flex","window","pageYOffset","ModalContainer","modalRoot","el","querySelector","createElement","setAttribute","body","appendChild","useModalRoot","ReactDOM","createPortal","Helmet","Icon","Modal","button","container","closed","setClose","onClose","modalActions","open","close","renderCbProps","modal","title","AddItemElementForm","step","min","max","autoComplete","toString","getElements","f","AddItemFertilizerEditForm","fertilizer","setElements","MACRO_ELEMENT_NAMES","AddItem","onAdd","fertilizers","calculator","calculationForm","selected","setSelected","fertilizersIDs","pr","includes","Plus","SelectedList","fields","error","meta","result","calculatedFertilizersWeights","Object","fromEntries","base_weight","push","marginTop","remove","Container","FieldArray","validate","message","IgnoreElement","Radio","normalize","ACCURACY_VARIANTS","Accuracy","a","Solution","htmlFor","pattern","paddingTop","Dilution","dilution_enabled","REDUX_FORM_NAME","display","Options","my","marginLeft","getRecipeFieldName","RecipeElementForm","ELEMENT_IN_MATRIX","ALLOWED_ELEMENT_IN_MATRIX","filter","RecipeTuneForm","formValue","recipe","setRecipe","recipeInfo","calculateNPKBalance","ratio","setRatio","EC","setEC","onChangeRatio","El1","El2","currentEC","newNpk","convertProfileWithRatio","convertProfileWithEC","RecipeInput","onChangeRecipe","ion_balance","NH4","NO3","K","Mg","Ca","N","P","el2","onSave","e","StyledBalanceCell","m","Recipe","recipes","values","NPKBalance","getEmptyElements","entries","zeroValues","recipeRemove","onRemoveItemHandler","marginRight","Save","recipePush","Broom","n","Tune","ResultFertilizerList","accuracy","weight","countDecimals","volume","usePPM","solution_volume","fertilizerWeights","calculatePPM","useFertilizerSolutionGroup","fertilizersWeights","fertilizerWeightsMap","toMap","groups","nf","A","S","B","C","groupFertilizerBySolution","sort","ResultDilution","solution_concentration","dilution_volume","dilution_concentration","fertilizerWeightGroups","ppm","dilution","sources","concentration","dilution_solution","d","ppmToEC","StyledList","ul","Result","score","deltaElements","k","score_display","getScoreDisplay","g","f_weights","stats","count","time","csvParse","parse","csvExport","stringify","COLUMNS","ImportFertilizers","createRef","newSize","handleOnChange","console","log","files","file","reader","FileReader","onload","csv","p","columns","isNaN","splice","npk","buildNPKFertilizer","fertilizerPush","loadCSV","readAsText","Import","accept","saveData","data","fileName","blob","Blob","url","URL","createObjectURL","href","download","click","revokeObjectURL","ExportFertilizers","rows","cols","csvData","header","Export","ExportRecipes","ImportRecipes","mobileStyles","styles","initialValues","DEFAULT_RECIPES","CalculatorContainer","handleSubmit","Form","onSubmit","calculateStart","FertilizerSelect","marginBottom","paddingBottom","flexWrap","Restart","fertilizerReset","recipeReset","InitializerCalculator","reduxForm","ReduxCalculator","connect"],"mappings":"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","file":"static/js/6.73513ebe.chunk.js","sourcesContent":["import React, {forwardRef, MouseEventHandler, PropsWithChildren, useEffect, useState} from \"react\";\nimport {Button, ButtonProps} from \"rebass\";\nimport {EmotionIcon} from '@emotion-icons/emotion-icon'\n\nimport {useTheme} from \"emotion-theming\";\nimport {Theme} from \"@/themes/types\";\n\n\ninterface IconButtonProps extends\n  PropsWithChildren<Omit<ButtonProps, keyof React.HTMLProps<HTMLButtonElement>>> {\n  component: EmotionIcon,\n  disabled?: boolean,\n  onClick?: MouseEventHandler<HTMLButtonElement>,\n  size?: number | string\n}\n\nexport const IconButton = forwardRef<HTMLButtonElement, IconButtonProps>(\n  (props, buttonRef) => {\n    const {\n      component: IconComponent,\n      size = \"1.5em\",\n      children,\n      ...extraProps\n    } = props\n    const [containerSize, setSize] = useState<number | string>(size || 0)\n    const theme = useTheme<Theme>()\n\n    useEffect(() => {\n      if (!size && buttonRef && 'current' in buttonRef) {\n        setSize(buttonRef.current?.offsetWidth || 0)\n      }\n    }, [buttonRef, setSize, size])\n\n    return (\n      <Button type=\"button\" {...extraProps} ref={buttonRef}>\n        <IconComponent\n          color={theme.colors?.background}\n          size={containerSize}\n        />\n        {children}\n      </Button>\n    )\n  })\n","import React from \"react\";\nimport {Field as ReduxField} from \"redux-form\";\n\nimport {Input as RebassInput, InputProps as RebassInputProps} from \"@rebass/forms\";\nimport {ReduxFormComponentType, WrapperInputType} from \"./types\";\nimport styled from \"styled-components\";\n\ninterface InputProps extends RebassInputProps {\n  label?: string\n}\n\nexport const StyledInput = styled(RebassInput)`\n  ::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n  }\n  ::-webkit-outer-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n  }\n`\n\nexport const WrappedInput: WrapperInputType<InputProps> = ({input, label, type = \"text\", ...props}: any) =>\n  <StyledInput  {...props}\n                {...input}\n                type={type}\n                lang=\"en-US\"\n                placeholder={label}\n  />\n\n\n// TODO вывести тип\nexport const Input: ReduxFormComponentType<InputProps> = (\n  {\n    name,\n    ...props\n  }) => {\n\n  return (\n    <ReduxField\n      component={WrappedInput}\n      name={name}\n      {...props as any}\n    />\n  )\n}\n","\n\nexport function number(value: any) {\n  return value && parseInt(value)\n}\n\nexport function decimal(value: any) {\n  return value && parseFloat(value)\n}\n","import {useContext} from 'react'\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {change, FormContext, getFormValues, ReduxFormContext} from \"redux-form\";\n\nexport function useReduxForm(): FormContext {\n  return useContext(ReduxFormContext)\n}\n\nexport function useFormName(): string {\n  return useReduxForm().form\n}\n\nexport function useFormValues<FormValues=object>(formName: string): [FormValues, (name: string, value: any) => void] {\n  const dispatch = useDispatch()\n  const values = useSelector(state => getFormValues(formName)(state)) as FormValues\n\n  const setValue = (name: string, value: any) => {\n    dispatch(change(formName, name, value))\n  }\n  return [\n    values,\n    setValue\n    ]\n}\n","import React, {FunctionComponent} from \"react\";\nimport {Box, Card, Flex, Text} from \"rebass\";\nimport {Cross} from \"@styled-icons/entypo/Cross\"\nimport {FertilizerType} from \"./types\";\nimport {normalizeFertilizer} from \"@/calculator/fertilizer\";\nimport {FERTILIZER_ELEMENT_NAMES} from \"@/calculator/constants\";\nimport {IconButton} from \"../../ui/IconButton\";\nimport {round} from \"@/utils\";\n\ninterface ElementProps {\n  name: string,\n  value: number,\n  delta?: number,\n}\n\nexport const Element: FunctionComponent<ElementProps> = (props) => {\n  const {name, value, delta} = props\n  return (\n    <Box bg={name} flex={1} mx=\"2px\" px={1} color={'black'} minWidth=\"2.1em\" maxWidth=\"3em\" fontSize={1}>\n      <Flex flexDirection='column' alignItems={'center'}>\n        <Box>{name}</Box>\n        <Box>{round(value, 1)}</Box>\n        {typeof delta !== \"undefined\"? <Box>{delta}</Box>: null}\n      </Flex>\n    </Box>\n  )\n}\n\ninterface SelectedListItemProps {\n  item: FertilizerType,\n  onRemove: () => void,\n  needWeight?: number,\n}\n\n\nexport const SelectedListItem: FunctionComponent<SelectedListItemProps> = ({item, onRemove, needWeight}) => {\n  const normalizedFertilizer = normalizeFertilizer(item, false)\n  return (\n    <Card width={'auto'}>\n      <Flex justifyContent={'space-between'} alignItems=\"center\">\n        <Box flex={1}>\n          <Text flex={1}>\n            {item.id}\n          </Text>\n          <Flex>\n            {\n              FERTILIZER_ELEMENT_NAMES.map((name) => {\n                  let v = normalizedFertilizer.elements[name]\n                  if (!v) {\n                    return null\n                  }\n                  return <Element\n                    name={name}\n                    key={name}\n                    value={v}\n                  />\n                }\n              )\n            }\n          </Flex>\n        </Box>\n        <Flex>\n          <Flex alignItems=\"center\" justifyContent=\"center\" margin={1}>\n            <Text textAlign=\"center\" minWidth=\"3em\">\n              {needWeight || 0}\n            </Text>\n          </Flex>\n          <IconButton\n            padding={1}\n            alignSelf=\"center\"\n            component={Cross}\n            onClick={() => onRemove()}\n          />\n        </Flex>\n      </Flex>\n    </Card>\n  )\n}\n","import React from \"react\";\n\nimport {Checkbox as RebassCheckbox, CheckboxProps as RebassCheckboxProps, Label} from \"@rebass/forms\";\nimport {Field as ReduxField} from \"redux-form\";\nimport {ReduxFormComponentType, WrapperInputType} from \"./types\";\n\ninterface CheckboxProps extends RebassCheckboxProps {\n  label: string\n}\n\nconst WrappedCheckbox: WrapperInputType<CheckboxProps> = ({input, label, ...props}: any) =>\n  <Label>\n    <RebassCheckbox\n      {...props} {...input}\n      checked={input.value}\n    />\n    {label}\n  </Label>\n\n// TODO вывести тип\nexport const Checkbox: ReduxFormComponentType<CheckboxProps> = ({name, ...props}) => {\n  return (\n    <ReduxField\n      component={WrappedCheckbox}\n      name={name}\n      {...props as any}\n    />\n  )\n}\n\n","import React, {Context} from \"react\";\nimport {ItemCallback, RenderItemCallback} from \"./types\";\n\n// TODO  сделать генерик\nexport interface DropdownContextInterface<T=any> {\n  onItemClick?: ItemCallback<T>,\n  renderItem?: RenderItemCallback<T>\n  checkDisabledItem?: ItemCallback<T,  boolean>,\n}\n\nexport type DropdownContext<T> = Context<DropdownContextInterface<T>>\nexport const DropdownContext: DropdownContext<any> = React.createContext({})\n\n\n","import React, {FunctionComponent, useContext} from \"react\";\nimport {Box, Flex} from \"rebass\";\n// import styled from '@emotion/styled'\nimport {DropdownContext} from \"./context\";\nimport styled, {css} from \"styled-components\";\n\ninterface DropdownItemProps<T> {\n  value: T,\n  index: number,\n}\n\n\nconst ItemContainer: FunctionComponent = ({\n                                            children,\n                                          }) => {\n  return <Flex\n    padding={2}\n    sx={{\n      position: \"relative\",\n      zIndex: 1,\n      '&::before': {\n        backgroundColor: 'highlight',\n        content: '\"\"',\n        position: \"absolute\",\n        left: 0,\n        top: 0,\n        opacity: 0,\n        width: '100%',\n        height: '100%',\n        zIndex: -1,\n      },\n      '&:hover::before': {\n        opacity: 0.1,\n        // boxShadow: \"inset 0 0 0 99999px rgba(0,0,0,0.1)\"\n      }\n    }}\n  >\n    {children}\n  </Flex>\n\n}\n\nconst StyledItemBox = styled(Box)`\n  ${props => props.disabled \n    && css`\n      pointer-events: none;\n      opacity: 0.4;\n  `}\n\n`\n\nexport function DropdownItem<T>(props: DropdownItemProps<T>) {\n  const {value, index} = props;\n  const ctx = useContext(DropdownContext);\n\n  const renderItem = () => {\n    if (ctx.renderItem) {\n      return <ctx.renderItem item={value} index={index} />\n    }\n    return (value + '')\n  }\n\n  const onItemClickHandler = () => {\n    if (ctx.onItemClick) {\n      ctx.onItemClick(value)\n    }\n  }\n\n  return (\n    <StyledItemBox\n      onClick={onItemClickHandler}\n      disabled={ctx.checkDisabledItem && ctx.checkDisabledItem(value)}\n    >\n      <ItemContainer>\n        {renderItem()}\n      </ItemContainer>\n    </StyledItemBox>\n  )\n}\n","import React, {useEffect, useRef, useState} from \"react\";\nimport {Box, Card, Flex} from \"rebass\";\nimport {DropdownItem} from \"./DropdownItem\";\n\ninterface DropdownListProps<T> {\n  items: T[],\n}\n\nexport function DropdownList<T>(props: DropdownListProps<T>) {\n  const items = props.items\n\n  const itemRef = useRef<HTMLDivElement>()\n  const [height, setHeight] = useState(0)\n\n  useEffect(() => {\n    setHeight(itemRef?.current?.offsetHeight || 0)\n  }, [itemRef])\n\n  return (\n    <Card\n      backgroundColor={\"background\"}\n      padding={0}\n      maxHeight={height * 5}\n      overflowY={'auto'}\n      sx={{zIndex: 3}}\n    >\n      <Flex flexDirection=\"column\">\n        {Array.from(items).map((s, i) => {\n          return (\n            <Box ref={i === 0 ? itemRef: null}>\n              <DropdownItem<T>\n                value={s}\n                index={i}\n                key={i}\n              />\n              {i < items.length - 1 ? <hr style={{margin: 0}}/> : null}\n            </Box>\n          )\n        })}\n      </Flex>\n    </Card>\n  )\n}\n","import React, {ChangeEvent, KeyboardEvent, useEffect, useRef, useState} from \"react\";\nimport {Input} from \"@rebass/forms\";\nimport {Box, Flex} from \"rebass\";\nimport styled from '@emotion/styled'\nimport {ChevronDownSquare} from '@emotion-icons/boxicons-solid/ChevronDownSquare'\nimport {DropdownList} from \"./DropdownList\";\nimport {DropdownContext, DropdownContextInterface} from \"./context\";\nimport {ItemCallback, ItemType, RenderItemCallback, RenderValueCallback} from \"./types\";\n\nconst IconDown = styled(ChevronDownSquare)`\n  color: ${(props: any) => props.theme.colors.text};\n  height: 3rem;\n  opacity: 0.5;\n  \n  &:hover {\n    opacity: 0.7;\n  }\n`\n\nexport interface DropdownProps<T> {\n  value?: ItemType<T>,\n  items: T[],\n  renderValue?: RenderValueCallback<T>,\n  renderItem?: RenderItemCallback<T>,\n  checkDisabledItem?: ItemCallback<T,  boolean>,\n\n  onEdit?: (value: string) => void,\n  onChange?: (item: ItemType<T>) => void,\n  width?: number\n}\n\nexport function Dropdown<T>(props: DropdownProps<T>) {\n  const {width} = props\n  const renderValue: RenderValueCallback<T> = item => {\n    if (props.renderValue) {\n      return props.renderValue(item)\n    }\n    return (item || '') + ''\n  }\n\n  const [opened, setOpened] = useState(false)\n  const [item, setItem] = useState(props.value || null)\n  const [value, setValue] = useState(renderValue(props.value || null))\n  const [editing, setEditing] = useState(false)\n  const containerRef = useRef<HTMLDivElement>()\n\n  useEffect(() => {\n    function handleClickOutside(event: MouseEvent) {\n      if (containerRef.current\n        && !containerRef.current.contains(event.target as any)) {\n        setOpened(false)\n      }\n    }\n\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, [containerRef])\n\n  const onClickItemHandler = (item: ItemType<T>) => {\n    setItem(item)\n    setValue(renderValue(item))\n\n    props.onChange && props.onChange(item)\n    setEditing(false)\n    setOpened(false)\n  }\n  const onChangeInputHandler = (event: ChangeEvent<HTMLInputElement>) => {\n    const val = event.target.value\n    setValue(val)\n    setEditing(true)\n    setOpened(false)\n  }\n\n  const onKeyDownInputHandler = (event: KeyboardEvent<HTMLInputElement>) => {\n    event.stopPropagation()\n    if (event.key === 'Enter') {\n      props.onEdit && props.onEdit(value)\n    }\n    if (event.key === 'Escape') {\n      onClickItemHandler(item)\n    }\n  }\n\n  const onBlurInputHandler = () => {\n    if (editing) {\n      value && props.onEdit && props.onEdit(value)\n    }\n  }\n\n  const context: DropdownContextInterface<T> = {\n    onItemClick: onClickItemHandler,\n    renderItem: props.renderItem,\n    checkDisabledItem: props.checkDisabledItem,\n  }\n\n  return (\n    <DropdownContext.Provider value={context}>\n      <Flex flexDirection=\"column\" width={width} ref={containerRef}>\n        <Flex sx={{position: 'relative'}}>\n          <Input\n            value={value}\n            onChange={onChangeInputHandler}\n            onKeyDown={onKeyDownInputHandler}\n            onBlur={onBlurInputHandler}\n          />\n          <Box\n            sx={{\n              position: \"absolute\",\n              right: 0\n            }}\n          >\n            <IconDown\n              onClick={() => setOpened(!opened)}\n            />\n          </Box>\n        </Flex>\n        <Flex sx={{position: 'relative'}}>\n          <Flex sx={{position: \"absolute\"}}\n                flexDirection=\"column\"\n                width=\"100%\"\n          >\n            {opened && <DropdownList<T> items={props.items}/>}\n          </Flex>\n        </Flex>\n      </Flex>\n    </DropdownContext.Provider>\n  )\n}\n","import React, {ReactNode} from \"react\";\nimport ReactDOM from 'react-dom'\nimport {Card, Flex} from \"rebass\";\nimport styled from '@emotion/styled'\nimport {Helmet} from \"react-helmet\";\n\n\ninterface ModalContainerProps {\n  children: ReactNode,\n}\n\nconst useModalRoot = () => {\n  let el = document.querySelector('#modal-root')\n  if (!el) {\n    el = document.createElement('div')\n    el.setAttribute('id', 'modal-root')\n    document.body.appendChild(el)\n  }\n  return el\n}\n\nconst StyledOverlay = styled(Flex)`\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  top: ${() => `${window.pageYOffset}px`};\n  left: 0;\n  justify-content: center;\n  align-items: center;\n  background-color: rgba(255, 255, 255, 0.5);\n  z-index: 999;\n`\n\nexport function ModalContainer(props: ModalContainerProps) {\n  const {\n    children,\n  } = props\n  const modalRoot = useModalRoot()\n  return ReactDOM.createPortal(\n    <>\n      <Helmet>\n        <style type='text/css'>\n          {`\n          body {\n            overflow: hidden;\n          }\n        `}\n        </style>\n      </Helmet>\n      <StyledOverlay>\n        <Card backgroundColor='#fff'>\n          {children}\n        </Card>\n      </StyledOverlay>\n    </>\n    , modalRoot)\n}\n","import React, {forwardRef, useEffect, useState} from \"react\";\nimport {Box, BoxProps} from \"rebass\";\nimport {EmotionIcon} from '@emotion-icons/emotion-icon'\n\nimport {useTheme} from \"emotion-theming\";\nimport {Theme} from \"@/themes/types\";\n\n\ninterface IconProps extends Omit<BoxProps, keyof HTMLDivElement | 'css'> {\n  component: EmotionIcon,\n  disabled?: boolean,\n  size?: number | string\n}\n\nexport const Icon = forwardRef<HTMLDivElement, IconProps>(\n  (props, buttonRef) => {\n    const {\n      component: IconComponent,\n      size = \"1.5em\",\n      children,\n      ...extraProps\n    } = props\n    const [containerSize, setSize] = useState<number | string>(size || 0)\n    const theme = useTheme<Theme>()\n\n    useEffect(() => {\n      if (!size && buttonRef && 'current' in buttonRef) {\n        setSize(buttonRef.current?.offsetWidth || 0)\n      }\n    }, [buttonRef, setSize, size])\n\n    return (\n      <Box {...extraProps} ref={buttonRef}>\n        <IconComponent\n          color={theme.colors?.text}\n          size={containerSize}\n        />\n      </Box>\n    )\n  })\n","import React, {ReactNode, useEffect, useState} from \"react\";\nimport {ModalContainer} from \"@/components/ui/Modal/ModalContainer\";\nimport {Box, Flex, Heading} from \"rebass\";\nimport {Icon} from \"@/components/ui/Icon\";\nimport {Cross} from \"@styled-icons/entypo/Cross\";\n\nexport interface ModalActions {\n  open: () => void,\n  close: () => void,\n}\n\ntype RenderCb = (props: {modal: ModalActions}) => ReactNode\n\ninterface ModalProps {\n  opened?: boolean,\n  onClose?: () => void,\n  button?: RenderCb,\n  title?: string,\n  container: RenderCb,\n}\n\nexport function Modal(props: ModalProps) {\n  const {\n    opened = false,\n    button,\n    container,\n  } = props\n\n  const [closed, setClose] = useState(!opened)\n\n  useEffect(() => {\n    setClose(!opened)\n  }, [opened])\n\n  useEffect(() => {\n    if (closed && props.onClose) {\n      props.onClose()\n    }\n  }, [closed, props])\n\n  const modalActions: ModalActions = {\n    open: () => setClose(false),\n    close: () => setClose(true),\n  }\n  const renderCbProps = {modal: modalActions}\n\n  return (\n    <>\n      {button && button(renderCbProps)}\n      {closed ? null : <ModalContainer>\n        <Flex justifyContent='space-between'>\n          <Heading fontSize={2}>{props.title}</Heading>\n          <Icon component={Cross} onClick={modalActions.close}/>\n        </Flex>\n        <Box>\n          {container(renderCbProps)}\n        </Box>\n      </ModalContainer>\n      }\n    </>\n  )\n}\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport {Flex} from \"rebass\";\nimport {StyledInput} from \"@/components/ui/ReduxForm/Input\";\n\ninterface RecipeElementFormProps {\n  name: string,\n  value: number,\n  disabled?: boolean,\n  onChange?: (value: number) => void\n}\n\n\n\n\nexport const AddItemElementForm: FunctionComponent<RecipeElementFormProps> = (props) => {\n  const {name, disabled} = props\n  const [value, setValue] = useState(props.value)\n\n  useEffect(() => {\n    setValue(props.value)\n  }, [props.value])\n\n  const onChange = (value: string) => {\n    const v = parseFloat(value)\n    setValue(v)\n  }\n\n  const onBlur = () => {\n    props.onChange && props.onChange(value)\n  }\n\n  return (\n    <Flex flexDirection=\"column\" justifyContent=\"center\" alignItems=\"center\" width='4rem'>\n      <label style={{textAlign: 'center'}}>\n        {name}\n      </label>\n      <StyledInput\n        type=\"number\"\n        step=\"0.1\"\n        min=\"0\"\n        max=\"100\"\n        autoComplete=\"off\"\n        width=\"3rem\"\n        value={value.toString()}\n        disabled={disabled}\n        onChange={event => onChange(event.target.value)}\n        onBlur={onBlur}\n        style={{\n          textAlign: \"center\"\n        }}\n      />\n    </Flex>\n  )\n}\n","import React, {FunctionComponent, useEffect, useState} from \"react\";\nimport {Flex} from \"rebass\";\nimport {FERTILIZER_ELEMENT_NAMES, MACRO_ELEMENT_NAMES} from \"../../../calculator/constants\";\nimport {AddItemElementForm} from \"./AddItemElementForm\";\nimport {normalizeFertilizer} from \"../../../calculator/fertilizer\";\nimport {Elements, FertilizerInfo} from \"@/calculator/types\";\n\ninterface AddItemFertilizerEditFormProps {\n  fertilizer?: FertilizerInfo,\n  allowEdit?: boolean,\n  onChange: (item: FertilizerInfo) => void\n}\n\nexport const getElements = (f: FertilizerInfo) => {\n  return normalizeFertilizer(f, false).elements\n}\n\nexport const AddItemFertilizerEditForm: FunctionComponent<AddItemFertilizerEditFormProps> = (props) => {\n  const {\n    fertilizer,\n  } = props\n\n  const [elements, setElements] = useState<Elements|undefined>(fertilizer && getElements(fertilizer))\n\n  const onChangeHandler = (el: FERTILIZER_ELEMENT_NAMES, val: number) => {\n    if (!elements || !fertilizer){\n      return\n    }\n    props.onChange(fertilizer)\n  }\n\n  useEffect(() => {\n    setElements(fertilizer && getElements(fertilizer))\n  }, [fertilizer])\n\n  return (\n    <Flex>\n      <Flex>\n        {MACRO_ELEMENT_NAMES.map(el => (\n          <AddItemElementForm\n            disabled={true}\n            name={el}\n            value={elements?.[el]||0}\n            onChange={v => onChangeHandler(el, v)}\n          />\n        ))}\n      </Flex>\n    </Flex>\n  )\n}\n","import React, {FunctionComponent, useState} from \"react\";\nimport {Box, Card, Flex} from \"rebass\";\nimport {FertilizerType} from \"./types\";\nimport {Dropdown} from \"@/components/ui/Dropdown/Dropdown\";\nimport {Plus} from \"@styled-icons/boxicons-regular/Plus\"\n\nimport {useSelector} from \"react-redux\";\nimport {CalculatorState} from \"../types\";\nimport {AddItemFertilizerEditForm} from \"./AddItemFertilizerEditForm\";\nimport {IconButton} from \"@/components/ui/IconButton\";\nimport {FertilizerInfo} from \"@/calculator/types\";\n\ninterface AddItemProps {\n  onAdd: (item: FertilizerType) => void\n}\n\n\nexport const AddItem: FunctionComponent<AddItemProps> = ({onAdd}) => {\n  const {\n    fertilizers,\n  } = useSelector<any>(state => state.calculator) as CalculatorState\n  const {\n    calculationForm,\n  } = useSelector<any>(state => state.calculator) as CalculatorState\n\n  const [selected, setSelected] = useState<FertilizerInfo | undefined>(fertilizers[0])\n\n  const selectedFertilizers = calculationForm?.fertilizers || [];\n  const fertilizersIDs = selectedFertilizers.map(f => f?.id)\n\n  const onChangeHandler = (item: FertilizerInfo | null) => {\n    item && setSelected(item)\n  }\n\n  const onChangeFertilizerElements = (item: FertilizerInfo) =>{\n    setSelected(item)\n  }\n\n  const onAddHandler = () => {\n    if (!selected) {\n      return\n    }\n    onAdd(selected)\n  }\n  return (\n    <Card>\n      <Flex flexDirection=\"column\">\n        <Flex justifyContent=\"space-between\">\n          <Box flex={1} pr={2}>\n            <Dropdown<FertilizerInfo>\n              value={selected}\n              items={fertilizers}\n              onChange={onChangeHandler}\n              checkDisabledItem={item => fertilizersIDs.includes(item?.id || \"\")}\n              renderItem={({item}) => (\n                <Flex flex={1} justifyContent=\"space-between\">\n                  <Box>\n                    {item.id}\n                  </Box>\n                </Flex>\n              )}\n              renderValue={item => item?.id || \"\"}\n            />\n          </Box>\n          <IconButton\n            onClick={onAddHandler}\n            component={Plus}/>\n\n        </Flex>\n        <AddItemFertilizerEditForm\n          fertilizer={selected}\n          onChange={onChangeFertilizerElements}\n        />\n      </Flex>\n\n    </Card>\n  )\n}\n\n","import React from \"react\";\nimport {Flex} from \"rebass\";\nimport {SelectedListItem} from \"./SelectedListItem\";\nimport {AddItem} from \"./AddItem\";\nimport {ReduxFieldArrayType} from \"../../ui/ReduxForm/types\";\nimport {FertilizerType} from \"./types\";\nimport {CalculatorState} from \"../types\";\nimport {useSelector} from \"react-redux\";\n\ninterface SelectedListProps {\n}\n\nexport const SelectedList: ReduxFieldArrayType<SelectedListProps, FertilizerType> = (\n  {fields, meta: {error}}) => {\n  const {\n    calculationForm,\n    result,\n  } = useSelector<any>(state => state.calculator) as CalculatorState\n  const fertilizers = calculationForm?.fertilizers || [];\n\n  const calculatedFertilizersWeights = Object.fromEntries((result?.fertilizers || []).map(f => [f.id, f.base_weight]))\n\n  const onAddHandler = (item: FertilizerType) => {\n    for (let f of fertilizers) {\n      if (f.id === item.id) {\n        return\n      }\n    }\n    fields.push(item)\n  }\n  return (\n    <Flex sx={{flexDirection: 'column'}} width='auto'>\n      <AddItem onAdd={onAddHandler}/>\n      <Flex sx={{\n        flexDirection: 'column',\n        '& > *': {\n          marginTop: '8px !important',\n        }\n      }}>\n        {error ? <span>{error}</span> : null}\n        {fertilizers.map((item, index) =>\n          <SelectedListItem\n            item={item}\n            key={item.id}\n            needWeight={calculatedFertilizersWeights[item.id]}\n            onRemove={() => fields.remove(index)}\n          />\n        )}\n      </Flex>\n    </Flex>\n  )\n}\n","import React from \"react\";\nimport {SelectedList} from \"./SelectedList\";\nimport {FieldArray} from \"redux-form\";\nimport {required} from \"../../ui/ReduxForm/validators\";\n\n\nexport const Container = () => {\n  return (\n    <FieldArray<{}>\n      name={\"fertilizers\"}\n      component={SelectedList}\n      validate={required(\"Выберите удобрения\")}\n    />\n  )\n}\n\n","import {Container} from \"./Container\";\n\nexport default Container\n","\ntype ValidatorCallback = {\n  (value: any): void|string\n}\n\nexport function pattern(pattern: RegExp|string, message?: string): ValidatorCallback {\n  message = message || 'Значение должно соответствовать регулярному выражению'\n  return (value) => {\n    pattern = new RegExp(pattern) as RegExp\n    if (pattern.test(value)) {\n      return message\n    }\n  }\n}\n\nexport function minLength(length: number, message?: string): ValidatorCallback {\n  message = message || `Количество элементов должно быть не менее ${length}`\n\n  return value => {\n    if (value.length < length) {\n      return message\n    }\n  }\n}\n\n\nexport function required(message?: string): ValidatorCallback {\n  message = message || `Должно быть заполнено`\n\n  return value => {\n    if (!value || !value?.length) {\n      return message\n    }\n  }\n}\n\n","import React, {FunctionComponent} from \"react\";\nimport {Card, Flex, Heading} from \"rebass\";\nimport {Checkbox} from \"../../ui/ReduxForm/Checkbox\";\n\ninterface IgnoreElementProps {\n}\n\n\nexport const IgnoreElement: FunctionComponent<IgnoreElementProps> = () => {\n  return (\n    <Card>\n      <Flex flexDirection=\"column\">\n        <Heading fontSize={2}>Игнорировать</Heading>\n        <Checkbox name=\"ignore.Ca\" label=\"Кальций\" />\n        <Checkbox name=\"ignore.Mg\" label=\"Магний\" />\n        <Checkbox name=\"ignore.S\" label=\"Сера\" />\n      </Flex>\n    </Card>\n  )\n}\n","import React from \"react\";\n\nimport {Label, Radio as RebassRadio, RadioProps as RebassRadioProps} from \"@rebass/forms\";\nimport {Field as ReduxField} from \"redux-form\";\nimport {ReduxFormComponentType, WrapperInputType} from \"./types\";\n\ninterface RadioProps extends RebassRadioProps {\n  label: string,\n  value: string | number,\n}\n\nconst WrappedCheckbox: WrapperInputType<RadioProps> = ({input, label, value, ...props}: any) =>\n  <Label>\n    <RebassRadio\n      {...props}\n      {...input}\n    />\n    {label}\n  </Label>\n\n// TODO вывести тип\nexport const Radio: ReduxFormComponentType<RadioProps> = ({\n                                                            name,\n                                                            value,\n                                                            normalize= (v) => v.toString(),\n                                                            ...props\n                                                          }) => {\n  return (\n    <ReduxField\n      component={WrappedCheckbox}\n      name={name}\n      normalize={normalize}\n      // onClick={() => setChecked(!checked)}\n      // checked={checked}\n      type='radio'\n      value={normalize(value)}\n      {...props as any}\n    />\n  )\n}\n","import React, {FunctionComponent} from \"react\";\nimport {Card, Flex, Heading} from \"rebass\";\nimport {Radio} from \"../../ui/ReduxForm/Radio\";\nimport {decimal} from \"../../ui/ReduxForm/normalizers\";\n\nconst ACCURACY_VARIANTS = [\n  0.2,\n  0.1,\n  0.05,\n  0.01,\n]\ninterface AccuracyProps {\n}\n\nexport const Accuracy: FunctionComponent<AccuracyProps> = () => {\n    return (\n      <Card>\n          <Flex flexDirection=\"column\">\n            <Heading fontSize={2}>Точность</Heading>\n            {ACCURACY_VARIANTS.map(a =>\n                <Radio\n                  name=\"accuracy\"\n                  value={a}\n                  label={`${a} г.`}\n                  normalize={decimal}\n                />\n            )}\n          </Flex>\n      </Card>\n    )\n}\n","import React, {FunctionComponent} from \"react\";\nimport {Card, Flex, Heading} from \"rebass\";\nimport {Label} from \"@rebass/forms\";\nimport {Input} from \"../../ui/ReduxForm/Input\";\nimport {decimal, number} from \"../../ui/ReduxForm/normalizers\";\n\n\ninterface SolutionVolumeProps {\n}\n\nexport const Solution: FunctionComponent<SolutionVolumeProps> = () => {\n  return (\n    <Card>\n        <Heading fontSize={2}>Раствор</Heading>\n      <Flex flexDirection=\"column\">\n        <Flex alignItems=\"center\" justifyContent=\"space-between\">\n          <Label htmlFor=\"solution_volume\">Объем, л</Label>\n          <Input\n            name=\"solution_volume\"\n            width=\"3rem\"\n            type=\"number\"\n            step=\"1\"\n            min=\"1\"\n            pattern=\"^\\d+$\"\n            normalize={number}\n            style={{\n              textAlign: \"center\"\n            }}\n            autoComplete=\"off\"\n          />\n        </Flex>\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" paddingTop={2}>\n          <Label htmlFor=\"solution_concentration\">Концентрация, 1/100%</Label>\n          <Input\n            name=\"solution_concentration\"\n            width=\"3rem\"\n            type=\"number\"\n            step=\"0.1\"\n            min=\"0\"\n            max=\"999\"\n            normalize={decimal}\n            style={{\n              textAlign: \"center\"\n            }}\n            autoComplete=\"off\"\n          />\n        </Flex>\n      </Flex>\n    </Card>\n  )\n}\n","import React, {FunctionComponent} from \"react\";\nimport {useSelector} from \"react-redux\";\nimport {getFormValues} from \"redux-form\";\nimport {Card, Flex} from \"rebass\";\nimport {Label} from \"@rebass/forms\";\nimport {Input} from \"@/components/ui/ReduxForm/Input\";\nimport {decimal, number} from \"@/components/ui/ReduxForm/normalizers\";\nimport {Checkbox} from \"@/components/ui/ReduxForm/Checkbox\";\nimport {REDUX_FORM_NAME} from \"@/components/Calculator/constants\";\nimport {CalculatorFormValues} from \"@/components/Calculator/types\";\n\n\ninterface DilutionProps {\n}\n\nexport const Dilution: FunctionComponent<DilutionProps> = () => {\n  const {\n    dilution_enabled,\n  } = useSelector(getFormValues(REDUX_FORM_NAME)) as CalculatorFormValues\n  return (\n    <Card>\n      <Checkbox name=\"dilution_enabled\" label=\"Разбавление концетрата\"/>\n      <Flex flexDirection=\"column\" style={{display: dilution_enabled? \"flex\" : \"none\"}}>\n        <Flex alignItems=\"center\" justifyContent=\"space-between\">\n          <Label htmlFor=\"dilution_volume\">Объем, л</Label>\n          <Input\n            name=\"dilution_volume\"\n            width=\"3rem\"\n            type=\"number\"\n            step=\"1\"\n            min=\"1\"\n            pattern=\"^\\d+$\"\n            normalize={number}\n            style={{\n              textAlign: \"center\"\n            }}\n            autoComplete=\"off\"\n          />\n        </Flex>\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" paddingTop={2}>\n          <Label htmlFor=\"dilution_concentration\">Концентрация, 1/100%</Label>\n          <Input\n            name=\"dilution_concentration\"\n            width=\"3rem\"\n            type=\"number\"\n            step=\"0.1\"\n            min=\"0\"\n            max=\"999\"\n            normalize={decimal}\n            style={{\n              textAlign: \"center\"\n            }}\n            autoComplete=\"off\"\n          />\n        </Flex>\n      </Flex>\n    </Card>\n  )\n}\n","import React, {ComponentType} from \"react\";\nimport {Box, Button, Flex} from \"rebass\";\nimport {IgnoreElement} from \"./IgnoreElement\";\nimport {Accuracy} from \"./Accuracy\";\nimport {Solution} from \"./Solution\";\nimport {Dilution} from \"./Dilution\";\n\ninterface OptionsProps {\n}\n\n\nexport const Options: ComponentType<OptionsProps> = () => {\n  return (\n    <Flex flexDirection=\"column\">\n      <Box flex={1}>\n        <Button width=\"100%\" my={2} type=\"submit\">Calculate</Button>\n      </Box>\n      <Box my={2}>\n        <Solution/>\n      </Box>\n      <Box my={2}>\n        <Dilution/>\n      </Box>\n      <Flex sx={{\n        '& > *': {flex: 1}\n      }}>\n        <IgnoreElement/>\n        <Box marginLeft={2}>\n          <Accuracy/>\n        </Box>\n      </Flex>\n\n    </Flex>\n  )\n}\n\n","import React, {FunctionComponent} from \"react\";\nimport {Box, Flex} from \"rebass\";\nimport {Input} from \"@/components/ui/ReduxForm/Input\";\nimport {number} from \"@/components/ui/ReduxForm/normalizers\";\n\ninterface RecipeElementFormProps {\n  name: string,\n}\n\nexport const getRecipeFieldName = (name: string) => `recipe.${name}`\n\n\n\nexport const RecipeElementForm: FunctionComponent<RecipeElementFormProps> = (props) => {\n  const {name} = props\n  return (\n    <Flex flexDirection=\"column\"\n          justifyContent=\"center\"\n          alignItems=\"center\"\n          maxWidth='3rem'\n    >\n      <Box style={{textAlign: 'center'}}\n      >\n        {name}\n      </Box>\n      <Input\n        name={getRecipeFieldName(name)}\n        type=\"number\"\n        step=\"1\"\n        min=\"0\"\n        max=\"999\"\n        autoComplete=\"off\"\n        normalize={number}\n        maxWidth=\"3rem\"\n        style={{\n          textAlign: \"center\"\n        }}\n      />\n    </Flex>\n  )\n}\n","import React, {ChangeEvent, useState} from \"react\";\nimport {Box, Button, Flex} from \"rebass\";\n\nimport {useFormName, useFormValues} from \"@/hooks/ReduxForm\";\nimport {CalculatorFormValues} from \"@/components/Calculator/types\";\nimport {calculateNPKBalance} from '@/calculator/helpers';\nimport {Elements, NeedElements} from \"@/calculator/types\";\nimport {decimal} from \"@/components/ui/ReduxForm/normalizers\";\nimport {MACRO_ELEMENT_NAMES} from \"@/calculator/constants\";\nimport {StyledInput} from \"@/components/ui/ReduxForm/Input\";\nimport {ALLOWED_ELEMENT_IN_MATRIX, convertProfileWithEC, convertProfileWithRatio} from \"@/calculator/profile\";\nimport {StyledBalanceCell} from \"@/components/Calculator/Options/Recipe\";\nimport {round} from \"@/utils\";\nimport {ModalActions} from \"@/components/ui/Modal/Modal\";\n\ninterface RecipeTuneFormProps {\n  modal: ModalActions,\n  onSave: (npk: NeedElements) => void\n}\n\nconst ELEMENT_IN_MATRIX = ALLOWED_ELEMENT_IN_MATRIX.filter(el => ![\"NH4\", \"NO3\"].includes(el))\n\nexport function RecipeTuneForm(props: RecipeTuneFormProps) {\n  const formValue = useFormValues<CalculatorFormValues>(useFormName())[0]\n  const [recipe, setRecipe] = useState(formValue.recipe)\n  const recipeInfo = calculateNPKBalance(recipe as Elements)\n  const [ratio, setRatio] = useState(recipeInfo.ratio)\n  const [EC, setEC] = useState(recipeInfo.EC)\n\n  const onChangeRecipe = (el: MACRO_ELEMENT_NAMES, value: number) => {\n    setRecipe({...recipe, [el]: value})\n  }\n  const onChangeEC = (val: number) => {\n    setRecipe(convertProfileWithEC(recipe as Elements, val))\n    setEC(val)\n  }\n  const onChangeRatio = (El1: ALLOWED_ELEMENT_IN_MATRIX, El2: ALLOWED_ELEMENT_IN_MATRIX, val: number) => {\n    let currentEC = EC\n    let newNpk = convertProfileWithRatio(recipe, {[El1]: {[El2]: val}})\n    newNpk = convertProfileWithEC(newNpk, currentEC)\n    setRecipe(newNpk)\n    setRatio({...ratio, [El1]: {...ratio[El1], [El2]: val}})\n  }\n\n  const onSaveHandler = () => {\n    props.onSave(recipe)\n    props.modal.close()\n  }\n  return (\n    <Flex flexDirection={'column'}>\n      <Flex>\n        {MACRO_ELEMENT_NAMES.map(el => (\n          <RecipeInput\n            name={el}\n            label={el}\n            value={recipe[el]}\n            onChange={val => onChangeRecipe(el, val)}\n            step={1}\n          />\n        ))}\n        <RecipeInput name={'EC'} label={\"EC\"} value={EC} onChange={onChangeEC}/>\n      </Flex>\n      <Flex justifyContent=\"space-around\">\n        <StyledBalanceCell name=\"ΔΣ I\" value={recipeInfo.ion_balance}/>\n        <StyledBalanceCell name=\"EC\" value={recipeInfo.EC}/>\n        <RecipeInput\n          name={'NH4'}\n          label={\"%NH4\"}\n          value={round(recipeInfo.ratio.NH4.NO3 * 100, 1)}\n          step={0.1}\n          onChange={v => onChangeRatio('NH4', 'NO3', v / 100)}\n        />\n        <StyledBalanceCell name=\"K:Mg\" value={recipeInfo.ratio.K.Mg}/>\n        <StyledBalanceCell name=\"K:Ca\" value={recipeInfo.ratio.K.Ca}/>\n        <StyledBalanceCell name=\"Ca:N\" value={recipeInfo.ratio.Ca.N}/>\n        <StyledBalanceCell name=\"N:K\" value={recipeInfo.ratio.N.K}/>\n        <StyledBalanceCell name=\"N:P\" value={recipeInfo.ratio.N.P}/>\n      </Flex>\n      <Flex>\n        <table>\n          <thead>\n          <tr>\n            <th></th>\n            {ELEMENT_IN_MATRIX.map(el => <th>{el}</th>)}\n          </tr>\n          </thead>\n          <tbody>\n          {ELEMENT_IN_MATRIX.map(el => (\n            <tr>\n              <th>{el}</th>\n              {ELEMENT_IN_MATRIX.map(el2 => (\n                <td style={{textAlign: 'center'}}>\n                  {el === el2 ? 1 : (\n                    <RecipeInput\n                      name={`${el}:${el2}`}\n                      value={ratio[el][el2]}\n                      onChange={value => onChangeRatio(el, el2, value)}\n                    />\n                  )}\n                </td>\n              ))}\n\n            </tr>\n\n          ))}\n          </tbody>\n        </table>\n      </Flex>\n      <Flex justifyContent=\"flex-end\">\n        <Button type=\"button\" onClick={onSaveHandler}>Save</Button>\n      </Flex>\n    </Flex>\n  )\n}\n\ninterface RecipeInputProps {\n  name: string,\n  label?: string,\n  onChange?: (value: number) => void,\n  value?: number,\n  step?: number,\n}\n\nfunction RecipeInput(props: RecipeInputProps) {\n  const {\n    name, label, onChange,\n    value = 0,\n    step = 0.01\n  } = props\n\n  const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.value) {\n      const val = decimal(e.target.value)\n      onChange && onChange(val)\n    }\n  }\n\n  return (\n    <Flex flexDirection=\"column\"\n          justifyContent=\"center\"\n          alignItems=\"center\"\n          maxWidth='4rem'\n    >\n      {label ?\n        <Box style={{textAlign: 'center'}}>\n          {label}\n        </Box>\n        : null\n      }\n      <StyledInput\n        onChange={onChangeHandler}\n        name={name}\n        value={value}\n        type=\"number\"\n        step={step.toString()}\n        min=\"0\"\n        max=\"999\"\n        autoComplete=\"off\"\n        maxWidth=\"4rem\"\n        style={{\n          textAlign: \"center\"\n        }}\n      />\n    </Flex>\n  )\n}\n","import React, {FunctionComponent, useState} from \"react\";\nimport {Box, Card, Flex, Heading, Text} from \"rebass\";\nimport {Broom} from '@styled-icons/fa-solid/Broom'\nimport {Save} from '@styled-icons/boxicons-regular/Save'\nimport {Tune} from '@styled-icons/material-sharp/Tune'\nimport {getRecipeFieldName, RecipeElementForm} from \"./RecipeElementForm\";\nimport {useFormName, useFormValues} from \"@/hooks/ReduxForm\";\nimport {FERTILIZER_ELEMENT_NAMES, MACRO_ELEMENT_NAMES} from \"@/calculator/constants\";\n\nimport {IconButton} from \"@/components/ui/IconButton\";\nimport {Dropdown} from \"@/components/ui/Dropdown/Dropdown\";\nimport {CalculatorState, Recipe as RecipeType} from \"@/components/Calculator/types\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {recipePush, recipeRemove} from \"@/components/Calculator/actions\";\nimport {Elements, NeedElements} from \"@/calculator/types\";\nimport {calculateNPKBalance, getEmptyElements} from \"@/calculator/helpers\";\nimport {Modal} from \"@/components/ui/Modal/Modal\";\nimport {RecipeTuneForm} from \"@/components/Calculator/Options/RecipeTuneForm\";\nimport {round} from \"@/utils\";\n\n\nexport const StyledBalanceCell: FunctionComponent<{name:string, value: number}> = (props) => {\n  return (\n    <Flex flexDirection=\"column\" m={1} alignItems=\"center\">\n      <Heading fontSize={1}>{props.name}</Heading>\n      <Text>{props.value}</Text>\n    </Flex>\n  )\n}\n\ninterface RecipeProps {\n}\n\nexport const Recipe: FunctionComponent<RecipeProps> = () => {\n  const {\n    recipes = [],\n  } = useSelector<any>(state => state.calculator) as CalculatorState\n\n  const [values, setValue] = useFormValues(useFormName())\n  const [selected, setSelected] = useState<RecipeType | undefined>(recipes?.[0])\n\n  const dispatch = useDispatch()\n\n  const NPKBalance = calculateNPKBalance(values.recipe || getEmptyElements())\n\n  const onChangeHandler = (item: RecipeType | null) => {\n    item && setSelected(item)\n    item && setRecipe(item.elements)\n  }\n\n  const setRecipe = (elements: NeedElements) => {\n    for (let [name, value] of Object.entries(elements)) {\n      setValue(getRecipeFieldName(name), value)\n    }\n  }\n  const resetRecipe = () => {\n    let zeroValues = Object.fromEntries(FERTILIZER_ELEMENT_NAMES.map(el => [el, 0])) as unknown as Elements\n\n    setRecipe(zeroValues)\n  }\n  const onEditHandler = (value: string) => {\n    let zeroValues = Object.fromEntries(FERTILIZER_ELEMENT_NAMES\n      .map(el => [el, selected?.elements[el] || 0])) as unknown as Elements\n    setSelected({name: value, elements: zeroValues})\n  }\n\n  const onAddHandler = () => {\n    if (!selected) {\n      return\n    }\n    const recipe = {...selected, elements: values.recipe}\n    dispatch(recipePush(recipe))\n  }\n  const onRemoveItemHandler = (item: RecipeType) => {\n    dispatch(recipeRemove(item))\n  }\n  return (\n    <Card>\n      <Flex flexDirection=\"column\">\n        <Flex\n        >\n          <Box flex={1} mx={2}>\n            <Dropdown<RecipeType>\n              value={selected}\n              items={recipes}\n              onChange={onChangeHandler}\n              onEdit={onEditHandler}\n              renderItem={({item}) => (\n                <Flex flex={1} justifyContent=\"space-between\">\n                  <Box width={3} backgroundColor={item.color || 'gray'}>\n                  </Box>\n                  <Box flex={1} mx={2}>\n                    {item.name}\n                  </Box>\n                  <button onClick={event => {\n                    event.stopPropagation()\n                    onRemoveItemHandler(item)\n                  }}>-\n                  </button>\n                </Flex>\n              )}\n              renderValue={item => item?.name || \"\"}\n            />\n          </Box>\n          <Box>\n            <IconButton\n              marginRight={1}\n              component={Save}\n              onClick={onAddHandler}\n            />\n            <IconButton\n              component={Broom}\n              onClick={resetRecipe}\n            />\n          </Box>\n        </Flex>\n        <Flex justifyContent=\"space-between\">\n          {\n            MACRO_ELEMENT_NAMES.map(n => <RecipeElementForm name={n}/>)\n          }\n        </Flex>\n        <Flex justifyContent=\"space-around\">\n          <Modal\n            title=\"Настройка профиля\"\n            button={({modal}) => (\n              <IconButton\n              marginRight={1}\n              component={Tune}\n              onClick={modal.open}\n              />\n            )}\n            container={({modal}) => (\n              <>\n                <RecipeTuneForm\n                  modal={modal}\n                  onSave={setRecipe}\n                />\n              </>\n            )}\n          />\n          <StyledBalanceCell name=\"ΔΣ I\" value={NPKBalance.ion_balance}/>\n          <StyledBalanceCell name=\"EC\" value={NPKBalance.EC}/>\n          <StyledBalanceCell name=\"%NH4\" value={round(NPKBalance.ratio.NH4.NO3 * 100, 1)}/>\n          <StyledBalanceCell name=\"K:Mg\" value={NPKBalance.ratio.K.Mg}/>\n          <StyledBalanceCell name=\"K:Ca\" value={NPKBalance.ratio.K.Ca}/>\n          <StyledBalanceCell name=\"Ca:N\" value={NPKBalance.ratio.Ca.N}/>\n        </Flex>\n      </Flex>\n    </Card>\n  )\n}\n","import React from \"react\";\nimport {countDecimals, round} from \"@/utils\";\nimport {useSelector} from \"react-redux\";\nimport {getFormValues} from \"redux-form\";\nimport {REDUX_FORM_NAME} from \"@/components/Calculator/constants\";\nimport {CalculatorFormValues} from \"@/components/Calculator/types\";\nimport {FertilizerWeights} from \"@/calculator\";\n\ninterface ResultFertilizerListProps {\n    fertilizers: FertilizerWeights[],\n}\n\nexport function ResultFertilizerList(props: ResultFertilizerListProps) {\n    const {fertilizers} = props\n    const {\n      accuracy\n    } = useSelector(getFormValues(REDUX_FORM_NAME)) as CalculatorFormValues\n    return (\n        <>\n            {fertilizers.map(f => {\n                return (\n                  <li key={f.id}>\n                      {round(f.weight, countDecimals(accuracy))}г\n                      &nbsp;\n                      {f.volume && `(${f.volume} мл)`}\n                      &nbsp;\n                      {f.id}\n                  </li>\n                )\n            })}\n        </>\n    )\n}\n","import {useSelector} from \"react-redux\";\nimport {CalculatorFormValues, CalculatorState} from \"@/components/Calculator/types\";\nimport {entries, toMap} from \"@/utils\";\nimport {groupFertilizerBySolution} from \"@/calculator/dilution\";\nimport {FertilizerWeights} from \"@/calculator\";\nimport {calculatePPM} from \"@/calculator/helpers\";\nimport {getFormValues} from \"redux-form\";\nimport {REDUX_FORM_NAME} from \"@/components/Calculator/constants\";\n\nexport function usePPM() {\n  const {\n    result,\n  } = useSelector<any>(state => state.calculator) as CalculatorState\n  const {\n    solution_volume,\n  } = useSelector(getFormValues(REDUX_FORM_NAME)) as CalculatorFormValues\n\n  const fertilizerWeights = (result?.fertilizers || []).map(f => ({...f}))\n\n  const ppm = calculatePPM(\n    fertilizerWeights,\n    solution_volume,\n  );\n\n  return ppm\n}\n\nexport function useFertilizerSolutionGroup() {\n  const {\n    fertilizers,\n    result,\n  } = useSelector<any>(state => state.calculator) as CalculatorState\n\n  const fertilizersWeights = (result?.fertilizers || []).map(f => ({...f}))\n\n  const fertilizerWeightsMap = toMap(fertilizersWeights, 'id')\n\n  const pairs = entries(groupFertilizerBySolution(fertilizers))\n    .sort(([a], [b]) => a > b ? 1 : -1)\n  const fertilizerWeightGroups: [typeof pairs[0][0], FertilizerWeights[]][] = pairs\n    .map(([g, fList]) => {\n        let ws = fList\n          .map((f) => fertilizerWeightsMap[f.id])\n          .filter(f => f)\n        return [g, ws]\n      }\n    )\n\n  return fertilizerWeightGroups\n\n}\n","import {FertilizerInfo} from \"./types\";\nimport {normalizeFertilizer} from \"./fertilizer\";\nimport {round} from \"../utils\";\n\nexport interface Solution {\n  id: string,\n  volume: number,\n  concentration: number,\n  // TODO плотность\n}\n\nexport type DilutionResult = Omit<Solution, \"concentration\">\n\nexport function dilution_solution(target: Solution, sources: Omit<Solution, \"volume\">[]): DilutionResult[] {\n  const result: DilutionResult[] = []\n  for (let s of sources) {\n    result.push({\n      id: s.id,\n      volume: round((target.volume / s.concentration) * target.concentration, 2)\n    })\n  }\n  return result\n}\n\n\ntype FertilizerGroupBySolution = { [K in \"A\" | \"B\" | \"C\"]?: FertilizerInfo[] }\n\n// Делим удобрения на несколько растворов\n// Бутылка-1 Макра-азотная\n// Селитра амиачная\n// Селитра калиевая\n// Селитра кальциевая\n//\n// Бутылка 2 Макра-серно-фосфорная\n// Сульфат аммония\n// Сульфат магния семиводный\n// Монофосфат калия\nexport function groupFertilizerBySolution(fertilizers: FertilizerInfo[]): FertilizerGroupBySolution {\n  const groups: FertilizerGroupBySolution = {}\n  for (let f of fertilizers) {\n    let nf = normalizeFertilizer(f)\n    if (nf.elements.NO3) {\n      groups.A = [...groups.A || [], f]\n      continue\n    }\n    if (nf.elements.S || nf.elements.P) {\n      groups.B = [...groups.B || [], f]\n      continue\n    }\n    groups.C = [...groups.C || [], f]\n\n  }\n  return groups\n}\n","import React from \"react\";\nimport {dilution_solution, DilutionResult} from \"@/calculator/dilution\";\nimport {useSelector} from \"react-redux\";\nimport {getFormValues} from \"redux-form\";\nimport {REDUX_FORM_NAME} from \"@/components/Calculator/constants\";\nimport {CalculatorFormValues} from \"@/components/Calculator/types\";\nimport {useFertilizerSolutionGroup, usePPM} from \"@/components/Calculator/Result/hooks\";\nimport {Flex, Heading} from \"rebass\";\nimport {ppmToEC} from \"@/calculator/helpers\";\nimport {round} from \"@/utils\";\n\ninterface DilutionResultProps {\n}\n\nexport function ResultDilution(props: DilutionResultProps) {\n  const {\n    solution_concentration,\n    dilution_enabled,\n    dilution_volume,\n    dilution_concentration,\n  } = useSelector(getFormValues(REDUX_FORM_NAME)) as CalculatorFormValues\n\n  const fertilizerWeightGroups = useFertilizerSolutionGroup()\n  let ppm = usePPM()\n\n  if (!dilution_enabled) {\n    return null\n  }\n\n  ppm = round((dilution_concentration * ppm) / solution_concentration)\n\n  let dilution: DilutionResult[] | null = null\n\n  dilution = dilution_solution({\n    id: \"Total\",\n    volume: dilution_volume,\n    concentration: dilution_concentration,\n  }, fertilizerWeightGroups.map(([g]) => (\n    {\n      id: g, concentration: solution_concentration\n    })))\n\n  return (\n    <>\n      <Flex flexDirection=\"column\" width=\"75%\">\n        <Heading fontSize={2}>Разбавление</Heading>\n          <ul>\n            {dilution.map(d => (\n              <li>Раствор {d.id} - {d.volume}л</li>\n            ))}\n            <li>\n              Долить до {dilution_volume}л\n            </li>\n            <li>\n              <b>TDS:</b> {ppm} ppm; <b>EC:</b> {ppmToEC(ppm, 1)} мСм/см\n            </li>\n          </ul>\n      </Flex>\n\n    </>\n  )\n}\n","import React, {FunctionComponent} from \"react\";\nimport {Card, Flex, Heading, Text} from \"rebass\";\nimport {useSelector} from \"react-redux\";\nimport {CalculatorFormValues, CalculatorState} from \"../types\";\nimport {getFormValues} from \"redux-form\";\nimport {REDUX_FORM_NAME} from \"../constants\";\nimport {MACRO_ELEMENT_NAMES} from \"@/calculator/constants\";\nimport {Element} from \"../FertilizerSelect/SelectedListItem\";\nimport styled from \"styled-components\";\nimport {calculateNPKBalance, getEmptyElements, ppmToEC} from \"@/calculator/helpers\";\nimport {StyledBalanceCell} from \"../Options/Recipe\";\nimport {ResultFertilizerList} from \"./ResultFertilizerList\";\nimport {useFertilizerSolutionGroup, usePPM} from \"./hooks\";\nimport {ResultDilution} from \"@/components/Calculator/Result/ResultDilution\";\nimport {round} from \"@/utils\";\n\ninterface ResultProps {\n}\n\nconst StyledList = styled.ul`\n  @media screen and (min-width: 800px) {\n    width: 75%;\n  }\n`\n\nfunction getScoreDisplay(score: number): string {\n  let score_display = \"Не соответствует\";\n  if (score >= 95) score_display = \"Идеально\";\n  if (score >= 90 && score < 95) score_display = \"Отлично\";\n  if (score >= 85 && score < 90) score_display = \"Очень хорошо\";\n  if (score >= 80 && score < 85) score_display = \"Хорошо\";\n  if (score >= 70 && score < 80) score_display = \"Средне\";\n  if (score >= 60 && score < 70) score_display = \"Плохо\";\n  if (score >= 40 && score < 60) score_display = \"Ужасно\";\n  return score_display\n}\n\n\nexport const Result: FunctionComponent<ResultProps> = () => {\n  const {\n    result,\n  } = useSelector<any>(state => state.calculator) as CalculatorState\n\n  const {\n    solution_volume,\n  } = useSelector(getFormValues(REDUX_FORM_NAME)) as CalculatorFormValues\n\n  const ppm = usePPM()\n  const fertilizerWeightGroups = useFertilizerSolutionGroup()\n\n  const score = result?.score || 0\n  const elements = result?.elements || getEmptyElements()\n  const deltaElements = result?.deltaElements || getEmptyElements()\n  const NPKBalance = calculateNPKBalance(elements)\n\n  return (\n    <Card>\n      <Flex alignItems=\"center\" flexDirection=\"column\">\n        <Flex>\n          {elements && MACRO_ELEMENT_NAMES.map(\n            k => <Element\n              key={k}\n              name={k}\n              value={round(elements[k])}\n              delta={round(deltaElements[k])}\n            />\n          )}\n        </Flex>\n        <Flex justifyContent=\"space-around\">\n          <StyledBalanceCell name=\"ΔΣ I\" value={NPKBalance.ion_balance}/>\n          <StyledBalanceCell name=\"EC\" value={NPKBalance.EC}/>\n          <StyledBalanceCell name=\"%NH4\" value={round(NPKBalance.ratio.NH4.NO3 * 100, 1)}/>\n          <StyledBalanceCell name=\"K:Mg\" value={NPKBalance.ratio.K.Mg}/>\n          <StyledBalanceCell name=\"K:Ca\" value={NPKBalance.ratio.K.Ca}/>\n          <StyledBalanceCell name=\"Ca:N\" value={NPKBalance.ratio.Ca.N}/>\n        </Flex>\n        <Heading fontSize={2}>\n          Оценка: {getScoreDisplay(score)}\n        </Heading>\n\n        <Text fontSize={6}>{`${score || 0}%`}</Text>\n        <StyledList>\n          <li>{solution_volume}л воды</li>\n          {fertilizerWeightGroups.map(([g, f_weights]) =>\n            (<li>\n                <b> Раствор {g} </b>\n                <ul>\n                  <ResultFertilizerList fertilizers={f_weights}/>\n                </ul>\n              </li>\n            )\n          )}\n          <li title=\"Или минерализация, в мг/л\">\n            <b>TDS:</b> {ppm} ppm; <b>EC:</b> {ppmToEC(ppm, 1)} мСм/см\n          </li>\n        </StyledList>\n        <ResultDilution/>\n        {result?.stats &&\n        <Text>\n          Обработано вариантов: {result?.stats.count} Время: {result?.stats.time} сек\n        </Text>\n        }\n      </Flex>\n    </Card>\n  )\n}\n\n","import parse from \"csv-parse/lib/sync\"\nimport stringify from \"csv-stringify/lib/sync\"\n\nexport const csvParse = parse\nexport const csvExport = stringify\n\n\n","import React, {ChangeEvent, createRef, useEffect, useState} from \"react\";\nimport {Import} from \"@styled-icons/boxicons-regular/Import\"\nimport {IconButton} from \"@/components/ui/IconButton\";\nimport {csvParse} from \"@/utils/csv\";\nimport {FERTILIZER_ELEMENT_NAMES} from \"@/calculator/constants\";\nimport {buildNPKFertilizer} from \"@/calculator/fertilizer\";\nimport {useDispatch} from \"react-redux\";\nimport {fertilizerPush} from \"@/components/Calculator/actions\";\n\ninterface ImportFertilizersProps {\n}\n\nconst COLUMNS = ['id', ...FERTILIZER_ELEMENT_NAMES]\n\nexport function ImportFertilizers(props: ImportFertilizersProps) {\n  const buttonRef = createRef<HTMLButtonElement>()\n  const dispatch = useDispatch()\n  const [size, setSize] = useState({width: 0, height: 0})\n  useEffect(() => {\n    const newSize = {\n      width: buttonRef.current?.offsetWidth || 0,\n      height: buttonRef.current?.offsetHeight || 0,\n    }\n    if (size.width !== newSize.width) {\n      setSize(newSize)\n    }\n  }, [buttonRef, size.width])\n\n  const loadCSV = (csv: string) => {\n    const p = csvParse(csv, {columns: COLUMNS})\n    if (isNaN(parseInt(p[0].P))) {\n      p.splice(0, 1)\n    }\n    for (let {id, ...npk} of p) {\n      const f = buildNPKFertilizer(id, npk)\n      dispatch(fertilizerPush(f))\n    }\n  }\n\n  const handleOnChange = (e: ChangeEvent<HTMLInputElement>) => {\n    console.log(e.target.value, e.target.files?.[0])\n    const file = e.target.files?.[0]\n    if (!file) {\n      return file\n    }\n    let reader = new FileReader();\n    reader.onload = () => {\n      console.log(reader.result)\n      loadCSV(reader.result as string)\n\n    }\n    reader.readAsText(file)\n\n  }\n  return (\n    <>\n      <IconButton\n        sx={{\n          position: \"relative\"\n        }}\n        ref={buttonRef}\n        component={Import}\n      >\n        <input type=\"file\"\n               accept=\"text/csv, .csv\"\n               onChange={event => handleOnChange(event)}\n               style={{\n                 top: 0,\n                 left: 0,\n                 position: \"absolute\",\n                 opacity: 0,\n                 ...size,\n               }}\n        />\n      </IconButton>\n    </>\n  )\n}\n","export const saveData = (function () {\n  const a = document.createElement(\"a\");\n  document.body.appendChild(a);\n  a.setAttribute('style', \"display: none\")\n  return function (data: string, fileName: string) {\n    const blob = new Blob([data], {type: \"octet/stream\"})\n    const url = window.URL.createObjectURL(blob)\n    a.href = url;\n    a.download = fileName;\n    a.click();\n    window.URL.revokeObjectURL(url);\n  };\n})();\n\nexport {}\n","import React from \"react\";\nimport {Export} from \"@styled-icons/boxicons-regular/Export\"\nimport {IconButton} from \"@/components/ui/IconButton\";\nimport {useSelector} from \"react-redux\";\nimport {CalculatorState} from \"@/components/Calculator/types\";\nimport {normalizeFertilizer} from \"@/calculator/fertilizer\";\nimport {FERTILIZER_ELEMENT_NAMES} from \"@/calculator/constants\";\nimport {csvExport} from \"@/utils/csv\";\nimport {saveData} from \"@/utils/downloads\";\n\ninterface ExportFertilizersProps {\n}\n\nexport function ExportFertilizers(props: ExportFertilizersProps) {\n  const {\n    fertilizers,\n  } = useSelector<any>(state => state.calculator) as CalculatorState\n  const doExport = () => {\n    const npkFertilizer = fertilizers.map(f => normalizeFertilizer(f, false))\n    const rows = npkFertilizer.map(f => {\n      const cols = FERTILIZER_ELEMENT_NAMES.map(n => f.elements[n])\n      return [f.id, ...cols]\n    })\n    const csvData = csvExport(rows, {columns: ['Удобрение', ...FERTILIZER_ELEMENT_NAMES], header: true})\n    saveData(csvData, \"Удобрения.csv\")\n  }\n  return (\n    <>\n      <IconButton onClick={doExport} component={Export}/>\n    </>\n  )\n}\n","import React from \"react\";\nimport {Export} from \"@styled-icons/boxicons-regular/Export\"\nimport {IconButton} from \"@/components/ui/IconButton\";\nimport {useSelector} from \"react-redux\";\nimport {CalculatorState} from \"@/components/Calculator/types\";\nimport {FERTILIZER_ELEMENT_NAMES} from \"@/calculator/constants\";\nimport {csvExport} from \"@/utils/csv\";\nimport {saveData} from \"@/utils/downloads\";\n\ninterface ExportRecipesProps {\n}\n\nexport function ExportRecipes(props: ExportRecipesProps) {\n  const {\n    recipes,\n  } = useSelector<any>(state => state.calculator) as CalculatorState\n  const doExport = () => {\n    const rows = recipes.map(f => {\n      const cols = FERTILIZER_ELEMENT_NAMES.map(n => f.elements[n])\n      return [f.name, ...cols]\n    })\n    const csvData = csvExport(rows, {columns: ['Профиль', ...FERTILIZER_ELEMENT_NAMES], header: true})\n    saveData(csvData, \"Профили.csv\")\n  }\n  return (\n    <>\n      <IconButton onClick={doExport} component={Export}/>\n    </>\n  )\n}\n","import React, {ChangeEvent, createRef, useEffect, useState} from \"react\";\nimport {Import} from \"@styled-icons/boxicons-regular/Import\"\nimport {IconButton} from \"@/components/ui/IconButton\";\nimport {csvParse} from \"@/utils/csv\";\nimport {FERTILIZER_ELEMENT_NAMES} from \"@/calculator/constants\";\nimport {useDispatch} from \"react-redux\";\nimport {recipePush} from \"@/components/Calculator/actions\";\n\ninterface ImportRecipesProps {\n}\n\nconst COLUMNS = ['id', ...FERTILIZER_ELEMENT_NAMES]\n\nexport function ImportRecipes(props: ImportRecipesProps) {\n  const buttonRef = createRef<HTMLButtonElement>()\n  const dispatch = useDispatch()\n  const [size, setSize] = useState({width: 0, height: 0})\n  useEffect(() => {\n    const newSize = {\n      width: buttonRef.current?.offsetWidth || 0,\n      height: buttonRef.current?.offsetHeight || 0,\n    }\n    if (size.width !== newSize.width) {\n      setSize(newSize)\n    }\n  }, [buttonRef, size.width])\n\n  const loadCSV = (csv: string) => {\n    const p = csvParse(csv, {columns: COLUMNS})\n    if (isNaN(parseInt(p[0].P))) {\n      p.splice(0, 1)\n    }\n    for (let {id, ...npk} of p) {\n      dispatch(recipePush({name: id, elements: npk}))\n    }\n  }\n\n  const handleOnChange = (e: ChangeEvent<HTMLInputElement>) => {\n    console.log(e.target.value, e.target.files?.[0])\n    const file = e.target.files?.[0]\n    if (!file) {\n      return file\n    }\n    let reader = new FileReader();\n    reader.onload = () => {\n      console.log(reader.result)\n      loadCSV(reader.result as string)\n\n    }\n    reader.readAsText(file)\n\n  }\n  return (\n    <>\n      <IconButton\n        sx={{\n          position: \"relative\"\n        }}\n        ref={buttonRef}\n        component={Import}\n      >\n        <input type=\"file\"\n               accept=\"text/csv, .csv\"\n               onChange={event => handleOnChange(event)}\n               style={{\n                 top: 0,\n                 left: 0,\n                 position: \"absolute\",\n                 opacity: 0,\n                 ...size,\n               }}\n        />\n      </IconButton>\n    </>\n  )\n}\n","import {SxStyleProp} from \"rebass\";\n\nexport function mobileStyles(styles: SxStyleProp) {\n  return {\n    '@media screen and (max-width: 800px)': styles\n  }\n}\n","import React from \"react\";\nimport {Box, Card, Flex, Heading, Text} from 'rebass'\nimport {Restart} from \"@styled-icons/remix-line/Restart\"\nimport {Form, reduxForm} from \"redux-form\";\nimport {connect, useDispatch} from \"react-redux\";\n\nimport FertilizerSelect from './FertilizerSelect'\nimport {Options} from \"./Options/Options\";\nimport {Result} from \"./Result/Result\";\nimport {CalculatorFormValues} from \"./types\";\nimport {ReduxFormType} from \"../ui/ReduxForm/types\";\nimport {REDUX_FORM_NAME} from \"./constants\";\nimport {calculateStart, fertilizerReset, recipeReset} from \"./actions\";\nimport {ImportFertilizers} from \"@/components/Calculator/ImportExport/ImportFertilizers\";\nimport {ExportFertilizers} from \"@/components/Calculator/ImportExport/ExportFertilizers\";\nimport {IconButton} from \"@/components/ui/IconButton\";\nimport {DEFAULT_RECIPES} from \"@/components/Calculator/constants/recipes\";\nimport {ExportRecipes} from \"@/components/Calculator/ImportExport/ExportRecipes\";\nimport {ImportRecipes} from \"@/components/Calculator/ImportExport/ImportRecipes\";\nimport {Recipe} from \"@/components/Calculator/Options/Recipe\";\nimport {mobileStyles} from \"@/components/ui/styled\";\nimport {RootState} from \"@/redux/types\";\n\ninterface CalculatorProps {\n\n}\n\nconst initialValues: CalculatorFormValues = {\n  accuracy: 0.2,\n  solution_volume: 1,\n  solution_concentration: 100,\n  recipe: DEFAULT_RECIPES[0].elements,\n  fertilizers: [],\n\n  dilution_enabled: false,\n  dilution_volume: 20,\n  dilution_concentration: 1,\n}\nexport const CalculatorContainer: ReduxFormType<CalculatorProps, CalculatorFormValues> = ({handleSubmit}) => {\n  const dispatch = useDispatch()\n  return (\n    <Form\n      onSubmit={handleSubmit(() => {\n        dispatch(calculateStart())\n      })}\n    >\n      <Flex sx={{\n        flexDirection: 'row',\n        ...mobileStyles({\n          flexDirection: 'column-reverse',\n        })\n      }}>\n        <Box flex={1}\n             sx={{\n               marginRight: 2,\n               ...mobileStyles({\n                 marginRight: 0\n               })\n             }}\n        >\n          <FertilizerSelect/>\n        </Box>\n        <Flex flexDirection='column' flex={1}>\n          <Box flex={1} marginBottom={2}>\n            <Recipe/>\n          </Box>\n          <Box flex={1}>\n            <Result/>\n          </Box>\n          <Box flex={1}>\n            <Options/>\n          </Box>\n          <Card>\n            <Heading fontSize={2}>Импорт/Экспорт</Heading>\n            <Flex flexDirection=\"column\" p={3}>\n              <Flex alignItems='center'\n                    paddingBottom={2}\n                    justifyContent=\"space-between\"\n                    flexWrap=\"wrap\"\n              >\n                <Text>Удобрения</Text>\n                <Box sx={{\n                  \"&>*\": {\n                    marginLeft: 1\n                  }\n                }}>\n                  <ImportFertilizers/>\n                  <ExportFertilizers/>\n                  <IconButton\n                    component={Restart}\n                    onClick={() => dispatch(fertilizerReset())}\n                  />\n                </Box>\n              </Flex>\n              <Flex alignItems='center'\n                    justifyContent=\"space-between\"\n                    flexWrap=\"wrap\"\n              >\n                <Text>Рецепты</Text>\n                <Box sx={{\n                  \"&>*\": {\n                    marginLeft: 1\n                  }\n                }}>\n                  <ImportRecipes/>\n                  <ExportRecipes/>\n                  <IconButton\n                    component={Restart}\n                    onClick={() => dispatch(recipeReset())}\n                  />\n                </Box>\n              </Flex>\n            </Flex>\n          </Card>\n        </Flex>\n      </Flex>\n    </Form>\n  )\n}\n\n\nconst InitializerCalculator = reduxForm<CalculatorFormValues>({\n  form: REDUX_FORM_NAME,\n  initialValues,\n  // enableReinitialize: true\n})(CalculatorContainer)\n\nconst ReduxCalculator = connect((state: RootState) => (\n  {\n    initialValues: state.calculator?.calculationForm || initialValues\n  }))(InitializerCalculator)\n\nexport default ReduxCalculator\n"],"sourceRoot":""}